         
 
 
 
 shangcheng/actions/activity/ttth.js 
 
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get } from 'business'

export const getTtthData = paras => dispatch => {
  const closeLoading = Loading()
  get('/mall/v1/activities', paras).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_TTTH_DATA', activityDay: paras.date, ttthData: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/activity/year-activity.js 
 
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get } from 'business'

export const getActivities = () => dispatch => {
  const closeLoading = Loading()
  get('/mall/v1/activities').then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'GET_ACTIVITIES', activities: data.activities })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  }).catch(message => console.log('getActivities', message))
}
         
 
 
 
 shangcheng/actions/ajax.js 
 
import { get as oldGet, send as oldSend } from '@boluome/common-lib'

export const get = (api, body, headers = {}) => oldGet(api, body, headers)
export const send = (api, body, method, headers = {}) => oldSend(api, body, method, headers)
         
 
 
 
 shangcheng/actions/app.js 
 
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get } from './ajax'

export const getMenus = () => dispatch => {
  const closeLoading = Loading()
  get('/mall/v1/menus').then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_MAIN_MENUS', menus: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/brand.js 
 
import { getStore } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get, send } from './ajax'

export const getBrandInfo = brandId => dispatch => {
  const closeLoading = Loading()
  const userId = getStore('customerUserId', 'session')
  get('/mall/v1/commodity/brand', { brandId, userId }).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_BRAND_INFO', brandInfo: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}


export const getBrandCommodityList = brandId => dispatch => {
  const closeLoading = Loading()
  get('/mall/v1/commodity/list', { brandId }).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_BRAND_COMMODITY_LIST', brandCommodityList: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const getAttentionList = () => dispatch => {
  const closeLoading = Loading()
  const userId = getStore('customerUserId', 'session')
  get('/mall/v1/own/attentions', { userId }).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_ATTENTION_LIST', attentionList: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

// brandId: 商家Id， isAttention: 关注还是取消关注，isList：是否是关注列表页面
export const handleChangeAttention = (brandInfo, isAttention, isList) => dispatch => {
  // const closeLoading = Loading()
  const userId = getStore('customerUserId', 'session')
  const api = isAttention ? '/mall/v1/commodity/attention' : '/mall/v1/own/attention'
  const method = isAttention ? 'POST' : 'DELETE'
  const { brandId, brandCode } = brandInfo
  console.log('brandInfo', brandInfo)
  send(api, { brandId, userId, brandCode }, method).then(({ code, message }) => {
    if (code === 0) {
      if (!isList) dispatch({ type: 'SET_BRAND_Attention', isAttention })
      if (isList) dispatch(getAttentionList())
      if (isAttention) {
        brandInfo.attentionCount++
        dispatch({ type: 'SET_BRAND_INFO', brandInfo })
        Toast.info('关注成功', 1)
      }
      if (!isAttention) {
        brandInfo.attentionCount--
        dispatch({ type: 'SET_BRAND_INFO', brandInfo })
        Toast.info('已取消关注', 1)
      }
    } else {
      Toast.fail(message)
    }
    // closeLoading()
  })
}

// 商家分类
export const getBrandCategories = (brandId, callback) => {
  const closeLoading = Loading()
  get('/mall/v1/brand/sort', { brandId }).then(({ code, data, message }) => {
    if (code === 0) {
      callback(data)
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/common-api.js 
 
import { getStore } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { keys } from 'ramda'

import { send } from './ajax'

import { addCommodity } from './common-fuc'


export const checkCommodityStatus = (currentOrderInfo, listName) => dispatch => {
  // const closeLoading = Loading()
  const { brandId, commodityId, currentPriceInfo } = currentOrderInfo
  const specifications = [{ specificationId: currentPriceInfo.specificationId }]
  const checkMsgList = [
    {
      brandId,
      commodities: [
        {
          commodityId,
          specifications,
        },
      ],
    },
  ]
  send('/mall/v1/commodity/status', { checkMsgList }).then(({ code, data, message }) => {
    if (code === 0) {
      if (data[0].canService === false || data[0].commodities.canService === false) {
        Toast.info(data[0].description, 1)
        return
      }
      const currentSpec = data[0].commodities[0].specifications[0]
      const { canService, description } = currentSpec
      if (!canService) {
        dispatch({ type: 'SET_CURRENT_COMMODITY_STATUS', commodityStatus: currentSpec })
        Toast.info(description, 1)
        // closeLoading()
        return
      }
      const commodityListData = getStore(listName)
      if (listName === 'cartCommoditys') Toast.info('加入购物车成功', 1)
      dispatch(addCommodity(currentOrderInfo, commodityListData, listName))
    } else {
      Toast.fail(message)
    }
    // closeLoading()
  })
}

export const checkCartStatus = cartCommoditys => dispatch => {
  if (cartCommoditys.totalNum === 0) {
    dispatch({ type: 'SET_CART_GOODS', cartCommoditys })
    // statusChecked ：购物城中的商品状态是否检测过
    dispatch({ type: 'SET_CHECKED_STATUS', statusChecked: true })
    return
  }
  const closeLoading = Loading()
  const checkMsgList = cartCommoditys.brandList.map(o => {
    const { brandId, commodityList } = o
    // commoditiesInfo: 表示单个商品的信息，commodityId相同的商品会合并到一起, { commodityId: specifications }, specifications是一个数组: [specificationId, specificationId...]
    const commoditiesInfo = {}
    commodityList.forEach(oo => {
      const { commodityId, currentPriceInfo } = oo
      if (commoditiesInfo[commodityId]) {
        commoditiesInfo[commodityId].push({ specificationId: currentPriceInfo.specificationId })
      } else {
        commoditiesInfo[commodityId] = [{ specificationId: currentPriceInfo.specificationId }]
      }
    })
    const commodities = keys(commoditiesInfo).map(commodityId => ({
      commodityId:    Number(commodityId),
      specifications: commoditiesInfo[commodityId],
    }))
    return {
      brandId,
      commodities,
    }
  })
  send('/mall/v1/commodity/status', { checkMsgList }).then(({ code, data, message }) => {
    if (code === 0) {
      const { brandList } = cartCommoditys
      // 更改商品的数据
      data.forEach((o, i) => {
        // 如果商家的状态为休息中时，将其下所有的商品都置于商家的状态，否则去匹配具体商品状态
        if (o.canService === false) {
          brandList[i].commodityList = brandList[i].commodityList.map(bb => {
            bb.canService = false
            bb.description = o.description
            return bb
          })
        } else {
          // 匹配具体商品状态
          o.commodities.forEach(oo => {
            const commodityItemCanservice = oo.canService
            const commodityItemDescription = oo.description
            oo.specifications.forEach(ooo => {
              // 根据返回数据当前商品的所有规格信息，去到购物车数据中找到指定规格的商品，然后将返回的canService字段，赋予购物车中的规格
              brandList[i].commodityList.forEach((b, bi) => {
                if (commodityItemCanservice === false) {
                  brandList[i].commodityList[bi].currentPriceInfo.canService = false
                  brandList[i].commodityList[bi].currentPriceInfo.description = commodityItemDescription
                  return
                }
                if (b.currentPriceInfo.specificationId === ooo.specificationId) {
                  brandList[i].commodityList[bi].currentPriceInfo.canService = ooo.canService
                  brandList[i].commodityList[bi].currentPriceInfo.description = ooo.description
                }
              })
            })
          })
        }
      })
      dispatch({ type: 'SET_CART_GOODS', cartCommoditys })
      // statusChecked ：购物城中的商品状态是否检测过
      dispatch({ type: 'SET_CHECKED_STATUS', statusChecked: true })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/common-component/commodity-list.js 
 
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get } from '../ajax'


export const getCommodityList = (url, paras) => dispatch => {
  const closeLoading = Loading()
  get(url, paras).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_GOOD_LIST', commodityList: data, commodityListParas: { url, paras } })
    } else {
      // dispatch({ type: 'SET_GOOD_LIST', commodityList: [], commodityListParas: { url, paras } })
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/common-fuc.js 
 
/*
  购物车数据格式：
  {
    totalNum,
    brandList: [
      {
        brandId: 商家id,
        brandName: 商家名,
        commodityList: [
          { 商品信息, 商品数量 },
          { 商品信息, 商品数量 },
        ]
      },
      {
        brandId: 商家id,
        brandName: 商家名,
        commodityList: [
          { 商品信息, 商品数量 },
          { 商品信息, 商品数量 },
        ]
      },
    ]
  },
  购物车数据在store中都是放入market下的，本地中每次也会有的
*/

import { browserHistory } from 'react-router'
import { setStore } from '@boluome/common-lib'
// import { Toast } from 'antd-mobile'

// 向购物车中增加商品
export const addCommodity = (data, commodityListData, listName = 'cartCommoditys') => dispatch => {
  if (!commodityListData || !commodityListData.totalNum) commodityListData = { totalNum: 0, brandList: [] }
  // notChangeNum: 不改变商品数量   已取消该判断
  const { brandList = [] } = commodityListData
  let { totalNum } = commodityListData
  let inBrandList = false
  let inCommodityList = false
  // 用一个新的商家信息(newCommodityList)来承装操作后的数据，先将就的删除，再把处理过的数据添加进入
  let newCommodityList = []
  const newBrandList =
  brandList.length >= 1
    ? brandList.filter(o => {
      // 如果产品的商家在对应商家列表中，执行下一句注释对应方案
      if (o.brandId === data.brandId) {
        inBrandList = true
        // 如果购物车中已有该种商品，就先删除，然后把这个商品已有数量加添加数量，再重新插入到购物车列表中对应商家列表的商品列表中
        newCommodityList = o.commodityList.map(oo => {
          if (oo.currentPriceInfo.specificationId === data.currentPriceInfo.specificationId) {
            oo.buyNum += data.buyNum
            inCommodityList = true
          }
          return oo
        })
        // 如果不在其中，就将新的插入
        if (!inCommodityList) newCommodityList.unshift(data)
        return false
      }
      return true
    })
    : []
  // 如果产品的商家不在对应商家列表中，就新建一个商品列表，将商品放入进去
  if (!inBrandList) {
    newCommodityList = [data]
  }
  // 将最新的商品列表数据添加到商家列表中
  const currentBrandInfo = {
    brandId:       data.brandId,
    brandName:     data.brandName,
    brandImg:      data.bigLogoImg,
    commodityList: newCommodityList,
  }
  if (listName === 'orderCommoditys') {
    totalNum = data.buyNum
    const totalPrice = data.buyNum * data.currentPriceInfo.sellPrice
    currentBrandInfo.totalNum = totalNum
    currentBrandInfo.totalPrice = totalPrice
    // 给商品添加canService，因为这里直接去下单，不经过购物车，所以没有canService字段
    currentBrandInfo.canService = true
    currentBrandInfo.commodityList = currentBrandInfo.commodityList.map(o => {
      o.currentPriceInfo.canService = true
      return o
    })
    currentBrandInfo.directOrder = true
    setStore('orderCommoditys', currentBrandInfo)
    browserHistory.push('/shangcheng/order')
  } else if (listName === 'cartCommoditys') {
    // 添加到购物车的流程
    newBrandList.push(currentBrandInfo)
    // 将总数量加当前选择商品的数量
    // if (!notChangeNum) totalNum += data.buyNum
    totalNum += data.buyNum
    commodityListData.totalNum = totalNum
    commodityListData.brandList = newBrandList
    setStore('cartCommoditys', commodityListData)
    dispatch({ type: 'SET_CART_GOODS', cartCommoditys: commodityListData })
  }
}

// 删除购物车中，指定商家任意商品的数据
export const delCartCommodity = (cartCommoditys, brandCommodities) => {
  let { brandList } = cartCommoditys
  brandList = brandList.filter(o => {
    if (o.brandId === brandCommodities.brandId) {
      o.commodityList = o.commodityList.filter(oo => {
        let inBrandCommodities = false
        brandCommodities.commodityList.forEach(b => {
          // 找到购物车中的订单商品
          if (b.currentPriceInfo.specificationId === oo.currentPriceInfo.specificationId) inBrandCommodities = true
        })
        return !inBrandCommodities
      })
      if (o.commodityList.length === 0) return false
      return true
    }
    return true
  })
  cartCommoditys.totalNum -= brandCommodities.totalNum
  cartCommoditys.brandList = brandList
  setStore('cartCommoditys', cartCommoditys)
  // dispatch({ type: 'SET_CART_GOODS', cartCommoditys: '' })
  return cartCommoditys
}

export const timeToCountdown = time => {
  time = parseInt(time / 1000, 10)
  const normalTime = dd => (String(dd).length === 1 ? `0${ dd }` : dd)
  const s = normalTime(time % 60)
  const min = normalTime(parseInt(time / 60, 10) % 60)
  const hour = normalTime(parseInt(time / 60 / 60, 10) % 24)
  return `${ hour }:${ min }:${ s }`
}
         
 
 
 
 shangcheng/actions/evaluate/index.js 
 
// import { browserHistory } from 'react-router'
import { getStore, setStore } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get, send } from '../ajax'

export const getOrderInfo = (id, orderType) => dispatch => {
  const closeLoading = Loading()
  get(`/order/v1/${ orderType }/${ id }/info`).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_EVALUATE_ORDER_INFO', orderInfo: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const placeEvaluate = paras => () => {
  const closeLoading = Loading()
  send('/mall/v1/commodity/comment', paras).then(({ code }) => {
    if (code === 0) {
      Toast.info('发表成功')
      window.history.back()
      // browserHistory.push(`/shangcheng/refundInfo/refund/${ data.id }`)
    } else {
      Toast.info('发表失败')
    }
    closeLoading()
  })
}

export const updateImg = paras => {
  const closeLoading = Loading()
  const userid = getStore('customerUserId', 'session')
  const token = getStore('accessToken', 'session')
  const appcode = getStore('customerCode', 'session')
  const getUrl = 'https://upload.otosaas.com/new'
  const headers = {
    appcode,
    userid,
    token,
  }
  fetch(getUrl, { body: paras.imgs, method: 'post', headers })
  .then(response => response.json())
  .then(json => {
    const { code, data } = json
    if (code === 0) {
      Toast.info('上传成功 !', 2, null, false)
      paras.imgs = data.map(o => o.md5)
      placeEvaluate(paras)
    } else {
      Toast.info('图片上传失败 !', 2, null, false)
      setStore('paotui_imgSrc', [], 'session')
    }
    closeLoading()
  })
  .catch(error => {
    console.log('request failed: ', error)
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/main/categories.js 
 
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get } from '../ajax'

export const getSubCategories = categoryId => dispatch => {
  const closeLoading = Loading()
  get('/mall/v1/subcategories', { categoryId }).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_SUB_CATEGORIES', subCategoriesData: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const getTopCategories = () => dispatch => {
  const closeLoading = Loading()
  get('/mall/v1/categories').then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_TOP_CATEGORIES', topCategoriesData: data })
      // 只执行一次，所以顺便默认请求一下二级分类
      dispatch(getSubCategories(data[0].categoryId))
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/main/commodity-detail.js 
 
import { getStore } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get, send } from '../ajax'

export const getCommodityDetail = commodityId => dispatch => {
  const closeLoading = Loading()
  const userId = getStore('customerUserId', 'session')
  get('/mall/v1/commodity/detail', { commodityId, userId }).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_COMMODITY_DETAIL', commodityDetail: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}


export const getCollectList = () => dispatch => {
  const closeLoading = Loading()
  const userId = getStore('customerUserId', 'session')
  get('/mall/v1/own/collections', { userId }).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_COLLECT_LIST', collectList: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

// brandId: 商家Id， isCollect: 关注还是取消关注，isList：是否是关注列表页面
export const handleChangeCollect = (commodityId, isCollect, isList) => dispatch => {
  // const closeLoading = Loading()
  const userId = getStore('customerUserId', 'session')
  const api = isCollect ? '/mall/v1/commodity/collection' : '/mall/v1/own/collection'
  const method = isCollect ? 'POST' : 'DELETE'
  send(api, { commodityId, userId }, method).then(({ code, message }) => {
    if (code === 0) {
      if (!isList) dispatch({ type: 'SET_COMMODITY_COLLECT', isCollect })
      if (isList) dispatch(getCollectList())
      if (isCollect) Toast.info('收藏成功', 1)
      if (!isCollect) Toast.info('已取消收藏', 1)
    } else {
      Toast.fail(message)
    }
    // closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/main/daojia.js 
 
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get } from '../ajax'

export const getDaojiaInfo = paras => dispatch => {
  const closeLoading = Loading()
  paras.mapType = 'gaode'
  get('/daojia/v1/home', paras).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_DAOJIA_INFO', daojiaInfo: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/main/index.js 
 
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get } from '../ajax'

export const getColumns = () => dispatch => {
  const closeLoading = Loading()
  get('/mall/v1/columns').then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_MAIN_COLUMNS', columnList: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const getNewCommoditys = () => dispatch => {
  const closeLoading = Loading()
  get('/mall/v1/commoditys').then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_MAIN_NEW_COMMODITYS', newCommodityList: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const getRecommends = () => dispatch => {
  const closeLoading = Loading()
  get('/mall/v1/recommendation').then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_MAIN_RECOMMENDATION', recommendList: data.commodityData })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/main/market.js 
 
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get } from '../ajax'

export const getMarketCategories = () => dispatch => {
  const closeLoading = Loading()
  get('/mall/v1/market/categories').then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_MARKET_CATEGORIES', marketCategories: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const getMarketCommoditys = (categoryLevel = 0) => dispatch => {
  const closeLoading = Loading()
  get('/mall/v1/market', { categoryLevel }).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_MARKET_GOODS', marketCommoditys: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/main/specialty.js 
 
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get } from '../ajax'

export const getSpecialtyCommoditys = (province = 0) => dispatch => {
  const closeLoading = Loading()
  get('/mall/v1/specialty', { province }).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_SPECIALTY_GOODS', specialtyCommoditys: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const getProvince = () => dispatch => {
  const closeLoading = Loading()
  get('/mall/v1/provinces').then(({ code, data, message }) => {
    if (code === 0) {
      data.unshift({ id: 0, name: '全国' })
      dispatch({ type: 'SET_SPECIALTY_PROVINCE', specialtyProvince: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/message/index.js 
 
         
 
 
 
 shangcheng/actions/order-edit.js 
 
// import { getStore } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
// import { merge } from 'ramda'
import { send } from './ajax'
import { getOrderList } from './user-center/order-list'

export const handleDelOrder = (orderType, orderId, filter) => dispatch => {
  const closeLoading = Loading()
  send('/mall/v1/order/remove', { orderType, orderId }, 'DELETE').then(({ code, message }) => {
    if (code === 0) {
      dispatch(getOrderList(filter))
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const handleCancelOrder = (paras, filter) => dispatch => {
  const closeLoading = Loading()
  send('/order/v1/cancel', paras).then(({ code, message }) => {
    if (code === 0) {
      dispatch(getOrderList(filter))
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const handleConfirmOrder = (id, orderType, filter) => dispatch => {
  const closeLoading = Loading()
  send(`/order/v1/update/${ id }/orderStatus`, { orderType }).then(({ code, message }) => {
    if (code === 0) {
      dispatch(getOrderList(filter))
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/refund/index.js 
 
import { browserHistory } from 'react-router'
import { parseQuery } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get, send } from '../ajax'

export const getOrderInfo = (id, orderType) => dispatch => {
  const closeLoading = Loading()
  get(`/order/v1/${ orderType }/${ id }/info`).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_CURRENT_ORDER_INFO', currentOrderInfo: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const placeRefundOrder = paras => () => {
  const closeLoading = Loading()
  const refundId = parseQuery(location.search).refundId
  let url = '/order/v1/refund/order'
  if (refundId) {
    url = '/order/v1/refund/update'
    paras.orderId = refundId
    paras.orderType = 'refund'
  }
  send(url, paras).then(({ code, data, message }) => {
    if (code === 0) {
      browserHistory.push(`/shangcheng/refundInfo/refund/${ data.id }`)
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/refund/refund-info.js 
 
import { browserHistory } from 'react-router'
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get, send } from '../ajax'

export const getRefundInfo = () => dispatch => {
  const closeLoading = Loading()
  const orderType = location.pathname.split('/')[3]
  const id = location.pathname.split('/')[4]
  get(`/order/v1/${ orderType }/${ id }/info`).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_CURRENT_REFUND_INFO', currentRefundInfo: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const refundCancel = (id, originId, originOrderType) => () => {
  const closeLoading = Loading()
  get(`/order/v1/refund/${ id }/cancel`).then(({ code, message }) => {
    if (code === 0) {
      browserHistory.push(`/shangcheng/order/${ originOrderType }/${ originId }`)
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const getExpressInfo = expressId => dispatch => {
  const closeLoading = Loading()
  get('/mms/v1/express/enterprise', { expressId }).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_CURRENT_EXPRESS_INFO', expressInfo: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const placeExpress = paras => dispatch => {
  const closeLoading = Loading()
  send('/order/v1/logistics/submit', paras).then(({ code, message }) => {
    if (code === 0) {
      dispatch(getRefundInfo())
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const getExpressList = (orderId, callback) => {
  const closeLoading = Loading()
  get('/mall/v1/pay/express', { orderId }).then(({ code, data, message }) => {
    if (code === 0) {
      callback(data)
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/user-center/order-list.js 
 
import { getStore } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get } from '../ajax'

export const getOrderList = (filter = '') => dispatch => {
  const closeLoading = Loading()
  const userId = getStore('customerUserId', 'session')
  get('/mall/v1/pay/orders', { filter, userId }).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_ORDER_LIST', orderList: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/actions/user-center/order.js 
 
import React from 'react'
import { getStore, setStore } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { merge } from 'ramda'
import { afterOrdering } from 'business'

import { get, send } from '../ajax'
import { delCartCommodity } from '../../actions/common-fuc'

export const getFreight = (province, paras) => dispatch => {
  const closeLoading = Loading()
  send(`/mall/v1/pay/freight?province=${ province }`, paras).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_CURRENT_FREIGHT', currentFreight: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

// 当改变收货地址时，重新计算运费(首页第一次请求最有地址， 以及每一次改变收获地址之后)
export const changeAddress = contact => dispatch => {
  if (!contact) return
  const freightParas = getStore('freightParas', 'session')
  dispatch(getFreight(contact.province, freightParas))
}

export const getBestAddress = () => dispatch => {
  const closeLoading = Loading()
  const userId = getStore('customerUserId', 'session')
  const selectedCity = getStore('selectedCity', 'session')
  const { longitude, latitude } = selectedCity
  const paras = { userId, longitude, latitude, mapType: 'gaode' }
  get('/user/v1/contact', paras).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_CURRENT_ADDRESS', contact: data })
      dispatch(changeAddress(data))
    } else if (code === 1001) {
      dispatch(changeAddress(''))
      dispatch({ type: 'SET_CURRENT_ADDRESS', contact: '' })
    } else {
      Toast.fail(message, 1)
    }
    closeLoading()
  })
}

// directOrder:  表示是否是在详情页面直接下单，如果是，就不删除购物车中数据
export const placeOrder = (paras, directOrder) => () => {
  const closeLoading = Loading()
  const userId = getStore('customerUserId', 'session')
  const userPhone = getStore('userPhone', 'session')
  const commodities = getStore('orderParasCommodities', 'session')
  paras.brands[0].commodities = commodities
  paras = merge(paras)({ userId, userPhone })
  send('/mall/v1/pay/order', paras).then(({ code, data, message }) => {
    if (code === 0) {
      if (!directOrder) {
        const cartCommoditys = delCartCommodity(getStore('cartCommoditys'), getStore('orderCommoditys'))
        setStore('cartCommoditys', cartCommoditys)
      }
      afterOrdering(data)
    } else if (code === 10001) {
      Toast.info(JSON.parse(message).map(o => <p key={ o }>{ o }</p>), 1)
    } else {
      Toast.info(message, 3)
    }
    closeLoading()
  })
}


// export const checkAddressAvail = paras => dispatch => {
//   const closeLoading = Loading()
//   const userId = getStore('customerUserId', 'session')
//   paras.userId = userId
//   send('/daojia/v1/order/address', paras).then(({ code, data, message }) => {
//     if (code === 0) {
//       const addressAvail = data.result
//       dispatch({ type: 'SET_ADDRESS_AVAIL', addressAvail })
//       if (!addressAvail) Toast.info('当前选择地址不支持该服务', 1)
//     } else {
//       Toast.fail(message, 1)
//     }
//     closeLoading()
//   })
// }
         
 
 
 
 shangcheng/actions/user-center/refund-list.js 
 
import { getStore } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get } from '../ajax'

export const getRefundList = () => dispatch => {
  const closeLoading = Loading()
  const userId = getStore('customerUserId', 'session')
  get(`/order/v1/${ userId }/refunds`).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_REFUND_LIST', refundList: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 shangcheng/components/activity/index.js 
 
import React from 'react'

export default ({ children }) => (
  <div className='sc-activity'>
    { children }
  </div>
)
         
 
 
 
 shangcheng/components/activity/ttth.js 
 
import React from 'react'
import { moment } from '@boluome/common-lib'
import { forceCheck } from 'react-lazyload'
// import { Progress } from 'antd-mobile'

import '../../styles/activity/ttth.scss'

import CountDown from '../common-component/countdown'
import { BuyStep, Price, ActivityCommodityItem } from '../common-component/activity-common'

const Ttth = ({
  ttthData,
  times, activityDay = '', handleChangeActivityDay,
  handletoCommodity,
}) => {
  if (!ttthData) return <div />
  const { banners, activities } = ttthData
  let endTime = 0
  activities.forEach(o => {
    if (endTime < o.endTime) endTime = o.endTime
  })
  if (activityDay === '') activityDay = 0
  // 活动一
  const { commodities } = activities[0]
  const { iconUrl } = commodities[0]
  const { commodityName, commodityDescription, commodityId, sales, total, sellPrice, originalPrice } = commodities[0]
  const spikeOver = activities[0].endTime <= (new Date()).getTime()
  // 活动二
  const brandBuy = activities[1]
  let brandBuyNum = 0
  brandBuy.commodities.forEach(o => brandBuyNum += o.sales)
  // 是否是明日的活动
  const isTomorrow = activityDay === 1

  return (
    <div className='ttth' onScroll={ forceCheck }>
      <div className='banners'>
        <img src={ banners[0] } alt='banners' />
      </div>
      <ul className='list-sort'>
        {
          times.map(o => {
            const { date, title } = o
            let liClassName = ''
            if (activityDay === date) {
              if (date === 1) {
                liClassName = 'green-active'
              } else {
                liClassName = 'active'
              }
            }
            return (
              <li onClick={ () => activityDay !== date && handleChangeActivityDay(date) } className={ liClassName } key={ title }>
                <p>{ title }</p>
                {
                  o.date === 0 &&
                  <CountDown timeHeader='距结束' endTime={ endTime } delDay={ 1 } />
                }
                {
                  o.date === 1 &&
                    <span className='count-down'>{ '00:00开抢' }</span>
                }
              </li>
            )
          })
        }
        <li />
      </ul>
      <section className='spike'>
        <p>
          <span>限时</span>
          <span />
          <span>秒杀</span>
        </p>
        <dl onClick={ () => !spikeOver && !isTomorrow && handletoCommodity(commodityId) }>
          <dt><img src={ iconUrl } alt={ commodityName } /></dt>
          <dd>
            <p className='line-1'>{ commodityName }</p>
            <p className='line-1'>{ commodityDescription }</p>
            <div className='spike-dd-l'>
              {
                isTomorrow ?
                  <p className='green-active-font'>{ `明天${ moment('HH:mm')(activities[0].startTime) }开抢` }</p> :
                  <BuyStep { ...{ sales, total } } />
              }
              <Price spanClassName={ isTomorrow ? 'green-active-font' : '' } { ...{ sellPrice, originalPrice } } />
            </div>
            {
              !isTomorrow &&
              <div className='spike-dd-r'>
                {
                  spikeOver ?
                    <p className='count-down'><span className='disable'>00</span><span className='disable'>00</span><span className='disable'>00</span></p> :
                    <CountDown className='count-down' endTime={ activities[0].endTime } delDay={ 1 } justData={ 1 } />
                }
                <p className={ spikeOver ? 'activity-btn disable' : 'activity-btn' }>秒杀</p>
              </div>
            }
          </dd>
        </dl>
      </section>

      <section className='brand-buy'>
        <ul className='title'>
          <li className={ isTomorrow ? 'green-active-bg' : '' }>品牌抢购</li>
          <li>{ brandBuy.commodities[0].brandName }</li>
          {
            !isTomorrow &&
            <li>{ `已抢${ brandBuyNum }件` }</li>
          }
        </ul>
        <div className='list-commodities'>
          {
            brandBuy.commodities.slice(0, 3).map(o => {
              return (
                <dl key={ o.commodityId } onClick={ () => !isTomorrow && handletoCommodity(o.commodityId) }>
                  <dt><img src={ o.iconUrl } alt={ o.commodityName } /></dt>
                  <dd>
                    <p className='commodity-name line-1'>{ o.commodityName }</p>
                    <Price spanClassName={ isTomorrow ? 'green-active-font' : '' } { ...{ sellPrice: o.sellPrice, originalPrice: o.originalPrice } } />
                  </dd>
                </dl>
              )
            })
          }
        </div>
      </section>
      {
        activities.slice(2).map(o => (
          <section className='activity-3'>
            {
              o.commodities.map(oo => <ActivityCommodityItem data={ oo } key={ oo.commodityId } isTomorrow={ isTomorrow } />)
            }
          </section>
        ))
      }

      <p className='load-complete'>已经全部加载完毕</p>
    </div>
  )
}

export default Ttth
         
 
 
 
 shangcheng/components/activity/year-activity.js 
 
import React from 'react'
import { browserHistory } from 'react-router'
import { Icon } from 'antd-mobile'
import { splitEvery } from 'ramda'
import LazyLoad from 'react-lazyload'

import '../../styles/activity/year-activity.scss'

import testImg1 from '../../img/activity/test1.png'

const YearActivity = ({
  activities, currentActivityIndex = 0, handleTitleClick,
  handleScroll,
  showSubTitles = false,
}) => {
  if (!activities) return <div />
  // activities = ([clone(activities[0]), clone(activities[0]), clone(activities[0]), clone(activities[0]), clone(activities[0]), clone(activities[0]), clone(activities[0]), clone(activities[0])]).map((o, i) => {
  //   o.activityId += i
  //   return o
  // })
  const subTitles = activities.map(o => ({ title: o.activityName, id: o.activityId }))
  return (
    <div className='year-activity' onScroll={ e => { handleScroll(e) } }>
      <SubTitles { ...{ subTitles, currentActivityIndex, handleTitleClick, showSubTitles } } />
      <Banner />
      {
        activities.map(o => <Item { ...{ activityData: o } } key={ o.activityId } />)
      }
      <div className='footer-bg' />
    </div>
  )
}

export default YearActivity

class Banner extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      currentIndex: 0,
    }
  }
  handleScroll(e) {
    const { scrollLeft, offsetWidth } = e.target
    this.setState({ currentIndex: Math.floor((scrollLeft + 100) / offsetWidth) })
  }
  render() {
    const { currentIndex } = this.state
    const length = 1
    const testImgs = [testImg1]
    // 这一版不做的
    const canDo = false
    return (
      <div className='banner'>
        <div className='scroll-contaienr' onScroll={ e => this.handleScroll(e) }>
          <img src={ require('../../img/activity/banner_bg.png') } alt='banner' />
        </div>
        {
          canDo &&
          <div className='scroll-contaienr' onScroll={ e => this.handleScroll(e) }>
            <p>
              {
                Array.from(new Array(length)).map((o, i) => `${ o }${ i }`).map(o => <img src={ require('../../img/activity/banner_bg.png') } alt='banner' key={ o } />)
              }
            </p>
          </div>
        }
        {
          canDo &&
          Array.from(new Array(length)).map((o, i) => `${ o }${ i }`).map((o, i) => <img className={ currentIndex === i ? 'active' : '' } src={ testImgs[i] } alt='test' key={ o } />)
        }
      </div>
    )
  }
}

const SubTitles = ({ subTitles, currentActivityIndex, handleTitleClick, showSubTitles }) => {
  return (
    <ul className={ showSubTitles ? 'sub-titles active' : 'sub-titles' } onScroll={ () => {} }>
      {
        subTitles.map((o, i) => (
          <li className={ currentActivityIndex === i ? 'active' : '' } key={ o.id } onClick={ () => handleTitleClick(i) }>
            {
              currentActivityIndex === i &&
              <Icon type={ require('svg/location.svg') } size='md' />
            }
            { o.title }
          </li>
        ))
      }
    </ul>
  )
}

const Item = ({ activityData }) => {
  const { activityName, commodities } = activityData
  return (
    <div className='year-activity-item'>
      <SubTitle { ...{ content: activityName } } />
      {
        (splitEvery(2)(commodities)).map(data => <CommodityItem { ...{ data } } key={ data[0].commodityId } />)
      }
    </div>
  )
}


const SubTitle = ({ content }) => {
  return (
    <div className='sub-title'>
      <img src={ require('../../img/activity/label_l.png') } alt='label_l' />
      <p>{ content }</p>
      <img src={ require('../../img/activity/label_r.png') } alt='label_r' />
    </div>
  )
}

const CommodityItem = ({ data }) => {
  return (
    <ul className='year-commodity-item'>
      {
        data.map((o, i) => {
          const { iconUrl, commodityName, sellPrice, commodityId, commodityDescription } = o
          return (
            <li className={ i === 0 ? 'year-commodity-item-left' : 'year-commodity-item-right' } key={ commodityId } onClick={ () => browserHistory.push(`/shangcheng/commodity?commodityId=${ commodityId }`) }>
              <p className='img-container'>
                <LazyLoad
                  height='100%'
                  once
                  throttle={ 200 }
                  placeholder={ <img style={{ height: '100%', width: '100%', border: '1px solid #f5f5f6' }} alt='' /> }
                >
                  <img src={ `${ iconUrl }?image&action=format:t_jpeg|resize:w_400` } alt={ commodityName } />
                </LazyLoad>
              </p>
              <div className='commodity-describe'>
                <p className='commodity-name line-2'>{ commodityName }{ commodityDescription }</p>
                <p className='sell-price'>年货价：<span>¥</span><span>{ sellPrice }</span></p>
              </div>
            </li>
          )
        })
      }
    </ul>
  )
}
         
 
 
 
 shangcheng/components/app.js 
 
import React from 'react'
import { Flex, Icon } from 'antd-mobile'
// import vconsole from 'vconsole'

import '../styles/app.scss'

const menus = [
  { menuName: '首页', type: 'main', url: require('svg/shangcheng/main.svg'), selectedUrl: require('svg/shangcheng/main_a.svg') },
  // { menuName: '消息', type: 'message', url: require('svg/shangcheng/message.svg'), selectedUrl: require('svg/shangcheng/message_a.svg') },
  { menuName: '购物车', type: 'cart', url: require('svg/shangcheng/cart.svg'), selectedUrl: require('svg/shangcheng/cart_a.svg') },
  { menuName: '我的', type: 'userCenter', url: require('svg/shangcheng/userCenter.svg'), selectedUrl: require('svg/shangcheng/userCenter_a.svg') },
]

const App = ({ children, currentMenu, handleChangeMenu, cartCommoditys, showMenus = false, totalUnreadNum }) => {
  let totalNum = 0
  if (cartCommoditys && cartCommoditys.totalNum) totalNum = cartCommoditys.totalNum
  if (totalNum > 99) totalNum = '99+'
  if (totalUnreadNum > 99) totalUnreadNum = '99+'
  return (
    <div className='app-container'>
      <div className='app'>{ children }</div>
      <Flex style={ showMenus ? {} : { display: 'none' } } className='menus' onTouchMove={ e => e.preventDefault() }>
        {
          menus.map((o, i) => (
            <Flex.Item className={ currentMenu === o.type ? 'active' : '' } key={ o.menuName } onClick={ () => handleChangeMenu(o.type) }>
              <Icon type={ currentMenu === o.type ? o.selectedUrl : o.url } size='md' />
              <span>{ o.menuName }</span>
              {
                i === 4 && Boolean(totalUnreadNum) &&
                <span className='sc-badge-icon'>{ totalUnreadNum }</span>
              }
              {
                i === 1 && Boolean(totalNum) &&
                <span className='sc-badge-icon'>{ totalNum }</span>
              }
            </Flex.Item>
          ))
        }
      </Flex>
    </div>
  )
}

export default App
         
 
 
 
 shangcheng/components/brand/brand-categories.js 
 
import React from 'react'
import { browserHistory } from 'react-router'
import { Mask, SlidePage } from '@boluome/oto_saas_web_app_component'
import { Icon } from 'antd-mobile'

import { ListItem } from 's-component'

import { getBrandCategories } from '../../actions/brand'

import '../../styles/brand/brand-categories.scss'

const BrandCategoriesIcon = () => {
  return (
    <div className='categories-icon' onClick={ () => Mask(<SlidePage target='brand-categories-slide right' showClose={ '' }><BrandCategories /></SlidePage>) }>
      <Icon type={ require('svg/shangcheng/categories.svg') } size='md' />
      <span>分类</span>
    </div>
  )
}

export default BrandCategoriesIcon

class BrandCategories extends React.Component {
  constructor(props) {
    super(props)
    const brandId = window.location.pathname.split('/')[2]
    this.state = {
      brandCategoriesInfo: [],
      brandId,
    }
    this.getBrandCategories()
  }
  getBrandCategories() {
    const { brandId } = this.state
    const callback = data => {
      this.setState({ brandCategoriesInfo: data })
    }
    getBrandCategories(brandId, callback)
  }
  handleToList(brandSortId) {
    const { brandId } = this.state
    const { handleContainerClose } = this.props
    browserHistory.push(`/shangcheng/commodityList/${ brandId }?isBrandCategories=1&brandSortId=${ brandSortId }`)
    handleContainerClose()
  }

  render() {
    const { brandCategoriesInfo } = this.state
    return (
      <div className='brand-categories'>
        <ListItem title='全部宝贝' className='all-commodity' onClick={ () => this.handleToList('') } />
        <ul className='brand-categories-list'>
          {
            brandCategoriesInfo.map(o => {
              const { subBrandSortVos, brandSortName, brandSortId } = o
              const hasSub = subBrandSortVos.length > 0
              return (
                <li key={ brandSortId }>
                  <div className='list-header' onClick={ () => this.handleToList(brandSortId) }>
                    <span>{ brandSortName }</span>
                    {
                      hasSub ?
                        <span>查看全部</span> :
                        <Icon type={ require('svg/shangcheng/categories.svg') } size='md' />
                    }
                  </div>
                  <div className='list-content'>
                    {
                      subBrandSortVos.map(oo => (
                        <p key={ oo.brandSortId } onClick={ () => this.handleToList(oo.brandSortId) }><span>{ oo.brandSortName }</span></p>
                      ))
                    }
                  </div>
                </li>
              )
            })
          }
        </ul>
      </div>
    )
  }
}
         
 
 
 
 shangcheng/components/brand/index.js 
 
import React from 'react'
import { Icon } from 'antd-mobile'

import IndexSearch from '../common-component/index-search'
import CommodityList from '../../containers/common-component/commodity-list'
import BrandCategoriesIcon from './brand-categories'

import '../../styles/brand/index.scss'

const Brand = ({ brandInfo, handleChangeAttention, isAttention }) => {
  if (!brandInfo) return <div />
  const { brandName, brandId, smallLogoImg, publicityImg, servicePhone, attentionCount } = brandInfo
  if (isAttention === undefined) isAttention = brandInfo.isAttention
  return (
    <div className='brand-container'>
      <IndexSearch placeholder='搜索' categoryLevel={ -1 } brandId={ brandId } defaultRightComponent={ <BrandCategoriesIcon /> } />
      <div className='brand'>
        <div className='brand-header-container'>
          <div className='brand-header-mask' style={{ background: `url(${ publicityImg }) no-repeat center center` }} />
          <div className='brand-header'>
            <p className='brand-header-left'><span style={{ background: `url(${ smallLogoImg }) no-repeat center center` }} /></p>
            <div className='brand-header-mid'>
              <p>{ brandName }</p>
              <a href={ `tel:${ servicePhone }` }>
                <Icon type={ require('svg/shangcheng/contact_ff.svg') } size='md' />
                <span>客服</span>
              </a>
            </div>
            <div className='brand-header-right'>
              <p>
                <span>{ attentionCount }</span>
                <span>粉丝数</span>
              </p>
              {
                isAttention &&
                <p onClick={ () => handleChangeAttention(brandInfo, !isAttention) }>已关注</p>
              }
              {
                !isAttention &&
                <p className='attention-false'>
                  <Icon type={ require('svg/shangcheng/attention_ff.svg') } size='xxs' />
                  <span onClick={ () => handleChangeAttention(brandInfo, !isAttention) }>关注</span>
                </p>
              }
            </div>
          </div>
        </div>
        <CommodityList isBrand={ 1 } />
        <p className='footer-tips'>已经全部加载完毕</p>
      </div>
    </div>
  )
}

export default Brand
         
 
 
 
 shangcheng/components/cart/cart-brand-item.js 
 
import React, { Component } from 'react'
import { browserHistory } from 'react-router'
import { setStore } from '@boluome/common-lib'
import { Icon, Modal } from 'antd-mobile'

import CartCommodityItem from '../common-component/cart-commodity-item'
import PayFooter from '../common-component/pay-footer'

import '../../styles/cart/cart-brand-item.scss'

export default class CartBrandItem extends Component {
  constructor(props) {
    super(props)
    const { data } = props
    const { commodityList } = data
    // 将是否选中商品默认设为false
    commodityList.map(o => {
      o.isSelectCommodity = false
      return o
    })
    // canEdit: 能否进行编辑
    this.state = {
      isSelectBrand:   false,
      orderCommoditys: { totalNum: 0, totalPrice: 0, commodityList },
      canEdit:         false,
      data,
    }
    this.handleCommoditySelect = this.handleCommoditySelect.bind(this)
    this.handlePayClick = this.handlePayClick.bind(this)
    this.setOrderCommoditys = this.setOrderCommoditys.bind(this)
    this.handleDelCommdity = this.handleDelCommdity.bind(this)
    this.changeCartNum = this.changeCartNum.bind(this)
    this.handleClearInvalid = this.handleClearInvalid.bind(this)
  }
  setOrderCommoditys(commodityList, isSelectBrand) {
    let totalPrice = 0
    let totalNum = 0
    commodityList.forEach(o => {
      if (o.isSelectCommodity) {
        totalNum += o.buyNum
        totalPrice += o.buyNum * o.currentPriceInfo.sellPrice
      }
    })
    totalPrice = totalPrice.toFixed(2)
    const orderCommoditys = {
      commodityList,
      totalPrice,
      totalNum,
    }
    this.setState({ orderCommoditys, isSelectBrand })
  }
  handleBrandSelect(isSelectBrand) {
    const { orderCommoditys } = this.state
    const { commodityList } = orderCommoditys
    if (isSelectBrand) {
      commodityList.map(o => o.isSelectCommodity = o.currentPriceInfo.canService)
    } else {
      commodityList.map(o => o.isSelectCommodity = false)
    }
    this.setOrderCommoditys(commodityList, isSelectBrand)
  }
  handleCommoditySelect(index, res) {
    const { orderCommoditys } = this.state
    const { commodityList } = orderCommoditys
    commodityList[index].isSelectCommodity = res
    let isSelectBrand = true
    commodityList.forEach(o => {
      if (!o.isSelectCommodity) isSelectBrand = false
    })
    this.setOrderCommoditys(commodityList, isSelectBrand)
  }
  handlePayClick() {
    const { orderCommoditys } = this.state
    let { commodityList } = orderCommoditys
    commodityList = commodityList.filter(o => o.isSelectCommodity)
    if (commodityList && commodityList.length === 0) return
    const brandId = commodityList[0].brandId
    const brandName = commodityList[0].brandName
    const brandImg = commodityList[0].bigLogoImg
    orderCommoditys.brandId = brandId
    orderCommoditys.brandName = brandName
    orderCommoditys.brandImg = brandImg
    orderCommoditys.commodityList = commodityList
    setStore('orderCommoditys', orderCommoditys)
    browserHistory.push('/shangcheng/order')
  }
  handleEditClick(canEdit) {
    this.setState({ canEdit: !canEdit })
  }
  handleDelCommdity(index, commodityNum) {
    const { handleChangeCommdity, brandIndex, cartCommoditys } = this.props
    const { orderCommoditys } = this.state
    const commodityList = orderCommoditys.commodityList
    commodityList.splice(index, 1)
    this.setState({ orderCommoditys })
    cartCommoditys.brandList[brandIndex].commodityList = commodityList
    cartCommoditys.totalNum -= commodityNum
    handleChangeCommdity(cartCommoditys)
  }
  changeCartNum(index, changeNum) {
    const { handleChangeCommdity, brandIndex, cartCommoditys } = this.props
    const { orderCommoditys } = this.state
    const commodityList = orderCommoditys.commodityList
    commodityList[index].buyNum += changeNum
    this.setState({ orderCommoditys })
    cartCommoditys.brandList[brandIndex].commodityList = commodityList
    cartCommoditys.totalNum += changeNum
    handleChangeCommdity(cartCommoditys)
    // 改变总价
    this.setOrderCommoditys(commodityList)
  }
  handleClearInvalid() {
    const { handleChangeCommdity, brandIndex, cartCommoditys } = this.props
    const { orderCommoditys } = this.state
    let { commodityList } = orderCommoditys
    let changeNum = 0
    // 将当前商品列表中中所有canService为false的字段过滤掉
    commodityList = commodityList.filter(o => {
      if (o.currentPriceInfo.canService) return true
      changeNum += o.buyNum
      return false
    })
    this.setState({ orderCommoditys })
    if (commodityList.length === 0) {
      cartCommoditys.brandList.splice(brandIndex, 1)
    } else {
      cartCommoditys.brandList[brandIndex].commodityList = commodityList
    }
    cartCommoditys.totalNum -= changeNum
    handleChangeCommdity(cartCommoditys)
  }
  handleAlert() {
    Modal.alert('', '确认清空失效商品吗？', [
      { text: '取消', onPress: () => console.log('cancel'), style: 'default' },
      { text: '确定', onPress: this.handleClearInvalid },
    ])
  }

  render() {
    // isOrderPage：表示是不是订单页饮用的商家页标签
    const { data, isOrderPage = false } = this.props
    const { brandName, brandImg } = data
    const { orderCommoditys, isSelectBrand, canEdit } = this.state
    const { totalNum, totalPrice, commodityList } = orderCommoditys
    // showClear：是否显示清除按钮
    let showClear = false
    commodityList.forEach(o => {
      if (!o.currentPriceInfo.canService) {
        showClear = true
      }
    })
    console.log('totalPrice', totalPrice, commodityList)
    return (
      <li className='cart-brand-item'>
        <p className='cart-brand-item-title' style={ isOrderPage ? { paddingLeft: '.3rem' } : {} }>
          {
            !isOrderPage && isSelectBrand &&
            <Icon className='brand-select-icon' onClick={ () => this.handleBrandSelect(false) } type={ require('svg/shangcheng/selected.svg') } size='md' />
          }
          {
            !isOrderPage && !isSelectBrand &&
            <span onClick={ () => this.handleBrandSelect(true) } className='not-select-icon' />
          }
          {
            isOrderPage &&
            <img style={{ marginTop: '.21rem', float: 'left', width: '.34rem', height: '.34rem', marginRight: '.2rem' }} src={ brandImg } alt={ brandName } />
          }
          <span className='brand-name'>{ brandName }</span>
          {
            !isOrderPage &&
            <span className='brand-edit' onClick={ () => this.handleEditClick(canEdit) }>{ canEdit ? '完成' : '编辑' }</span>
          }
        </p>
        <ul className='cart-commodity-list'>
          {
            commodityList.map((o, i) => (
              <CartCommodityItem changeCartNum={ this.changeCartNum } isOrderPage={ isOrderPage } handleDelCommdity={ this.handleDelCommdity } canEdit={ canEdit } key={ o.currentPriceInfo.specificationId } data={ o } index={ i } handleCommoditySelect={ this.handleCommoditySelect } />
            ))
          }
        </ul>
        {
          showClear &&
          <p className='clear-commodies' onClick={ () => this.handleAlert() }>
            <Icon type={ require('svg/shangcheng/del_ad.svg') } size='md' />
            <span>清除失效商品</span>
          </p>
        }
        {
          !isOrderPage &&
          <PayFooter price={ totalPrice } num={ totalNum } handlePayClick={ this.handlePayClick } />
        }
      </li>
    )
  }
}
         
 
 
 
 shangcheng/components/cart/index.js 
 
import React from 'react'
import { Empty } from '@boluome/oto_saas_web_app_component'

import CartBrandItem from './cart-brand-item'

import '../../styles/cart/index.scss'

// statusChecked ：购物城中的商品状态是否检测过
const Cart = ({ cartCommoditys, handleChangeCommdity, statusChecked }) => {
  if (!cartCommoditys) return <div />
  // 因为考虑到CartBrandItem中，commodityList中使用的是constructor中第一次直接取出来放入orderCommoditys中，所以如果CartBrandItem更新orderCommoditys并不会更新，
  // 又因为cartCommoditys是全局app对象下的，所以第一次进入，肯定会有，所以必须用这个判断
  // 所以需要专门定义了一个字段: statusChecked，用于判断什么时候会更新完毕
  if (!statusChecked) return <div />
  const { totalNum, brandList } = cartCommoditys
  return (
    <div className='cart'>
      {
        totalNum === 0 &&
        <Empty imgUrl={ require('../../img/no_cart.png') } title='购物车竟然是空的' message='“再忙，也要记得买点什么犒赏自己～”' />
      }
      {
        totalNum !== 0 && brandList.length > 0 &&
        <ul className='cart-brand-list'>
          {
            brandList.map((o, i) => <CartBrandItem { ...{ cartCommoditys, handleChangeCommdity } } brandIndex={ i } data={ o } key={ o.brandId } />)
          }
        </ul>
      }
    </div>
  )
}

export default Cart
         
 
 
 
 shangcheng/components/common-component/activity-common.js 
 
import React from 'react'
import { browserHistory } from 'react-router'
import LazyLoad from 'react-lazyload'

import '../../styles/comment-component/activity-common.scss'

export const BuyStep = ({ sales, total }) => {
  // sales = 90
  // total = 100
  const salePercent = Math.ceil((sales / total) * 100)
  const width = `${ salePercent }%`
  let text = `已抢${ sales }件`
  if (salePercent >= 60) text = '即将售罄'
  if (sales === total) text = '已售罄'
  return (
    <div className='activity-common-buy-step'>
      <p style={{ width }}>
        <span />
      </p>
      {
        sales !== total &&
        <span>{ width }</span>
      }
      <span style={{ width }}>{ text }</span>
    </div>
  )
}

export const Price = ({ sellPrice, originalPrice, style1 = {}, style2 = {}, spanClassName = '' }) => {
  return (
    <p className='activity-common-price'>
      <span className={ spanClassName } style={ style1 }>¥</span>
      <span className={ spanClassName } style={ style2 }>{ sellPrice }</span>
      <del>{ `¥${ originalPrice }` }</del>
    </p>
  )
}

export const ActivityCommodityItem = ({ data, isTomorrow }) => {
  const { iconUrl, commodityName, commodityDescription, commodityId, sales, total, sellPrice, originalPrice, preferentialType, value } = data
  const discountTag = (preferentialType === 2 || preferentialType === 4 || preferentialType === 24) ? `${ value }折` : '直降'
  const isSaled = sales === total
  const discountHasPoint = (preferentialType === 2 || preferentialType === 4 || preferentialType === 24) && String(value).indexOf('.') >= 0
  return (
    <div className='activity-commodity-item'>
      <dl onClick={ () => !isSaled && !isTomorrow && browserHistory.push(`/shangcheng/commodity?commodityId=${ commodityId }`) }>
        <dt>
          <LazyLoad
            throttle={ 200 }
            placeholder={ <img style={{ height: '100%', width: '100%', border: '1px solid #f5f5f6' }} alt='' /> }
          >
            <img src={ `${ iconUrl }?image&action=resize:w_200,m_1` } alt={ commodityName } />
          </LazyLoad>
          {
            isSaled &&
            <p className='saled-icon' />
          }
        </dt>
        <dd>
          <h1>{ commodityName }</h1>
          <h2 className='line-2'>{ commodityDescription }</h2>
          {
            !isTomorrow &&
            <BuyStep { ...{ sales, total } } />
          }
          <div className='bottom'>
            <Price spanClassName={ isTomorrow ? 'green-active-font' : '' } style1={ isSaled ? { color: '#666' } : {} } style2={ isSaled ? { color: '#666' } : {} } { ...{ sellPrice, originalPrice } } />
            {
              !isTomorrow &&
              <p className={ isSaled ? 'activity-btn disable' : 'activity-btn' }>{ isSaled ? '抢光了' : '马上抢' }</p>
            }
          </div>
        </dd>
      </dl>
      {
        !isTomorrow &&
        <p className={ discountHasPoint ? 'discount-tag small' : 'discount-tag' }>{ discountTag }</p>
      }
    </div>
  )
}
         
 
 
 
 shangcheng/components/common-component/cart-commodity-item.js 
 
import React from 'react'
import { browserHistory } from 'react-router'
import { Icon, Toast } from 'antd-mobile'

import '../../styles/comment-component/cart-commodity-item.scss'

const CartCommodityItem = ({
  data, index, handleCommoditySelect, canEdit, handleDelCommdity, currentNum, isOrderPage,
  changeCartNum,
}) => {
  const { isSelectCommodity, banners, commodityName, commodityDescription, buyNum, checkNum, currentPriceInfo } = data
  const { sellPrice, originalPrice, inventory, canService, description } = currentPriceInfo
  const priceL = Number(sellPrice).toFixed(2).split('.')[0]
  const priceR = Number(sellPrice).toFixed(2).split('.')[1]
  if (!currentNum) currentNum = buyNum
  const noDo = true
  const handleToCommodity = () => browserHistory.push(`/shangcheng/commodity?commodityId=${ data.commodityId }`)
  return (
    <li className={ isOrderPage ? 'cart-commodity-item is-order-page' : 'cart-commodity-item' }>
      {
        !canService &&
        <p className='invalid-mask' onClick={ handleToCommodity } />
      }
      {
        !isOrderPage && isSelectCommodity && canService &&
        <Icon className='select-icon' onClick={ () => handleCommoditySelect(index, false) } type={ require('svg/shangcheng/selected.svg') } size='md' />
      }
      {
        !isOrderPage && !isSelectCommodity && canService &&
        <span onClick={ () => handleCommoditySelect(index, true) } className='not-select-icon' />
      }
      {
        !canService &&
        <span className='invalid-text'>失效</span>
      }
      <div className='cart-commodity-info' style={ isOrderPage ? { paddingLeft: '.3rem' } : {} }>
        <p className='cart-commodity-info-left'>
          <img src={ banners[0] } alt={ commodityName } onClick={ handleToCommodity } />
        </p>
        {
          canEdit &&
          <div className='cart-commodity-info-edit' onClick={ e => e.stopPropagation() }>
            <div className='cart-commodity-edit-left'>
              <p>
                <span onClick={ () => currentNum > 1 && changeCartNum(index, -1) }>-</span>
                <span>{ currentNum }</span>
                <span onClick={ () => {
                  if (currentNum >= inventory) {
                    Toast.info('已达到库存上限', 1)
                    if (currentNum > inventory) changeCartNum(index, inventory - currentNum)
                    return
                  }
                  if (checkNum && currentNum >= checkNum) {
                    Toast.info('已达到限购数量', 1)
                    if (checkNum && currentNum > checkNum) changeCartNum(index, checkNum - currentNum)
                    return
                  }
                  changeCartNum(index, 1)
                } }
                >+</span>
              </p>
              <p style={{ visibility: noDo ? 'hidden' : 'unset' }}>
                <span>没有使用接口返回的数据</span>
                <Icon className='arrow-icon' type='down' size='md' />
              </p>
            </div>
            <div className='cart-commodity-edit-right' onClick={ () => handleDelCommdity(index, buyNum) }>删除</div>
          </div>
        }
        {
          !canEdit &&
          <div className='cart-commodity-info-right' onClick={ () => !isOrderPage && browserHistory.push(`/shangcheng/commodity?commodityId=${ data.commodityId }`) }>
            <div className='cart-commodity-title'>
              <p className='line-2'>{ `${ commodityName } ${ commodityDescription }` }</p>
              {
                currentPriceInfo.specificationName && canService &&
                <p className='specification line-2'>{ `已选择 ${ currentPriceInfo.specificationName }` }</p>
              }
              {
                !canService &&
                <p className='specification'>{ description }</p>
              }
              {
                Boolean(!isOrderPage) && Boolean(checkNum) && Boolean(canService) &&
                <p className='limit-buyNum'>{ `限购${ checkNum }件` }</p>
              }
            </div>
            <p>
              ￥
              <span>{ priceL }</span>
              { `.${ priceR }` }
              <del>{ `￥${ originalPrice.toFixed(2) }` }</del>
              <span>{ `x${ buyNum }` }</span>
            </p>
          </div>
        }
      </div>
    </li>
  )
}

export default CartCommodityItem
         
 
 
 
 shangcheng/components/common-component/commodity-item.js 
 
import React from 'react'
import { browserHistory } from 'react-router'
import { Icon } from 'antd-mobile'

import '../../styles/comment-component/commodity-item.scss'

const CommodityItem = ({ data, onClick, showCart = false, handleAddCommodity, isDaojia }) => {
  const { banners, commodityName, commodityDescription, sellPrice, maxSellPrice, originalPrice, purchasesCount, goodComment, industryCode, serviceId, isCanService, unitName } = data
  return (
    <li className='commodity-item' onClick={ () => {
      if (onClick) {
        onClick(data)
        return
      }
      if (!isDaojia) browserHistory.push(`/shangcheng/commodity?commodityId=${ data.commodityId }`)
      if (isDaojia) {
        location.href = `${ location.origin }/daojia/${ industryCode }/detail?serviceId=${ serviceId }&supportThisCity=${ isCanService }`
      }
    } }
    >
      <div className='commodity-item-left'>
        <img src={ banners[0] } alt={ commodityName } />
      </div>
      <div className='commodity-item-right'>
        <p className='commodity-item-top line-2'>{ `${ commodityName } ${ commodityDescription }` }</p>
        <p className='commodity-item-bottom'>
          {
            maxSellPrice ?
              <span className='commodity-item-price'>
                ¥
                <span>{ sellPrice }</span>
                &nbsp;~ ¥
                <span>{ maxSellPrice }</span>
                { unitName ? `/${ unitName }` : '' }
              </span> :
              <span className='commodity-item-price'>
                ¥
                <span>{ sellPrice }</span>
                { unitName ? `/${ unitName }` : '' }
              </span>
          }
          {
            Boolean(originalPrice) &&
            <del className='commodity-item-original-price'>{ ` ¥${ originalPrice }` }</del>
          }
          <span className='commodity-item-purchases-count'>{ `${ purchasesCount }人付款` }</span>
          {
            Boolean(showCart) &&
            <Icon className='commodity-item-cart-icon' type={ require('svg/shangcheng/cart_theme.svg') } size='md' onClick={ e => { e.stopPropagation(); handleAddCommodity(data) } } />
          }
          {
            isDaojia && Boolean(goodComment) &&
            <span className='commodity-item-purchases-count'>{ `好评数：${ goodComment }` }</span>
          }
        </p>
      </div>
    </li>
  )
}

export default CommodityItem


// class ChangeCommodityCount extends Component {
//   constructor(props) {
//     super(props)
//     this.state = {
//       count: 1,
//     }
//   }
//   componentWillReceiveProps(nextProps) {
//     const { count } = nextProps
//     const preCount = this.state.count
//     if (count !== preCount) this.setState({ count })
//   }
//   handleAddClick(count) {
//     const { handleChangeCount } = this.props
//     count++
//     handleChangeCount(count)
//   }
//   handleSubClick(count) {
//     const { handleChangeCount } = this.props
//     count--
//     handleChangeCount(count)
//   }
//   render() {
//     const { count } = this.state
//     const { maxQuantity, minQuantity } = this.props
//     return (
//       <div className='change-commodity-count commodity-count'>
//         <Icon onClick={ count <= minQuantity ? '' : () => this.handleSubClick(count) } type={ count <= minQuantity ? require('svg/daojia/sub_disable.svg') : require('svg/daojia/sub.svg') } size='md' />
//         <span>&nbsp;{ count }&nbsp;</span>
//         <Icon onClick={ count >= maxQuantity ? '' : () => this.handleAddClick(count) } type={ count >= maxQuantity ? require('svg/daojia/add_disable.svg') : require('svg/daojia/add.svg') } size='md' />
//       </div>
//     )
//   }
// }
         
 
 
 
 shangcheng/components/common-component/commodity-list.js 
 
import React from 'react'
import { Empty } from '@boluome/oto_saas_web_app_component'
import { Icon } from 'antd-mobile'
import { splitEvery } from 'ramda'

import CommodityItem from './commodity-item'
import IndexSearch from './index-search'
import Sc2Commodity from './sc-2-commodity'

import '../../styles/comment-component/commodity-list.scss'

export default class CommodityList extends React.Component {
  constructor(props) {
    super(props)
    console.log(props)
  }
  render() {
    const {
      handleChangeCommodityList, commodityList,
      filters, currentFilter = { name: '销量', code: 'sales' },
      commodityListParas,
      handleChangeMode, isBrand,
    } = this.props
    let {
      model,
    } = this.props

    if (!commodityList) return <div />
    if (model === undefined) {
      if (isBrand) {
        model = 'double'
      } else {
        model = 'single'
      }
    }
    return (
      <div className='commodity-list-container'>
        {
          !isBrand &&
          <IndexSearch />
        }
        <div className={ isBrand ? 'commodity-list-container-bottom commodity-list-brand' : 'commodity-list-container-bottom' }>
          <div className='commodity-list-header'>
            <ul className='filter-list'>
              {
                filters.map(o => (
                  <li style={ isBrand ? { justifyContent: 'center' } : {} } key={ o.name } className={ o.name === currentFilter.name ? 'active' : '' }>
                    <span onClick={ () => {
                      if (currentFilter.name === '价格' && currentFilter.name === o.name) {
                        handleChangeCommodityList(currentFilter, commodityListParas)
                        return
                      }
                      if (currentFilter.name !== o.name) {
                        handleChangeCommodityList(o, commodityListParas)
                      }
                    } }
                    >
                      { o.name }
                    </span>
                    {
                      o.name === '价格' &&
                      <Icon className={ currentFilter.code === 'priceASC' ? 'rotate180' : '' } type={ currentFilter.name === '价格' ? require('svg/shangcheng/sort_a.svg') : require('svg/shangcheng/sort.svg') } size='md' />
                    }
                    <p className='bottom-line' />
                  </li>
                ))
              }
            </ul>
            {
              !isBrand &&
              <Icon
                className='commodity-list-search'
                type={ model === 'double' ? require('svg/shangcheng/double-list.svg') : require('svg/shangcheng/single-list.svg') }
                size='md'
                onClick={ () => handleChangeMode(model === 'double' ? 'single' : 'double') }
              />
            }
          </div>
          <ul className='commodity-list'>
            {
              commodityList.length === 0 &&
              <Empty imgUrl={ require('../../img/no-commodities.png') } message='暂无商品' style={{ height: 'calc(100% - 2.02rem)', background: 'none' }} />
            }
            {
              model === 'single' &&
              commodityList.map(o => (
                <CommodityItem data={ o } key={ o.commodityId } />
              ))
            }
            {
             model === 'double' && commodityList.length > 0 &&
              splitEvery(2)(commodityList).map((o, i) => (
                <Sc2Commodity commodities={ o } index={ i } key={ o[0].commodityId } />
              ))
            }
          </ul>
        </div>
      </div>
    )
  }
}
         
 
 
 
 shangcheng/components/common-component/countdown.js 
 
/*
  参数：
    1，endTime ：传入一个结束时间的时间戳，返回距现在的 天数-时数-分数-秒数
    2，timeHeader： 返回时间前面的文案， 非必传
    3，timeAfter： 返回时间后面的文案， 非必传
    4，delDay： 不需要返回天数， 非必传
    5,justData: 仅使用时间，不夹杂任何数据的组件， 非必传
  返回值：
    xx天xx时xx分xx秒
*/

import React from 'react'

export default class CountDown extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      day:  '',
      hour: '',
      min:  '',
      s:    '',
    }
    this.calculatinTime = this.calculatinTime.bind(this)
  }
  componentWillMount() {
    const { endTime } = this.props
    this.countdown = setInterval(() => this.calculatinTime(endTime), 1000)
  }
  calculatinTime(endTime) {
    // 将一位数字前面自动加0
    const normalTime = dd => (String(dd).length === 1 ? `0${ dd }` : dd)

    const times = parseInt((endTime - (new Date()).getTime()) / 1000, 10)
    const s = normalTime(times % 60)
    const min = normalTime(parseInt(times / 60, 10) % 60)
    const hour = normalTime(parseInt(times / 60 / 60, 10) % 24)
    const day = parseInt(times / 60 / 60 / 24, 10)
    this.setState({ day, hour, min, s })
    // return `${ day }-${ hour }-${ min }-${ s }`
  }
  componentWillUnmount() {
    clearInterval(this.countdown)
  }
  render() {
    const { day, hour, min, s } = this.state
    const { timeHeader = '', timeAfter = '', delDay = false, justData = false } = this.props
    if (!day && !hour && !min && !s) return <span />
    const { className } = this.props

    // 如果倒计时已结束
    if (delDay && hour < 0) {
      return <span className={ className }>已结束</span>
    }

    // 如果是仅使用时间的模式
    if (justData) {
      return (
        <p className={ className }>
          {
            !delDay &&
            <span>{ day }</span>
          }
          <span>{ hour }</span>
          <span>{ min }</span>
          <span>{ s }</span>
        </p>
      )
    }
    return (
      <span className={ className }>{ delDay ? `${ timeHeader }${ hour }时${ min }分${ s }秒${ timeAfter }` : `${ timeHeader }${ day }天${ hour }时${ min }分${ s }秒${ timeAfter }` }</span>
    )
  }
}
         
 
 
 
 shangcheng/components/common-component/evaluate-item.js 
 
import React from 'react'
import { moment } from '@boluome/common-lib'
import { NewEvaluation } from '@boluome/oto_saas_web_app_component'
import { Grid, Icon } from 'antd-mobile'

import '../../styles/comment-component/evaluate-item.scss'

const EvaluateItem = ({ data }) => {
  const { userId, createdAt, imgs, score, userComment, replys, specificationName } = data
  return (
    <div className='evaluate-item'>
      <ul className='evaluate-header'>
        <li className='evaluate-item-info'>
          <p className='user-icon' />
          <span>{ userId }</span>
          <NewEvaluation defaultValue={ score } width={ '1.85rem' } />
        </li>
        <li className='evaluate-time'>
          { moment('YYYY-MM-DD HH:mm')(createdAt) } &nbsp;&nbsp;{ specificationName ? `规格：${ specificationName }` : '' }
        </li>
        <li className='evaluate-content'>
          <p className='text'>{ userComment }</p>
          <Grid
            data={ imgs }
            columnNum={ 3 }
            renderItem={ (dataItem, index) => (
              <div style={ index % 3 !== 2 ? { paddingRight: '.12rem', marginBottom: '.2rem' } : { marginBottom: '.2rem' } }>
                <img src={ dataItem } style={{ width: '100%', height: '100%' }} alt='icon' />
              </div>)
            }
          />
        </li>
      </ul>
      <div className='evaluate-reply'>
        {
          replys && replys.length > 0 &&
          replys.map(item => <p key={ item.value }><Icon type={ require('svg/daojia/message.svg') } size='md' />{ `${ item.key }：${ item.value }` }</p>)
        }
      </div>
    </div>
  )
}

export default EvaluateItem

// <li className='evaluate-address'>{ `来自于：${ address }` }</li>
         
 
 
 
 shangcheng/components/common-component/express-info.js 
 
import React from 'react'

import '../../styles/comment-component/express-info.scss'

import { getExpressList } from '../../actions/refund/refund-info'

export default class ExpressInfo extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      expressInfo: '',
    }
    this.getList = this.getList.bind(this)
  }
  componentWillMount() {
    const { orderId } = this.props
    getExpressList(orderId, this.getList)
  }
  getList(expressInfo) {
    this.setState({ expressInfo })
  }
  render() {
    let { expressInfo } = this.state
    if (!expressInfo) expressInfo = [1, 2, 3, 4, 5].map(o => ({ time: '时间1285451', context: `内容啊阿贾克斯队话费卡绝世说地方${ o }` }))
    return (
      <div className='express-info'>
        <div className='header'>
          <p>
            <img src='' alt='商品图片' />
            <span>待正式下单</span>
          </p>
          <p>
            <span>承运来源：待正式下单</span>
            <span>预计送达：待正式下单</span>
            <span>联系电话：待正式下单</span>
          </p>
        </div>
        <ul className='express-info-list'>
          {
            expressInfo.map((o, i) => {
              return (
                <li key={ o.context } className={ i === 0 ? 'active' : '' }>
                  <p>
                    <span className='active'><span /></span>
                    <span className='unActive' />
                  </p>
                  <p>
                    <span>{ o.context }</span>
                    <span>{ o.time }</span>
                  </p>
                </li>
              )
            })
          }
        </ul>
      </div>
    )
  }
}
         
 
 
 
 shangcheng/components/common-component/index-search/default-bottom.js 
 
import React, { Component } from 'react'
import { getStore, removeStore, setStore } from '@boluome/common-lib'
import { Icon } from 'antd-mobile'

export default class DefaultBottom extends Component {
  constructor(props) {
    super(props)
    const channel = getStore('channel', 'session')
    const { searchHistorys } = props
    this.state = {
      channel,
      searchHistorys,
    }
  }
  handleCrossClick(e, item, index) {
    e.stopPropagation()
    const { searchHistorys } = this.state
    const { categoryLevel } = this.props
    searchHistorys.splice(index, 1)
    this.setState({ searchHistorys })
    setStore(`search_sc_${ categoryLevel }`, searchHistorys)
  }
  handleClearHistoryClick() {
    const { categoryLevel } = this.props
    this.setState({ searchHistorys: [] })
    removeStore(`search_sc_${ categoryLevel }`)
  }
  render() {
    const { handleHistoryClick } = this.props
    const { searchHistorys } = this.state
    if (!searchHistorys || searchHistorys.length === 0) {
      return <div />
    }
    return (
      <div className='search-history'>
        <div className='search-title'>搜索记录</div>
        <ul className='search-container'>
          {
            searchHistorys.map((item, index) => <li className='search-item' onClick={ () => handleHistoryClick(item) } key={ item }>{ item }<Icon onClick={ e => this.handleCrossClick(e, item, index) } type='cross' size='md' color='#999' /></li>)
          }
        </ul>
        <div className='search-footer' onClick={ () => this.handleClearHistoryClick() }>
          <Icon type={ require('svg/daojia/del.svg') } size='xs' />
          <span>清除搜索记录</span>
        </div>
      </div>
    )
  }
}
         
 
 
 
 shangcheng/components/common-component/index-search/index.js 
 
/*
  props:
    showCart: 是否显示右侧购物车
    cartNum:  当前购物车中商品总数量
    categoryLevel:  关键字搜索级别
    handleChangeProvince: 改变省份后的回调，传入则显示省份模块
    specialtyProvince:    省份数据
    fixed:    固定模式，并不会因为失焦而隐藏，并且取消是一直存在，无失焦之分
    defaultRightComponent: 非搜索状态下，默认的右侧组件，
*/

import React, { Component } from 'react'
import { getStore, setStore } from '@boluome/common-lib'
import { Empty, Loading } from '@boluome/oto_saas_web_app_component'
import { Toast, Icon } from 'antd-mobile'
import { get } from '../../../actions/ajax'

import DefaultBottom from './/default-bottom'
import SearchResultBottom from './/search-result-bottom'

import '../../../styles/comment-component/index-search.scss'

export default class IndexSearch extends Component {
  constructor(props) {
    super(props)
    const { cartNum = 0, categoryLevel = 0 } = this.props
    const searchHistorys = getStore(`search_sc_${ categoryLevel }`) ? getStore(`search_sc_${ categoryLevel }`) : []
    this.state = {
      searchValue:    '',
      searchStatus:   false,
      changeCartNum:  false,
      showProvince:   false,
      currentProvice: { name: '全国', id: 0 },
      cartNum,
      searchHistorys,
    }
    this.handleHistoryClick = this.handleHistoryClick.bind(this)
    this.handleSearch = this.handleSearch.bind(this)
    this.handleSearchStatus = this.handleSearchStatus.bind(this)
    this.handleChangeProvinceMid = this.handleChangeProvinceMid.bind(this)
    this.handleProviceContainerClick = this.handleProviceContainerClick.bind(this)
  }
  componentWillReceiveProps(nextProps) {
    const { cartNum } = nextProps
    const preCartNum = this.state.cartNum
    if (cartNum !== preCartNum) {
      this.setState({ cartNum, changeCartNum: true })
      setTimeout(() => {
        this.setState({ changeCartNum: false })
      }, 100)
    }
  }
  inputChange(searchValue) {
    searchValue = searchValue.target.value
    this.setState({ searchValue })

    // 当500s内第二次触发了input的onchange事件，则取消上一个搜索的定时器，重新设定一个
    clearTimeout(this.timer)
    this.timer = setTimeout(() => this.handleSearch(searchValue), 500)
  }
  handleSearch(param) {
    // 如果搜索关键字为空，则取消搜索结果
    if (param === '') {
      this.setState({ searchResult: '' })
      return
    }
    const closeLoading = Loading()
    const selectedCity = getStore('selectedCity', 'session')
    const { categoryLevel = 0, brandId } = this.props
    let { searchHistorys } = this.state
    const paras = {
      param,
      limit:  1,
      offset: 20,
      categoryLevel,
      ...selectedCity,
    }
    if (categoryLevel === -1) paras.brandId = brandId
    paras.mapType = 'gaode'
    get('/mall/v1/resources', paras).then(({ code, data, message }) => {
      if (code === 0) {
        this.setState({ searchResult: data })
        searchHistorys = searchHistorys.filter(i => i !== param)
        searchHistorys.unshift(param)
        setStore(`search_sc_${ categoryLevel }`, searchHistorys)
        this.setState({ searchHistorys })
      } else {
        Toast.fail(message)
      }
      closeLoading()
    })
  }
  handleHistoryClick(searchValue) {
    this.handleSearch(searchValue)
    this.setState({ searchValue })
  }
  handleSearchStatus(searchStatus) {
    this.setState({ searchStatus })
  }
  handleProviceContainerClick(showProvince) {
    this.setState({ showProvince })
  }
  handleChangeProvinceMid(currentProvice) {
    const { handleChangeProvince } = this.props
    handleChangeProvince(currentProvice.id)
    this.setState({ currentProvice, showProvince: false })
  }
  handleBlur(searchValue) {
    // 如果搜索关键字为空，则取消搜索结果
    if (searchValue === '') this.setState({ searchResult: '' })
  }
  handleCancelClick() {
    const { handleContainerClose } = this.props
    this.setState({ searchValue: '', searchResult: '' })
    if (handleContainerClose) handleContainerClose()
  }

  render() {
    // searchResult: 是否是搜索状态
    const { searchValue, searchStatus, searchResult, cartNum, changeCartNum, currentProvice, showProvince, searchHistorys } = this.state
    const { handleChangeMenu, specialtyProvince, handleChangeProvince, defaultRightComponent, categoryLevel = 0, placeholder = '请输入搜索内容' } = this.props
    let { showCart, fixed } = this.props
    showCart = Boolean(showCart)
    fixed = Boolean(fixed)
    return (
      <div className='index-search'>
        <div className='index-search-header'>
          {
            handleChangeProvince && !searchStatus &&
            <div className='select-provice' onClick={ () => this.handleProviceContainerClick(!showProvince) }>
              <span>{ currentProvice.name }</span>
              <Icon type='down' size='xs' />
            </div>
          }
          <div className='search-main'>
            <input
              onFocus={ () => this.handleSearchStatus(true) }
              onBlur={ () => this.handleBlur(searchValue) }
              value={ searchValue }
              placeholder={ placeholder }
              onChange={ value => this.inputChange(value) }
              type='text'
              ref={ node => this.sIpt = node }
            />
          </div>
          {
            showCart && !searchStatus &&
            <div className={ changeCartNum ? 'cart-container enlarge' : 'cart-container' } onClick={ handleChangeMenu ? () => handleChangeMenu('cart') : '' }>
              <Icon type={ require('svg/shangcheng/cart.svg') } size='md' />
              {
                Boolean(cartNum) &&
                <span className='sc-badge-icon'>{ cartNum > 99 ? '99+' : cartNum }</span>
              }
            </div>
          }
          {
            (searchStatus || fixed) &&
            <Cancel handleSearchStatus={ this.handleSearchStatus } handleCancelClick={ () => this.handleCancelClick() } />
          }
          {
            !searchStatus && defaultRightComponent &&
            <div className='default-right-component'>{ React.cloneElement(defaultRightComponent, { ...this.props }) }</div>
          }
        </div>
        <div className='index-search-bottom' style={{ opacity: (searchStatus || fixed) ? '1' : '0', zIndex: (searchStatus || fixed) ? '3' : '-1' }}>
          {
            !searchResult &&
            <DefaultBottom { ...{ handleHistoryClick: this.handleHistoryClick, searchHistorys, categoryLevel } } />
          }
          {
            searchResult && (!searchResult.brands || (searchResult.brands.length === 0 && searchResult.commoditys.length === 0)) &&
            <Empty message='无相关结果' imgUrl={ require('../../../img/no_commodity.png') } style={{ background: '#f5f5f6', height: 'calc(100% - 1rem)' }} />
          }
          {
            searchResult && searchResult.brands && (searchResult.brands.length !== 0 || searchResult.commoditys.length !== 0) &&
            <SearchResultBottom { ...{ searchResult } } />
          }
        </div>
        {
          showProvince && !searchResult &&
          <ProvinceList { ...{ currentProvice, specialtyProvince, handleChangeProvince: this.handleChangeProvinceMid, handleCloseProvice: this.handleProviceContainerClick } } />
        }
      </div>
    )
  }
}

const Cancel = ({ handleSearchStatus, handleCancelClick }) => (<span onClick={ () => { handleCancelClick(); handleSearchStatus(false) } } style={{ fontSize: '0.28rem', color: '#ffab00', display: 'inline-block', paddingLeft: '.3rem' }}>取消</span>)

const ProvinceList = ({ currentProvice, specialtyProvince, handleChangeProvince, handleCloseProvice }) => {
  return (
    <div className='provice-popup' onTouchMove={ e => e.preventDefault() } onClick={ () => handleCloseProvice(false) }>
      <p className='provice-title' onClick={ e => e.stopPropagation() }>特产地区</p>
      <ul className='provice-list' onClick={ e => e.stopPropagation() }>
        {
          specialtyProvince.map(o => (
            <li key={ o.id } className={ o.name === currentProvice.name ? 'provice-item active' : 'provice-item' }>
              <p className='line-1' onClick={ () => handleChangeProvince(o) }>{ o.name }</p>
            </li>
          ))
        }
      </ul>
    </div>
  )
}
         
 
 
 
 shangcheng/components/common-component/index-search/search-result-bottom.js 
 
import React, { Component } from 'react'
import { browserHistory } from 'react-router'
import { Mask } from '@boluome/oto_saas_web_app_component'
import { Grid } from 'antd-mobile'

import CommodityItem from '../../common-component/commodity-item'

export default class SearchResultBottom extends Component {
  constructor(props) {
    super(props)
    const { searchResult } = props
    let { brands } = searchResult
    brands = brands.map(item => ({ icon: item.brandLogo, text: item.brandName, brandId: item.brandId, brandType: item.brandType }))
    let filterBrands = []
    if (brands.length >= 8) {
      filterBrands = brands.splice(0, 7)
      filterBrands.push({ icon: require('svg/shangcheng/all.svg'), text: '查看全部', brandId: 'all' })
    }
    this.state = {
      currentBrands: filterBrands.length === 0 ? brands : filterBrands,
      brands,
    }
    this.handleCommodityClick = this.handleCommodityClick.bind(this)
  }
  handleBusinessClick(brandData) {
    if (brandData.brandId === 'all') {
      const { brands } = this.state
      this.setState({ currentBrands: brands })
    } else {
      const { brandId, brandType, brandCode } = brandData
      Mask.closeAll()
      if (brandType === 0) location.href = `${ location.origin }/daojia/${ brandCode }/business?brandId=${ brandId }`
      if (brandType === 1) browserHistory.push(`/shangcheng/${ brandId }`)
    }
  }
  handleCommodityClick(res) {
    const { commodityId, brandType, industryCode, isCanService } = res
    Mask.closeAll()
    if (brandType === 0) location.href = `${ location.origin }/daojia/${ industryCode }/detail?serviceId=${ commodityId }&supportThisCity=${ isCanService }`
    if (brandType === 1) browserHistory.push(`/shangcheng/commodity?commodityId=${ commodityId }`)
  }
  render() {
    const { searchResult } = this.props
    const { commoditys } = searchResult
    const { currentBrands } = this.state
    return (
      <div className='search-result'>
        {
          currentBrands.length > 0 &&
          <p className='title'>店铺</p>
        }
        {
          currentBrands.length > 0 &&
          <Grid data={ currentBrands } onClick={ r => this.handleBusinessClick(r) } />
        }
        {
          commoditys.length > 0 &&
          <p className='title'>商品</p>
        }
        {
          commoditys.length > 0 &&
          commoditys.map(item => <CommodityItem key={ item.commodityId } { ...{ data: item, onClick: this.handleCommodityClick, isDaojia: true } } />)
        }
      </div>
    )
  }
}
         
 
 
 
 shangcheng/components/common-component/pay-footer.js 
 
import React from 'react'
import { merge } from 'ramda'

const PayFooter = ({ price, num, handlePayClick }) => {
  const pStyle = {
    fontSize:    '.28rem',
    lineHeight:  '.98rem',
    color:       '#333',
    paddingLeft: '.30rem',
    background:  '#fff',
    width:       '100%',
    borderTop:   '1px solid #e5e5e5',
    boxSizing:   'border-box',
  }
  const span1 = {
    color: '#ff4848',
  }
  const span2 = {
    color:    '#ff4848',
    fontSize: '.36rem',
  }
  let span3 = {
    float:     'right',
    width:     '2.6rem',
    height:    '1rem',
    color:     '#fff',
    textAlign: 'center',
    fontSize:  '.34rem',
  }
  if (price) {
    span3 = merge(span3)({ background: '#ffab00' })
  } else {
    span3 = merge(span3)({ background: '#ccc' })
  }
  if (price === 0 || price === '0') price = '0.00'
  return (
    <p className='pay-footer' style={ pStyle }>
      合计：
      <span style={ span1 }>¥</span>
      <span style={ span2 }>{ price.split('.')[0] }</span>
      <span style={ span1 }>.{ price.split('.')[1] }</span>
      <span style={ span3 } onClick={ handlePayClick }>{ `结算(${ num })` }</span>
    </p>
  )
}

export default PayFooter
         
 
 
 
 shangcheng/components/common-component/picture-upload/image-list-mask.js 
 
import React from 'react'
import { Carousel, Icon } from 'antd-mobile'

import './style/image-list-mask.scss'

export default class ImageListMask extends React.Component {
  constructor(props) {
    super(props)
    let { defaultIndex } = props
    const { imgs } = props
    // isDel: 当前是删除操作
    this.state = {
      index: ++defaultIndex,
      isDel: false,
      imgs,
    }
  }
  handleImgCarouseChange(index) {
    const { isDel } = this.state
    if (isDel) {
      this.setState({ isDel: false })
      return
    }
    this.setState({ index })
  }
  handleIconClick(index, imgs) {
    const { handleIconClick, handleContainerClose } = this.props
    index--
    imgs.splice(index, 1)
    if (index < 1) index = 1
    this.setState({ imgs, index, isDel: true })
    if (imgs.length === 0) handleContainerClose()
    handleIconClick(imgs)
  }
  render() {
    const { index, imgs } = this.state
    return (
      <div className='image-list' onClick={ e => e.preventDefault() }>
        <p className='icon-container'><Icon onClick={ () => this.handleIconClick(index, imgs) } type={ require('svg/shangcheng/del.svg') } size='md' /></p>
        <Carousel className='img-list-carousel' selectedIndex={ index - 1 } afterChange={ a => this.handleImgCarouseChange(a + 1) }>
          {
            imgs.map(o => <div key={ o.url }><img src={ o.url } alt='img_update' /></div>)
          }
        </Carousel>
        <p className='page-index'>{ `${ index } / ${ imgs.length }` }</p>
      </div>
    )
  }
}
         
 
 
 
 shangcheng/components/common-component/picture-upload/index.js 
 
/*
  使用说明：
    1，handleChangeImg：Function(newImgs){}，当图片内容改变时，将改变后的图片对象返回出去
    2，imgs：Array，当前选中的图片列表
    3，imgsLength：Number，非必传默认九图，上传图片的最大数量（现支持3，6，9图）
    (注：1，2返回的图片列表，都是上传后返回的服务器中的图片地址)
*/

import React from 'react'
import { getStore } from '@boluome/common-lib'
import { Mask, Loading } from '@boluome/oto_saas_web_app_component'
import { ImagePicker, Toast } from 'antd-mobile'

import ImageListMask from './image-list-mask'

import './style/index.scss'

export default class PicSelect extends React.Component {
  constructor(props) {
    super(props)
    const { imgs } = props
    this.state = {
      imgs,
    }
    this.imgUpload = this.imgUpload.bind(this)
    this.createCanvas = this.createCanvas.bind(this)
    this.canvertToBinary = this.canvertToBinary.bind(this)
  }
  componentWillUnmount() {
    if (this.closeMask) this.closeMask()
  }

  // 判断大小
  handleChangeImg(v, o, i, imgs) {
    const { handleChangeImg } = this.props
    if (o === 'add') {
      const file = v[v.length ? v.length - 1 : 0].file
      const fileType = file.type
      const fileReader = new FileReader()
      fileReader.readAsDataURL(file)
      fileReader.onload = event => {
        const result = event.target.result  // 返回的dataURL
        const img = new Image()
        img.src = result
        const max = 1024 * 1024 // Math.pow(1024, 2)
        if (file.size / max < 8) {
          img.onload = () => {
            const base64 = this.createCanvas(img, fileType)
            const a = this.canvertToBinary(base64)
            this.imgUpload(a, imgs)
          }
        } else {
          Toast.info('图片不能超过8MB !', 2, null, false)
        }
      }
    } else if (o === 'remove') {
      imgs.splice(i, 1)
      const { onChangeimg } = this.props
      if (onChangeimg) { onChangeimg(imgs) }
      handleChangeImg(imgs)
    }
  }
  // 图片处理
  createCanvas(img, fileType) {
    const canvas = document.createElement('canvas')
    const ctx = canvas.getContext('2d')
    const quality = 0.7  // 默认图片质量为0.7
    const width = img.width * 1
    const height = img.height * 1

    canvas.width = width
    canvas.height = height

    ctx.fillStyle = '#fff'
    ctx.fillRect(0, 0, canvas.width, canvas.height)
    ctx.drawImage(img, 0, 0, width, height)

    // 压缩--quality值越小，所绘制出的图像越模糊
    const base64data = canvas.toDataURL(fileType, quality)
    return base64data
  }
  // 对base64 进行处理
  canvertToBinary(dataURI) {
    const byteString = window.atob(dataURI.split(',')[1])
    const ab = new ArrayBuffer(byteString.length)
    const ia = new Uint8Array(ab)
    for (let i = 0; i < byteString.length; i++) {
      ia[i] = byteString.charCodeAt(i)
    }
    const bb = new window.Blob([ab], { type: 'image/png' })
    return bb
  }
  imgUpload(imgUrl, imgs) {
    const closeLoading = Loading()
    const { handleChangeImg } = this.props
    const userid = getStore('customerUserId', 'session')
    const token = getStore('accessToken', 'session')
    const appcode = getStore('customerCode', 'session')
    const headers = {
      appcode,
      userid,
      token,
    }
    fetch('https://upload.otosaas.com/new', { body: imgUrl, method: 'post', headers })
    .then(response => response.json())
    .then(json => {
      const { code, data } = json
      if (code === 0) {
        Toast.info('上传成功 !', 2, null, false)
        imgs.push({ url: `https://f2.otosaas.com/${ data.md5 }` })
        handleChangeImg(imgs)
      } else {
        Toast.info('图片上传失败 !', 2, null, false)
      }
      closeLoading()
    })
    .catch(error => {
      console.log('request failed: ', error)
      closeLoading()
    })
  }
  onImageClick(defaultIndex) {
    const { handleChangeImg, imgs } = this.props
    this.closeMask = Mask(<ImageListMask { ...{ defaultIndex, imgs, handleIconClick: handleChangeImg } } />)
  }

  render() {
    const { imgs, imgsLength = 9 } = this.props
    console.log('imgs', imgs)
    return (
      <div className='pic-img-container'>
        {
          imgs.length >= 0 && imgsLength >= 3 &&
          <ImagePicker
            files={ imgs.slice(0, 3) }
            onChange={ (changeFiles, type, index) => this.handleChangeImg(changeFiles, type, index, imgs) }
            onImageClick={ index => this.onImageClick(index) }
          />
        }
        {
          imgs.length >= 3 && imgsLength >= 6 &&
          <ImagePicker
            files={ imgs.slice(3, 6) }
            onChange={ (changeFiles, type, index) => this.handleChangeImg(changeFiles, type, index + 3, imgs) }
            onImageClick={ index => this.onImageClick(index + 3) }
          />
        }
        {
          imgs.length >= 6 && imgsLength >= 9 &&
          <ImagePicker
            files={ imgs.slice(6, 9) }
            onChange={ (changeFiles, type, index) => this.handleChangeImg(changeFiles, type, index + 6, imgs) }
            onImageClick={ index => this.onImageClick(index + 6) }
          />
        }
      </div>
    )
  }
}
         
 
 
 
 shangcheng/components/common-component/picture-upload/style/common.scss 
 
@mixin s_middle{
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    -ms-transform:translateY(-50%);     /* IE 9 */
    -moz-transform:translateY(-50%);    /* Firefox */
    -webkit-transform:translateY(-50%); /* Safari 和 Chrome */
    -o-transform:translateY(-50%);
}
@mixin s_allCenter{
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translateX(-50%) translateY(-50%);
    -ms-transform:translateX(-50%) translateY(-50%);     /* IE 9 */
    -moz-transform:translateX(-50%) translateY(-50%);    /* Firefox */
    -webkit-transform:translateX(-50%) translateY(-50%); /* Safari 和 Chrome */
    -o-transform:translateX(-50%) translateY(-50%);
}

/*块元素模版，参数对应：$w对应宽，$h对应高，*/
@mixin s_blockDemo ($w, $h) {
    width: $w;
    height: $h;
}

@mixin s_fontDemo ($size, $l, $clr) {
    font-size: $size;
    line-height: $l;
    color: $clr;
}

/* img的容器*/
@mixin sc_img_container($w, $h) {
  @include s_blockDemo($w, $h);
  position: relative;
  overflow: hidden;
  img {
    height: 100%;
    @include s_allCenter;
  }
}
         
 
 
 
 shangcheng/components/common-component/picture-upload/style/image-list-mask.scss 
 
@import "./common.scss";

// image-mask中的样式
.image-list {
  background: #fff;
  @include s_middle;
  width: 100%;
  z-index: 2;
  .icon-container {
    height: 75px;
    position: relative;
    .am-icon {
      @include s_middle;
      right: 30px;
    }
  }
  .page-index {
    @include s_fontDemo(28px, 75px, #666);
    text-align: center;
  }
  .img-list-carousel {
    .slider-list {
      height: 750px !important;
      div {
        @include sc_img_container(100%, 750px);
      }
    }
    .slider-decorator-0 {
      display: none;
    }
  }
}
         
 
 
 
 shangcheng/components/common-component/picture-upload/style/index.scss 
 

.pic-img-container {
  .am-image-picker-list .am-flexbox {
    .am-flexbox-item:nth-of-type(4) {
      display: none;
    }
  }
}
         
 
 
 
 shangcheng/components/common-component/sc-2-commodity-old.js 
 
import React from 'react'
import { browserHistory } from 'react-router'

import '../../styles/main/sc-2-commodity.scss'

const Sc2Commodity = ({ commodity, index }) => {
  const { banners, commodityName, commodityDescription, sellPrice, purchasesCount, commodityId } = commodity
  return (
    <li onClick={ () => browserHistory.push(`/shangcheng/commodity?commodityId=${ commodityId }`) } className='sc-2-commodity' style={ index % 2 === 0 ? { paddingRight: '5px' } : { paddingLeft: '5px' } }>
      <div className='sc-2-commodity-container'>
        <p><img src={ banners[0] } alt='commodity_data' /></p>
        <p>{ `${ commodityName } ${ commodityDescription }` }</p>
        <p>
          <span>￥</span>
          <span>{ sellPrice }</span>
          <span>{ `${ purchasesCount }人付款` }</span>
        </p>
      </div>
    </li>
  )
}

export default Sc2Commodity
         
 
 
 
 shangcheng/components/common-component/sc-2-commodity.js 
 
import React from 'react'
import { browserHistory } from 'react-router'

import '../../styles/main/sc-2-commodity.scss'

const Sc2Commodity = ({ commodities }) => {
  console.log('commodities', commodities)
  return (
    <li className='sc-2-commodity-container'>
      {
        commodities.map((o, i) => {
          const { banners, commodityName, commodityDescription, sellPrice, purchasesCount, commodityId } = o
          return (
            <div className='sc-2-commodity' key={ commodityId } onClick={ () => browserHistory.push(`/shangcheng/commodity?commodityId=${ commodityId }`) } style={ i % 2 === 0 ? { paddingRight: '5px' } : { paddingLeft: '5px' } }>
              <div className='bg-container'>
                <p><img src={ banners[0] } alt='commodity_data' /></p>
                <p>{ `${ commodityName } ${ commodityDescription }` }</p>
                <p>
                  <span>￥</span>
                  <span>{ sellPrice }</span>
                  <span>{ `${ purchasesCount }人付款` }</span>
                </p>
              </div>
            </div>
          )
        })
      }
    </li>
  )
}

export default Sc2Commodity
         
 
 
 
 shangcheng/components/common-component/sell-price.js 
 
import React from 'react'

const SellPrice = ({ sellPrice, maxSellPrice, textHeader = '' }) => {
  sellPrice = Number(sellPrice)
  if (maxSellPrice) maxSellPrice = Number(maxSellPrice)
  return (
    <div className='sell-price' style={{ fontSize: '.28rem', lineHeight: '.4rem', color: '#ff4848', overflow: 'hidden' }}>
      <p style={{ float: 'left' }}>
        {
          textHeader &&
          <span style={{ fontSize: '.40rem' }}>{ textHeader }</span>
        }
        &nbsp;￥
        <span style={{ fontSize: '.40rem' }}>{ sellPrice.toFixed(2).split('.')[0] }</span>
        { `.${ sellPrice.toFixed(2).split('.')[1] } ` }
      </p>
      {
        Boolean(maxSellPrice) && sellPrice !== maxSellPrice &&
        <p style={{ float: 'left' }}>
          &nbsp;-&nbsp;￥
          <span style={{ fontSize: '.40rem' }}>{ maxSellPrice.toFixed(2).split('.')[0] }</span>
          { `.${ maxSellPrice.toFixed(2).split('.')[1] }` }
        </p>
      }
    </div>
  )
}

export default SellPrice
         
 
 
 
 shangcheng/components/evaluate/index.js 
 
import React from 'react'
import { getStore } from '@boluome/common-lib'
import { NewEvaluation } from '@boluome/oto_saas_web_app_component'
import { TextareaItem, Icon } from 'antd-mobile'
import { createForm } from 'rc-form'

import PicSelect from '../common-component/picture-upload'

import '../../styles/evaluate/index.scss'

const Evaluate = props => {
  const { orderInfo, handleSelectStar, appraises = {}, handleButtonClick, handleChangeImg } = props
  if (!orderInfo) return <div />
  const { subOrders, id, channel, brandId } = orderInfo
  if (!appraises.express) appraises.express = { score: 5 }
  if (!appraises.server) appraises.server = { score: 5 }
  const expressScore = appraises.express.score
  const serviceScore = appraises.server.score

  console.log('subOrders', subOrders)
  const paras = {
    channel,
    expressScore,
    serviceScore,
    brandId,
    orderId:   id,
    userId:    getStore('customerUserId', 'session'),
    appraises: subOrders.map(o => ({
      commodityId:     o.commodityId,
      specificationId: o.specificationId,
      commodityUrl:    o.icon,
      userComment:     appraises[o.specificationId] && appraises[o.specificationId].userComment ? appraises[o.specificationId].userComment : '',
      score:           appraises[o.specificationId] && appraises[o.specificationId].score ? appraises[o.specificationId].score : '5',
      imgs:            appraises[o.specificationId] && appraises[o.specificationId].imgs ? appraises[o.specificationId].imgs.map(oo => oo.url) : [],
    })),
  }
  return (
    <div className='evaluate'>
      {
        subOrders.map(data => <CommodityItem { ...{ data, orginProps: props, handleChangeImg } } key={ data } />)
      }
      <div className='brand-evaluate'>
        <div className='brand-evaluate-header'>
          <Icon type={ require('svg/shangcheng/brand.svg') } size='md' />
          <span>店铺评分</span>
        </div>
        <div className='brand-evaluate-text'>
          <span>物流服务</span>
          <NewEvaluation defaultValue={ expressScore } width={ '2rem' } integerMode={ 1 } handleSelectStar={ res => handleSelectStar(res, 'express', appraises) } />
        </div>
        <div className='brand-evaluate-text'>
          <span>服务态度</span>
          <NewEvaluation defaultValue={ serviceScore } width={ '2rem' } integerMode={ 1 } handleSelectStar={ res => handleSelectStar(res, 'server', appraises) } />
        </div>
      </div>
      <p className='evaluate-button' onClick={ () => handleButtonClick(paras) }>发布评价</p>
    </div>
  )
}

class CommodityItemMid extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      currentValue: '',
    }
  }
  handleValueChange(currentValue, specificationId, appraises) {
    const { handleTextareaChange } = this.props.orginProps
    this.setState({ currentValue })
    handleTextareaChange(currentValue, specificationId, appraises)
  }
  render() {
    const { currentValue } = this.state
    const { form, data, orginProps, handleChangeImg } = this.props
    const { getFieldProps } = form
    const { icon, specificationId } = data
    // appraises: 评价信息的列表
    const { handleSelectStar, appraises = {} } = orginProps
    if (!appraises[specificationId]) appraises[specificationId] = { score: 5, imgs: [] }
    const score = appraises[specificationId].score
    const imgs = appraises[specificationId].imgs
    let evaluateText = '好评'
    const scoreMid = score

    if (scoreMid >= 3 && scoreMid < 4) evaluateText = '中评'
    if (scoreMid < 3) evaluateText = '差评'
    return (
      <div className='commodity-item'>
        <div className='commodity-item-header'>
          <p className='brand-img'><img src={ icon } alt='brand_image' /></p>
          <NewEvaluation defaultValue={ score } width={ '2.75rem' } integerMode={ 1 } handleSelectStar={ res => handleSelectStar(res, specificationId, appraises) } />
          <p className='evaluate-status'>{ evaluateText }</p>
        </div>
        <TextareaItem
          {
            ...getFieldProps('count', {
              initialValue: '',
            })
          }
          onChange={ e => this.handleValueChange(e, specificationId, appraises) }
          value={ currentValue }
          placeholder='商品满足您的期待吗？说说它的优点和美中不足的地方吧～'
          rows={ 4 }
          count={ 120 }
        />
        <PicSelect imgs={ imgs } handleChangeImg={ files => handleChangeImg(files, specificationId, appraises) } />
      </div>
    )
  }
}

const CommodityItem = createForm()(CommodityItemMid)

export default Evaluate
         
 
 
 
 shangcheng/components/main/categories.js 
 
import React from 'react'

import IndexSearch from '../common-component/index-search'

import '../../styles/main/categories.scss'

const Specialty = ({
  topCategoriesData, subCategoriesData,
  currentTop, handleChangeTop,
  handleToCommodities,
}) => {
  if (!topCategoriesData || !subCategoriesData) return <div />
  if (!currentTop) currentTop = topCategoriesData[0].categoryId
  return (
    <div className='categories'>
      <IndexSearch { ...{ showCart: 0, categoryLevel: 0, placeholder: '输入商家、商品名称' } } />
      <div className='categories-container'>
        <ul className='top-categories'>
          {
            topCategoriesData.map(o => (
              <li onClick={ () => handleChangeTop(o) } className={ currentTop === o.categoryId ? 'active' : '' } key={ o.categoryId }>{ o.categoryName }</li>
            ))
          }
        </ul>
        <div className={ subCategoriesData[0] && subCategoriesData[0].subSet ? 'sub-categories' : 'sub-categories three-categories' }>
          {
            subCategoriesData.map(o => {
              if (!o.subSet) {
                const { brandType, categoryId, categoryCode, categoryIcon, categoryName } = o
                return (
                  <dl key={ categoryId } onClick={ () => handleToCommodities(brandType, categoryId, categoryCode) }>
                    <dt><img src={ categoryIcon } alt={ categoryName } /></dt>
                    <dd className='line-1'>{ categoryName }</dd>
                  </dl>
                )
              }
              return <SubCategoryItem data={ o } handleToCommodities={ handleToCommodities } key={ o.categoryId } />
            })
          }
        </div>
      </div>
    </div>
  )
}
export default Specialty

const SubCategoryItem = ({ data, handleToCommodities }) => {
  const { categoryName, subSet } = data
  return (
    <div className='sub-container'>
      <p className='sub-title'>{ categoryName }</p>
      <div className='three-categories'>
        {
          subSet &&
          subSet.map(o => (
            <dl key={ o.categoryId } onClick={ () => handleToCommodities(o.brandType, o.categoryId, o.categoryCode) }>
              <dt><img src={ o.categoryIcon } alt={ o.categoryName } /></dt>
              <dd>{ o.categoryName }</dd>
            </dl>
          ))
        }
      </div>
    </div>
  )
}
         
 
 
 
 shangcheng/components/main/commodity-detail/index.js 
 
import React from 'react'
import { moment } from '@boluome/common-lib'
import { Icon, Carousel, Modal, List } from 'antd-mobile'
import { keys, all } from 'ramda'

import SellPrice from '../../common-component/sell-price'
import EvaluateItem from '../../common-component/evaluate-item'
import CountDown from '../../common-component/countdown'
import Parameters from './parameters'

import '../../../styles/main/commodity-detail/index.scss'

const CommodityDetail = ({
  commodityDetail, handleSelectParams, currentParamsInfo, handleChangePopup, showPopup = false, handleBrandClick, handleClickCartOrPay,
  handleChangeNum, currentNum = 1,
  commodityStatus, handleModalClick,
  isCollect, handleChangeCollect,
  handleEvaluateClick,
  buttonType, handleToCart,
  totalUnreadNum, handleToMessage,
}) => {
  if (!commodityDetail) return <div />
  const {
    banners, commodityName, commodityId, commodityDescription,
    freightPrice, province, city, parameters, brand, isCollection, purchasesCount, prices, commodityDetails,
    orderCommentBo, goodCommentCount,
    statusDescription,
    activityPageCode, startTime, endTime,
  } = commodityDetail
  const { brandName, bigLogoImg, servicePhone, commodityCount, brandId, commodityScore, expressScore, serviceScore, attentionCount } = brand
  if (isCollect === undefined) isCollect = isCollection
  const getLevel = score => {
    let level = '低'
    if (score === 4.5) level = '中'
    if (score > 4.5) level = '高'
    return level
  }
  const brandScore = [
    { name: '商品描述', score: commodityScore, level: getLevel(commodityScore) },
    { name: '物流服务', score: expressScore, level: getLevel(expressScore) },
    { name: '卖家服务', score: serviceScore, level: getLevel(serviceScore) },
  ]
  const { paramsList, currentPriceInfo } = currentParamsInfo
  let { sellPrice, originalPrice, maxSellPrice, maxOrginalPrice } = commodityDetail
  if (currentPriceInfo) {
    sellPrice = currentPriceInfo.sellPrice
    maxSellPrice = currentPriceInfo.maxSellPrice
    originalPrice = currentPriceInfo.originalPrice
    maxOrginalPrice = currentPriceInfo.maxOrginalPrice
  }
  const topParamsList = keys(paramsList)
  let selectCommodity = ''
  if (topParamsList.length > 0) {
    selectCommodity = topParamsList.reduce((p, r) => {
      p.push(paramsList[r].name)
      return p
    }, [])
    selectCommodity = `已选择 ${ selectCommodity.join(' ') }`
  } else if (parameters.length > 0) {
    selectCommodity = parameters.reduce((p, c) => {
      p.push(c.parameterName)
      return p
    }, [])
    selectCommodity = `选择 ${ selectCommodity.join(' ') }`
  }
  // 当所有的二级规格都只有一种时，默认选中规格且不允许选择规格, allSingle: 是否所有的二级规格都是一个
  let allSubSingle = false
  if (all(e => e.subParameters.length === 1)(parameters)) {
    allSubSingle = true
    // showPopup = false
    currentParamsInfo = {
      paramsList,
      currentPriceInfo: prices[0],
    }
  }
  // noDo: 暂时不做的功能
  const noDo = true
  // 活动页定制
  const hasActivity = activityPageCode
  const isYear = activityPageCode === 'nianhuojie'
  let textHeader = isYear ? '年货价' : '促销价'
  if (!hasActivity) textHeader = ''
  return (
    <div className='commodity-detail-container'>
      {
        !noDo &&
        <h2 className='msg-icon' onClick={ () => handleToMessage(brandId, brandName) }>
          <Icon type={ require('svg/shangcheng/message_ff.svg') } size='md' />
          {
            Boolean(totalUnreadNum) &&
            <span className='sc-badge-icon'>{ totalUnreadNum > 99 ? '99+' : totalUnreadNum }</span>
          }
        </h2>
      }
      <div className='commodity-detail'>
        <div className='banner-carousel'>
          {
            banners.length === 1 ?
              <p className='img-container'><img src={ banners[0] } alt='icon' /></p> :
              <Carousel infinite>
                {
                  banners.map(o => <p className='img-container' key={ o }><img src={ o } alt='icon' /></p>)
                }
              </Carousel>
          }
          {
            hasActivity &&
            <div className='activity-tips'>
              <p>
                <span><Icon type={ isYear ? require('svg/shangcheng/fu.svg') : require('svg/shangcheng/alarm.svg') } size='md' /></span>
                <span>{ isYear ? '年货节' : '限时折扣' }</span>
              </p>
              {
                isYear ?
                  <span>{ `${ moment('YYYY.MM.DD')(startTime) }-${ moment('YYYY.MM.DD')(endTime) }` }</span> :
                  <CountDown endTime={ endTime } timeAfter='后结束' delDay={ 1 } />
              }
            </div>
          }
        </div>
        <div className='commodity-detail-header'>
          <p className='title'>{ `${ commodityName } ${ commodityDescription }` }</p>
          <SellPrice { ...{ sellPrice, maxSellPrice, textHeader } } />
          {
            !isYear &&
            <del className='original-price' style={{ fontSize: '.24rem', lineHeight: '.35rem', color: '#adadad' }}>{ maxOrginalPrice ? `¥${ originalPrice.toFixed(2) } - ¥${ maxOrginalPrice.toFixed(2) }` : `¥${ originalPrice.toFixed(2) }` }</del>
          }
          <p className='freight-price'>
            <span>{ freightPrice === 0 ? '运费：免运费' : `运费：¥${ freightPrice }` }</span>
            <span>{ `销量${ purchasesCount }笔` }</span>
            <span>{ province === city ? city : `${ province }${ city }` }</span>
          </p>
        </div>
        {
          !noDo &&
          <p className='service-text'>
            <Icon type={ require('svg/shangcheng/selected_a.svg') } size='xxs' />
            <span>支持7天无理由退货</span>
          </p>
        }
        {
          !allSubSingle && !statusDescription &&
          <div className='params' onClick={ () => handleChangePopup(true, '') }>
            <span>{ selectCommodity }</span>
            <Icon type='right' size='md' />
          </div>
        }
        {
          Boolean(goodCommentCount) &&
          <div className='detail-evaluate'>
            <List.Item className='detail-evaluate-header' extra={ `好评数：${ goodCommentCount }` } onClick={ () => handleEvaluateClick(commodityId) } arrow='horizontal'>用户评价</List.Item>
            <EvaluateItem data={ orderCommentBo } />
          </div>
        }
        <div className='brand-info' onClick={ () => handleBrandClick(brandId) }>
          <div className='brand-info-header'>
            <p className='brand-info-left'><img src={ bigLogoImg } alt={ brandName } /></p>
            <div className='brand-info-right'>
              <p>{ brandName }</p>
            </div>
          </div>
          <ul className='brand-info-bottom'>
            <li>
              <span>{ commodityCount }</span>
              <p>全部商品</p>
            </li>
            <li>
              <span>{ attentionCount }</span>
              <p>关注人数</p>
            </li>
            <li>
              {
                brandScore.map(o => (
                  <div className='brand-score-item' key={ o.name }>
                    <p>{ o.name }</p>
                    <p>{ o.score }</p>
                    <p>{ o.level }</p>
                  </div>
                ))
              }
            </li>
          </ul>
        </div>
        <div className='commodity-detail-list'>
          <p className='detail-list-header'>商品详情</p>
          <ul className='commodity-detail-item-container'>
            {
              commodityDetails.map(o => (
                <li className='commodity-detail-item' key={ `${ o.imgDescription }_${ o.wordDescription }` }>
                  {
                    o.imgDescription &&
                    <img src={ o.imgDescription } alt={ o.commodityDetailType } />
                  }
                  {
                    o.wordDescription &&
                    <p>{ o.wordDescription }</p>
                  }
                </li>
              ))
            }
            <li className='li-last'>已经全部加载完毕</li>
          </ul>
        </div>
      </div>
      <div className='commodity-detail-footer'>
        <p className='contact' onClick={ () => handleChangeCollect(commodityId, !isCollect) } style={{ WebkitFlexDirection: 'column' }}>
          <Icon type={ isCollect ? require('svg/shangcheng/collect_fill.svg') : require('svg/shangcheng/collect.svg') } size='xs' />
          <span>{ isCollect ? '已收藏' : '收藏' }</span>
        </p>
        <a className='contact' href={ `tel:${ servicePhone }` } style={{ WebkitFlexDirection: 'column' }}>
          <Icon type={ require('svg/shangcheng/contact.svg') } size='md' />
          <span>客服</span>
        </a>
        <p className='contact' onClick={ handleToCart } style={{ WebkitFlexDirection: 'column' }}>
          <Icon type={ require('svg/shangcheng/cart-99.svg') } size='xs' />
          <span>购物车</span>
        </p>
        <p className='commodity-btn' style={{ background: '#ffab00', color: statusDescription ? 'rgba(255, 255, 255, .15)' : '#fff' }} onClick={ () => handleChangePopup(true, 'cartCommoditys') }>加入购物车</p>
        <p className='commodity-btn' style={{ background: '#ff6e19', color: statusDescription ? 'rgba(255, 255, 255, .15)' : '#fff' }} onClick={ () => handleChangePopup(true, 'orderCommoditys') }>立即购买</p>
      </div>
      {
        showPopup && !statusDescription &&
        <div>
          <div className='s-mask' onClick={ () => handleChangePopup(false, '') } onTouchMove={ e => e.preventDefault() } />
          <Parameters { ...{ commodityDetail, handleSelectParams, currentParamsInfo, handleChangeNum, currentNum, onClose: () => handleChangePopup(false, ''), handleClickCartOrPay, selectCommodity, buttonType } } />
        </div>
      }
      {
        commodityStatus && !commodityStatus.canService &&
        <Modal
          title={ `${ commodityStatus.description }` }
          transparent
          className='commodity'
          maskClosable={ false }
          visible={ commodityStatus && commodityStatus.canService }
          footer={ [{ text: '确定', onPress: handleModalClick }] }
        />
      }
      {
        statusDescription &&
        <p className='commodity-disable'>{ `该商品${ statusDescription }~` }~</p>
      }
    </div>
  )
}

export default CommodityDetail
         
 
 
 
 shangcheng/components/main/commodity-detail/parameters.js 
 
import React from 'react'
import { Icon } from 'antd-mobile'

import SellPrice from '../../common-component/sell-price'

import '../../../styles/main/commodity-detail/parameters.scss'

export default class Parameters extends React.Component {
  constructor(props) {
    super(props)
    console.log('props', props)
  }
  render() {
    const { commodityDetail, handleSelectParams, currentParamsInfo, onClose, handleChangeNum, currentNum, handleClickCartOrPay, selectCommodity, buttonType } = this.props
    const { banners, parameters, prices, checkNum } = commodityDetail
    let { sellPrice, maxSellPrice } = commodityDetail
    const { paramsList, currentPriceInfo } = currentParamsInfo
    let { newParameters } = currentParamsInfo
    let currentInventory = ''
    if (!newParameters) newParameters = parameters
    if (currentPriceInfo) {
      sellPrice = currentPriceInfo.sellPrice
      maxSellPrice = currentPriceInfo.maxSellPrice
      currentInventory = currentPriceInfo.inventory
    }
    // 如果只有一种规格选项时，要先根据库存给规格打标记
    if (parameters.length === 1) {
      prices.forEach(o => {
        if (!o.inventory) {
          parameters[0].subParameters = parameters[0].subParameters.map(oo => {
            if (oo.parameterId === o.specificationItems[0]) oo.noInvertory = true
            return oo
          })
        }
      })
    }
    return (
      <div className='parameters' onClick={ e => e.stopPropagation() }>
        <div className='parameters-header' onTouchMove={ e => e.preventDefault() }>
          <Icon onClick={ onClose } className='close' type='cross' size='lg' />
          <p className='parameters-header-left'><span style={{ background: `url(${ banners[0] }) no-repeat center center` }} /></p>
          <div className='parameters-header-right'>
            <SellPrice { ...{ sellPrice, maxSellPrice } } />
            {
              currentInventory !== '' &&
              <p className='inventory'>{ `库存${ currentInventory }件` }</p>
            }
            <p className='parameters-text line-2'>{ selectCommodity }</p>
          </div>
        </div>
        <div className='parameters-middle-container' onClick={ e => e.stopPropagation() } ref={ node => this.node = node } onTouchMove={ e => this.node.scrollHeight <= this.node.offsetHeight && e.preventDefault() }>
          <div className='parameters-middle'>
            <ul className='parameters-list-container'>
              {
                newParameters.map(o => (
                  <li key={ o.parameterId }>
                    <h1>{ o.parameterName }</h1>
                    <div className='parameters-list'>
                      {
                        o.subParameters.map(oo => {
                          const disabled = oo.noInvertory
                          const actived = paramsList[o.parameterId] && oo.parameterId === paramsList[o.parameterId].id
                          let cName = ''
                          if (disabled) cName = 'disabled'
                          if (actived) cName = 'active'
                          return (
                            <p
                              onClick={ () => {
                                if (!disabled && !actived) {
                                  // 设置当前选中的一级规格对应的二级规格信息
                                  paramsList[o.parameterId] = { name: oo.parameterName, id: oo.parameterId }
                                  handleSelectParams(o.parameterId, paramsList, prices, parameters, currentNum)
                                }
                              } }
                              className={ cName }
                              key={ oo.parameterId }
                            >
                              { oo.parameterName }
                            </p>
                          )
                        })
                      }
                    </div>
                  </li>
                ))
              }
            </ul>
            <div className='commodity-count'>
              <p>购买数量</p>
              <p>
                <span onClick={ () => currentNum > 1 && handleChangeNum(0, currentNum, currentPriceInfo) }>-</span>
                <span>{ currentNum }</span>
                <span onClick={ () => handleChangeNum(1, currentNum, currentPriceInfo, checkNum) }>+</span>
              </p>
            </div>
          </div>
        </div>
        {
          buttonType ?
            <div className='parameters-footer' onTouchMove={ e => e.preventDefault() }>
              <p style={{ width: '100%', background: '#ff6e19' }} onClick={ () => handleClickCartOrPay(currentParamsInfo, commodityDetail, currentNum, buttonType, true) }>确定</p>
            </div> :
            <div className='parameters-footer' onTouchMove={ e => e.preventDefault() }>
              <p onClick={ () => handleClickCartOrPay(currentParamsInfo, commodityDetail, currentNum, 'cartCommoditys', true) }>加入购物车</p>
              <p onClick={ () => handleClickCartOrPay(currentParamsInfo, commodityDetail, currentNum, 'orderCommoditys', true) }>立即购买</p>
            </div>
        }
      </div>
    )
  }
}
         
 
 
 
 shangcheng/components/main/daojia.js 
 
import React from 'react'
import { Mask, SlidePage, AddressSearchGaode } from '@boluome/oto_saas_web_app_component'
import { Icon, Carousel } from 'antd-mobile'
import { splitEvery } from 'ramda'

import IndexSearch from '../common-component/index-search'
import CommodityItem from '../common-component/commodity-item'

import '../../styles/main/daojia.scss'

const Daojia = ({
  daojiaInfo,
  handleServiceClick,
  selectedCity, handleSelectCity,
}) => {
  if (!daojiaInfo) return <div />
  let { industryData, serviceData, bannerData } = daojiaInfo
  bannerData = bannerData.map((o, i) => {
    o.id = i
    return o
  })
  industryData = industryData.map(o => ({
    text: o.industryName,
    icon: o.industryIcon,
    code: o.industryCode,
    id:   o.industryId,
  }))
  industryData = splitEvery(8)(industryData)
  serviceData = serviceData.map(o => ({
    commodityId:          o.serviceId,
    serviceId:            o.serviceId,
    banners:              [o.serviceThumbnailImg],
    commodityName:        o.serviceName,
    brandName:            o.brandName,
    sellPrice:            o.sellPrice,
    originalPrice:        o.originalPrice,
    goodComment:          o.goodCommentCount,
    commodityDescription: '',
    industryCode:         o.industryCode,
    unitName:             o.unitName,
  }))
  return (
    <div className='daojia'>
      <div className='daojia-header'>
        <p
          onClick={ () => Mask(
            <SlidePage showClose={ false }>
              <AddressSearchGaode { ...{ selectedCity, onSuccess: handleSelectCity } } />
            </SlidePage>)
          }
        >
          <Icon type={ require('svg/shangcheng/location_fill.svg') } size='md' />
          <span className='line-1'>{ selectedCity.address }</span>
          <Icon type={ require('svg/shangcheng/push.svg') } size='xxs' />
        </p>
        <Icon onClick={ () => Mask(<SlidePage showClose={ false }><IndexSearch fixed={ 1 } /></SlidePage>) } type={ require('svg/shangcheng/search.svg') } size='md' />
      </div>
      <div className='sc-ad'>
        <Carousel className='ad-carousel' infinite>
          {
            bannerData.map(o => <img src={ o.bannerIcon } alt='icon' key={ o.id } />)
          }
        </Carousel>
        <p>广告</p>
      </div>
      <Carousel className='daojia-service-carousel'>
        {
          industryData.map(o => <IndustryItem data={ o } key={ o[0].id } handleServiceClick={ handleServiceClick } />)
        }
      </Carousel>
      <div className='recommend-service'>
        <h1 className='recommend-service-header'>
          <span>推荐服务</span>
          <span />
        </h1>
        {
          serviceData.map(o => <CommodityItem data={ o } key={ o.commodityId } isDaojia={ 1 } />)
        }
      </div>
    </div>
  )
}
export default Daojia

const IndustryItem = ({ data, handleServiceClick }) => {
  return (
    <ul className='industry-item'>
      {
        data.map(o => (
          <li key={ o.id } onClick={ () => handleServiceClick(o) }>
            <div className='industry-item-container'>
              <p><img src={ o.icon } alt='icon' /></p>
              <span className='line-1'>{ o.text }</span>
            </div>
          </li>
        ))
      }
    </ul>
  )
}
         
 
 
 
 shangcheng/components/main/index.js 
 
import React from 'react'
import { Carousel, Icon } from 'antd-mobile'
import { splitEvery } from 'ramda'

import Sc2Commodity from '../common-component/sc-2-commodity'
import IndexSearch from '../common-component/index-search'

import '../../styles/main/index.scss'

const Main = ({
  columnList, handleColumnClick,
  mockAdList, newCommodityList, categorySecondatys, recommendList,
  handleCommodityClick, handleCategoryClick,
}) => {
  const nodo = false
  return (
    <div className='main'>
      <IndexSearch { ...{ placeholder: '搜索商品、店铺' } } />
      <div className='main-list'>
        {
          mockAdList &&
          <div className='sc-ad'>
            <Carousel className='ad-carousel' infinite>
              {
                mockAdList.map(o => <img src={ o.img } alt='icon' key={ o.id } />)
              }
            </Carousel>
            {
              nodo &&
              <p>广告</p>
            }
          </div>
        }
        <ul className='columns'>
          {
            columnList &&
            columnList.map(o => (
              <li key={ o.categoryName } onClick={ () => handleColumnClick(o) }>
                <p><img src={ o.icon } alt={ o.categoryName } /></p>
                <span>{ o.categoryName }</span>
              </li>
            ))
          }
        </ul>
        {
          newCommodityList && newCommodityList.length >= 5 &&
          <div className='new-commoditys'>
            <p className='sc-title'>
              <span />
              <Icon type={ require('svg/shangcheng/new_commodity.svg') } size='xxs' />
              <span>新品上市</span>
              <span />
            </p>
            <div className='commoditys-list-container'>
              <ul className='commoditys-list'>
                {
                  newCommodityList.map(o => (
                    <li className='sc-4-commodity' key={ o.commodityId } onClick={ () => handleCommodityClick(o.commodityId) }>
                      <img src={ o.banners[0] } alt='new_commodity' />
                      <p>{ `${ o.commodityName } ${ o.commodityDescription }` }</p>
                      <p>{ `￥${ o.sellPrice }` }</p>
                    </li>
                  ))
                }
              </ul>
            </div>
          </div>
        }
        <div className='category-secondary'>
          {
            categorySecondatys &&
            categorySecondatys.map(o => (
              <p key={ o.id }>
                <span>{ o.title }</span>
                <span>{ o.text }</span>
                <img src={ o.img } alt='category-secondary' onClick={ () => handleCategoryClick(o.url) } />
              </p>
            ))
          }
        </div>
        <ul className='recommend-list'>
          <p className='recommend-list-title'>
            <img src={ require('../../img/like.png') } alt='like' />
          </p>
          {
            recommendList &&
            splitEvery(2)(recommendList).map(commodities => <Sc2Commodity { ...{ commodities } } key={ commodities[0].commodityId } />)
          }
        </ul>
        <p className='load-complete'>已经全部加载完毕</p>
      </div>
    </div>
  )
}

export default Main
         
 
 
 
 shangcheng/components/main/market.js 
 
import React from 'react'
import { Tabs } from 'antd-mobile'

import IndexSearch from '../common-component/index-search'
import CommodityItem from '../common-component/commodity-item'

import '../../styles/main/market.scss'

const TabPane = Tabs.TabPane

const Market = ({
  marketCategories, handleTabClick,
  marketCommoditys, handleAddCommodity,
  cartCommoditys,
  handleChangeMenu,
}) => {
  if (!marketCategories || !marketCommoditys) return <div />
  // handleAddCommodityMid: handleAddCommodity的中间函数，给handleAddCommodity多加一个参数
  const handleAddCommodityMid = data => {
    handleAddCommodity(data, cartCommoditys)
  }
  return (
    <div className='market'>
      <IndexSearch { ...{ showCart: 1, categoryLevel: 1, cartNum: cartCommoditys.totalNum, handleChangeMenu, placeholder: '请输入商家，商品名称' } } />
      <Tabs pageSize={ 5 } onTabClick={ handleTabClick }>
        {
          marketCategories.map(o => (
            <TabPane tab={ <IconText icon={ o.commodityCategoryIcon } text={ o.commodityCateogryName } /> } key={ o.commodityCategoryId } />
          ))
        }
      </Tabs>
      <div className='main-list'>
        {
          marketCommoditys.map(o => (
            <CommodityItem data={ o } key={ o.commodityId } showCart={ 1 } handleAddCommodity={ handleAddCommodityMid } />
          ))
        }
      </div>
    </div>
  )
}
export default Market


const IconText = ({ icon, text }) => {
  const imgStyle = {
    height:  '.5rem',
    display: 'block',
    margin:  '0 auto .16rem',
  }
  const ddStyle = {
    fontSize:   '.26rem',
    lineHeight: '.26rem',
    color:      '#666',
    textAlign:  'center',
  }
  return (
    <dl>
      <dt>
        <img style={ imgStyle } src={ icon } alt={ text } />
      </dt>
      <dd style={ ddStyle }>{ text }</dd>
    </dl>
  )
}
         
 
 
 
 shangcheng/components/main/specialty.js 
 
import React from 'react'
// import { Empty } from '@boluome/oto_saas_web_app_component'
import { Icon } from 'antd-mobile'

import IndexSearch from '../common-component/index-search'
import CommodityItem from '../common-component/commodity-item'

import '../../styles/main/specialty.scss'

const Specialty = ({
  specialtyCommoditys, handleAddCommodity,
  cartCommoditys,
  handleChangeMenu,
  specialtyProvince, handleChangeProvince,
  handleToCommodityList,
}) => {
  if (!specialtyCommoditys) return <div />
  // handleAddCommodityMid: handleAddCommodity的中间函数，给handleAddCommodity多加一个参数
  const handleAddCommodityMid = data => {
    handleAddCommodity(data, cartCommoditys)
  }
  return (
    <div className='specialty'>
      <IndexSearch { ...{ showCart: 1, categoryLevel: 2, cartNum: cartCommoditys.totalNum, handleChangeMenu, specialtyProvince, handleChangeProvince, placeholder: '请输入商家，商品名称' } } />
      <div className='sc-ad'>
        <img src={ require('../../img/carousel_1.png') } alt='ad' />
        <p>广告</p>
      </div>
      {
        specialtyCommoditys.map(o => {
          const { commodityCategoryName, simpleCommodityVos } = o
          if (simpleCommodityVos.length === 0) return false
          return (
            <div className='spacialty-category' key={ commodityCategoryName }>
              <div className='specialty-list-title'>
                <span>{ commodityCategoryName }</span>
                <p>
                  <span onClick={ () => handleToCommodityList(o) } style={{ visibility: simpleCommodityVos.length > 3 ? 'visible' : 'hidden' }}>查看全部</span>
                  <Icon style={{ visibility: simpleCommodityVos.length > 3 ? 'visible' : 'hidden' }} type='right' size='md' />
                </p>
              </div>
              <div className='specialty-list'>
                {
                  simpleCommodityVos.length >= 1 &&
                  simpleCommodityVos.map((oo, i) => {
                    if (i >= 3) return false
                    return <CommodityItem data={ oo } key={ oo.commodityId } showCart={ 1 } handleAddCommodity={ handleAddCommodityMid } />
                  })
                }
              </div>
            </div>
          )
        })
      }
    </div>
  )
}
export default Specialty
         
 
 
 
 shangcheng/components/message/index.js 
 
import React from 'react'
import { moment } from '@boluome/common-lib'

import '../../styles/message/index.scss'

// 当前时间在今天
const judgeToday = time => {
  const t = ((new Date()).getTime() / 1000) - time
  // 是今天之内：时间差在24小时，且日期相等
  if (t < 24 * 60 * 60 && moment('YYYY-MM-DD')(time * 1000) === moment('YYYY-MM-DD')(new Date())) return true
  return false
}

const conversionTimeFuc = time => {
  if (judgeToday(time)) {
    return moment('HH:mm:ss')(time * 1000)
  }
  // 昨天：传入时间加上24小时，在今天之内
  if (judgeToday(time + (24 * 60 * 60))) {
    return '昨天'
  }
  return moment('YYYY/MM/DD')(time * 1000)
}

const Message = ({
  recentContact, unreadMsg, handleChangeDialog,
}) => {
  if (!recentContact || !unreadMsg) return <div />
  const contactList = recentContact.map(o => {
    const { type, uid, msg } = o
    // 获取最后一条信息
    let lastMsg = msg[0][1]
    if (type === 1) lastMsg = '[图片]'
    if (type === 2) lastMsg = '[语音]'
    delete o.type
    o.lastMsg = lastMsg
    unreadMsg.forEach(oo => {
      if (oo.contact === uid) o.noreadNum = oo.msgCount
    })
    return o
  })
  return (
    <div className='message'>
      {
        recentContact.length >= 0 &&
        <ul className='message-list'>
          {
            contactList.map(o => {
              const { avator, nickname, time, lastMsg, noreadNum } = o
              const uid = o.uid.substring(8)
              const conversionTime = conversionTimeFuc(time)
              return (
                <li key={ time } onClick={ () => handleChangeDialog(uid, nickname) }>
                  {
                    noreadNum &&
                    <span className='sc-badge-icon'>{ noreadNum > 99 ? '99+' : noreadNum }</span>
                  }
                  <dl>
                    <dt>
                      <img src={ avator } alt={ nickname } />
                    </dt>
                    <dd>
                      <p>{ uid }</p>
                      <p>{ conversionTime }</p>
                    </dd>
                    <dd className='line-1'>{ lastMsg }</dd>
                  </dl>
                </li>
              )
            })
          }
        </ul>
      }
    </div>
  )
}

export default Message
         
 
 
 
 shangcheng/components/refund/consult-list.js 
 
import React from 'react'

import '../../styles/refund/consult-list.scss'

const ConsultList = ({ consultList, shopName, shopLogo }) => {
  return (
    <ul className='consult-list'>
      {
        consultList.map(o => (
          <li className='consult-item' key={ o.time }>
            <div className='consult-item-header'>
              <p className='consult-item-header-left'><img src={ shopLogo } alt='商家图片' /></p>
              <p className='consult-item-header-right'>
                <span>{ shopName }</span>
                <span>{ o.time }</span>
              </p>
            </div>
            <div className='consult-item-bottom'>{ o.context }</div>
          </li>
        ))
      }
    </ul>
  )
}

export default ConsultList
         
 
 
 
 shangcheng/components/refund/index.js 
 
import React from 'react'
// import { Mask, SlidePage, ContactShow, Contact } from '@boluome/oto_saas_web_app_component'
import { Icon, InputItem, Picker, List, Modal } from 'antd-mobile'

import PicSelect from '../common-component/picture-upload'

import '../../styles/refund/index.scss'

const Refund = ({
  showRefundReason = false,
  handleRefundTypeChange, refundType = '',
  handlePriceChange, refundPrice,
  handleRemarkChange, remark = '',
  handleSelectReason, currentReason = '',
  handleCommodityStatus, currentCommodityStatus = ['未收到货'],
  currentOrderInfo,
  placeRefund,
  priceModalVisible, handleHidePriceModal,
  handleChangeImg, uploadImgs = [],
  shopId, shopOrderType,
}) => {
  if (!currentOrderInfo) return <div />
  const { id, express, status, commodityStatus, multipleRefunds } = currentOrderInfo
  let { orderType, subOrders } = currentOrderInfo
  const { expressPrice } = express
  // 第一个商品
  if (!subOrders) subOrders = [currentOrderInfo]
  const firstCommodity = subOrders[0]
  // 最大退款金额
  let maxPrice = expressPrice
  // 是否实物
  let commodityType = 0
  subOrders.forEach(o => {
    maxPrice += o.unitPrice * o.purchaseQuantity
    if (o.commodityType === 1) commodityType = 1
  })
  maxPrice = maxPrice.toFixed(2)

  // 待发货状态，或为虚拟商品时，直接显示退款原因页
  const ToBeDeliver = (status === 9 && commodityStatus === 0) || commodityType === 1
  if (ToBeDeliver) {
    showRefundReason = true
    refundType = 1
  }

  if (refundPrice === undefined) refundPrice = maxPrice
  let orderId = shopId
  if (!shopId) {
    orderId = id
  } else {
    orderType = shopOrderType
  }
  const paras = {
    orderId,
    reason:             currentReason[0],
    commodityStatus:    currentCommodityStatus[0],
    amount:             Number(refundPrice),
    explain:            remark,
    images:             uploadImgs.map(o => o.url),
    relatedCommodities: [{ id: firstCommodity.id, type: firstCommodity.orderType }],
    isFullRefund:       multipleRefunds === 0,
    refundType,
    orderType,
  }
  return (
    <div className='refund'>
      {
        subOrders.map(o => {
          const { icon, commodityName, specificationName, specificationId } = o
          return (
            <div key={ specificationId } className='refund-header'>
              <p className='refund-header-left'><img src={ icon } alt={ commodityName } /></p>
              <div className='refund-header-right'>
                <p>{ commodityName }</p>
                {
                  specificationName &&
                  <p>{ `已选择 ${ specificationName }` }</p>
                }
              </div>
            </div>
          )
        })
      }
      {
        !showRefundReason &&
        <RefundSelect { ...{ handleRefundTypeChange } } />
      }
      {
        showRefundReason &&
        <RefundWrite { ...{ handlePriceChange, refundPrice, handleRemarkChange, handleSelectReason, currentReason, handleCommodityStatus, currentCommodityStatus, placeRefund: () => placeRefund(paras, maxPrice), maxPrice, expressPrice, refundType, handleChangeImg, uploadImgs } } />
      }
      <Modal
        title=''
        transparent
        maskClosable={ false }
        visible={ priceModalVisible }
        footer={ [{ text: '确定', onPress: handleHidePriceModal }] }
      >
        超出退款最高限额
      </Modal>
    </div>
  )
}

export default Refund

const RefundSelect = ({ handleRefundTypeChange }) => {
  return (
    <div className='refund-bottom'>
      <ul className='refund-select'>
        <li className='refund-select-item' onClick={ () => handleRefundTypeChange(1) }>
          <div className='refund-select-item-left'>
            <p>仅退款</p>
            <p>未收货（包含未签收），或卖家协商同意前提下</p>
          </div>
          <Icon className='refund-select-item-right' type='right' size='md' />
        </li>
        <li className='refund-select-item' onClick={ () => handleRefundTypeChange(2) }>
          <div className='refund-select-item-left'>
            <p>退货退款</p>
            <p>已收到货，需要退换已收到的货物</p>
          </div>
          <Icon className='refund-select-item-right' type='right' size='md' />
        </li>
      </ul>
    </div>
  )
}

const RefundWrite = ({ handlePriceChange, refundPrice, handleRemarkChange, currentReason, handleSelectReason, handleCommodityStatus, currentCommodityStatus, placeRefund, maxPrice, expressPrice, refundType, handleChangeImg, uploadImgs }) => {
  const commodityStatus = [
    { label: '未收到货', value: '未收到货' },
    { label: '已收到货', value: '已收到货' },
  ]
  const reasons = [
    { label: '尺寸拍错/不喜欢/效果不好', value: '尺寸拍错/不喜欢/效果不好' },
    { label: '材质问题', value: '材质问题' },
    { label: '尺寸问题', value: '尺寸问题' },
    { label: '做工瑕疵', value: '做工瑕疵' },
    { label: '颜色/图案/花色/款式等不符', value: '颜色/图案/花色/款式等不符' },
    { label: '卖家发错货', value: '卖家发错货' },
    { label: '假冒品牌', value: '假冒品牌' },
    { label: '收到商品少件/破损/污渍等', value: '收到商品少件/破损/污渍等' },
    { label: '其他', value: '其他' },
  ]
  return (
    <div className='refund-bottom'>
      <div className='refund-write'>
        {
          refundType === 2 &&
          <Picker data={ commodityStatus } cols={ 1 } extra={ currentCommodityStatus } onChange={ handleCommodityStatus }>
            <List.Item arrow='horizontal'>货物状态</List.Item>
          </Picker>
        }
        <Picker data={ reasons } cols={ 1 } extra={ currentReason } onChange={ handleSelectReason }>
          <List.Item arrow='horizontal' >退款原因</List.Item>
        </Picker>
      </div>
      <div className='refund-price'>
        <InputItem
          placeholder='请输入退款金额'
          onChange={ handlePriceChange }
          className='sc-user-tips refund-price-top'
          value={ `¥ ${ refundPrice }` }
        >
          退款金额：
        </InputItem>
        <p className='refund-price-bottom'>{ `最多￥${ maxPrice }，含快递费￥${ expressPrice }扣除优惠金额￥0.00` }</p>
      </div>

      <InputItem
        placeholder='选填'
        onChange={ handleRemarkChange }
        className='sc-user-tips refund-reason'
      >
        退款说明：
      </InputItem>
      <div className='select-pic'>
        <h1>添加商品照片</h1>
        <PicSelect imgs={ uploadImgs } handleChangeImg={ handleChangeImg } imgsLength={ 6 } />
      </div>
      <div className='place-button' onClick={ placeRefund }>提交</div>
    </div>
  )
}
         
 
 
 
 shangcheng/components/refund/refund-info.js 
 
import React from 'react'
import { moment } from '@boluome/common-lib'
import { Mask, SlidePage } from '@boluome/oto_saas_web_app_component'
import { List, InputItem, Grid } from 'antd-mobile'

import CountDown from '../common-component/countdown'
import ConsultList from './consult-list'
import ExpressInfo from '../common-component/express-info'

import '../../styles/refund/refund-info.scss'

const RefundInfo = ({
  currentRefundInfo, handleEidtRefund, handleCancelRefund,
  handleExpressChange, currentExpressNumber, expressInfo = {}, placeExpress,
  handleIptBlur,
}) => {
  if (!currentRefundInfo) return <div />
  const {
    amount, reason, explain, id, createdAt, updatedAt,
    status, originId, originOrderType,
    businessConfirmTime,
    consultList,
    displayStatus, rejectReason, enterPrisePhone, isCanApply,
    shopName, shopLogo, images,
    services,
    specifications,
  } = currentRefundInfo
  const { expressName = '', expressCode = '' } = expressInfo
  const expressParas = {
    orderId: id,
    express: {
      orderNum: currentExpressNumber,
      name:     expressName,
      code:     expressCode,
    },
  }
  // status: 6: 退款中, 7: 已退款, 8: 已取消（REFUND_CANCELED_TIMEOUT：机会商品超时，REFUND_CANCELED_USER：用户自行取消），11: 等待退款
  // 26: 退款失败（REFUND_FAIL: 退款失败，REFUND_FAIL_REJECT：退款失败，被拒绝）, 27:退款申请中， 28: 申请已拒绝（申请时拒绝）, 29: 退货中, 30: 商家已同意，等待退货
  return (
    <div className='refund-info-container'>
      {
        (status === 8 || status === 11 || status === 26 || status === 27 || status === 28 || status === 29) &&
        <div className='refund-info'>
          {
            status === 7 &&
            <div className='refund-info-common-container'>
              <div className='refund-info-header'>
                <span>退款成功</span>
                <span>{ moment('YYYY-MM-DD HH:mm:ss')(updatedAt) }</span>
              </div>
              <div className='refund-info-status'>
                <p className='refund-info-common-header'>{ displayStatus.split(' ')[1] }</p>
                <p className='refund-info-amount'><span>退款总金额</span><span>{ `￥ ${ amount }` }</span></p>
              </div>
            </div>
          }
          {
            status === 8 &&
            <div className='refund-info-common-container'>
              <div className='refund-info-header'>
                <span>已取消</span>
                <span>{ moment('YYYY-MM-DD HH:mm:ss')(updatedAt) }</span>
              </div>
              <div className='refund-info-status'>
                <p className='refund-info-common-header'>因您撤销退款申请，退款已关闭，交易将正常进行</p>
              </div>
            </div>
          }
          {
            status === 11 &&
            <div className='refund-info-common-container'>
              <div className='refund-info-header'>
                <span>等待退款</span>
                <span>{ moment('YYYY-MM-DD HH:mm:ss')(updatedAt) }</span>
              </div>
              <div className='refund-info-status'>
                <p className='refund-info-common-header'>{ displayStatus.split(' ')[1] }</p>
                <p className='refund-info-amount'><span>退款总金额</span><span>{ `￥ ${ amount }` }</span></p>
              </div>
            </div>
          }
          {
            status === 26 &&
            <div className='refund-info-common-container'>
              <div className='refund-info-header'>
                <span>{ displayStatus }</span>
                <span>{ moment('YYYY-MM-DD HH:mm:ss')(updatedAt) }</span>
              </div>
              <div className='refund-info-status'>
                <p className='refund-info-reject'>
                  <span>{ rejectReason }</span>
                  <span>如有异议，可联系平台客服<a href={ `tel:${ enterPrisePhone }` }>{ enterPrisePhone }</a></span>
                </p>
                <p className='refund-info-amount'><span>退款总金额</span><span>{ `￥ ${ amount }` }</span></p>
              </div>
            </div>
          }
          {
            status === 27 &&
            <div className='refund-info-common-container'>
              <div className='refund-info-header'>
                <span>请等待商家处理</span>
                <CountDown endTime={ updatedAt + (24 * 60 * 60 * 1000 * 7) } timeHeader='还剩' />
              </div>
              <div className='refund-info-status'>
                <p className='refund-info-common-header'>您已成功发起退款申请，请耐心等待商家处理</p>
                <p className='font-24-ad'>卖家同意或超时未处理，系统将退款给您<br />如果商家拒绝，您可以修改退款申请再次发起，商家会重新处理</p>
                <p className='apply-button'>
                  <span onClick={ () => handleEidtRefund(originId, originOrderType, id) }>修改申请</span>
                  <span onClick={ () => handleCancelRefund(id, originId, originOrderType) }>撤销申请</span>
                </p>
              </div>
            </div>
          }
          {
            status === 28 &&
            <div className='refund-info-common-container'>
              <div className='refund-info-header'>
                <span>申请已拒绝</span>
              </div>
              <div className='refund-info-status'>
                <p className='refund-info-reject'>
                  <span>{ rejectReason }</span>
                  {
                    isCanApply
                      ? <span>您可以修改退款申请再次发起，商家会重新处理</span>
                      : <span>您可以联系平台客服处理<a href={ `tel:${ enterPrisePhone }` }>{ enterPrisePhone }</a></span>
                  }
                </p>
                {
                  isCanApply ?
                    <p className='apply-button'>
                      <span onClick={ () => handleEidtRefund(originId, originOrderType, id) }>修改申请</span>
                      <span onClick={ () => handleCancelRefund(id, originId, originOrderType) }>撤销申请</span>
                    </p> :
                    <p className='apply-button'>
                      <a href={ `tel:${ services[0].phone }` }>平台客服</a>
                    </p>
                }
              </div>
            </div>
          }
          {
            status === 29 &&
            <div className='refund-info-common-container'>
              <div className='refund-info-header'>
                <span>等待商家收货并退款</span>
                <CountDown endTime={ createdAt + (24 * 60 * 60 * 1000 * 7) } timeHeader='还剩' />
              </div>
              <div className='refund-info-status'>
                <p className='refund-info-common-header'>如果商家收到货并验货无误，将操作退款给您</p>
                <List.Item className='express-show' arrow='horizontal' onClick={ () => Mask(<SlidePage showClose={ false } target='express-slide'><ExpressInfo orderId={ id } /></SlidePage>) }>
                  <p>
                    <span>退货物流：申通快递（402237827382738）</span>
                    <span>已签收,签收人是XXXX</span>
                    <span>2017-8-2 13:04:09</span>
                  </p>
                </List.Item>
                <p className='font-24-ad'>如果商家拒绝退款，需要您修改退货申请。<br />如果商家超时未处理，将自动退款给您</p>
              </div>
            </div>
          }

          <List.Item className='refund-info-history' arrow='horizontal' onClick={ () => Mask(<SlidePage showClose={ false }><ConsultList { ...{ consultList, shopName, shopLogo } } /></SlidePage>) }>协商历史</List.Item>
          <div className='refund-info-detail'>
            <p>退款信息</p>
            {
              specifications.map(o => {
                const { icon, commodityName, specificationName, specificationId } = o
                return (
                  <div className='commodity-info' key={ specificationId }>
                    <h5><img src={ icon } alt={ commodityName } /></h5>
                    <h5>
                      <span>{ commodityName }</span>
                      {
                        specificationName &&
                        <span>{ `已选择 ${ specificationName }` }</span>
                      }
                    </h5>
                  </div>
                )
              })
            }
            <p>{ `退款原因：${ reason }` }</p>
            <p>{ `退款金额：￥${ amount }` }</p>
            <p>{ `退款说明：${ explain }` }</p>
            <p>上传凭证：</p>
            <Grid data={ images }
              columnNum={ 4 }
              renderItem={
                dataItem => (
                  <img src={ dataItem } alt='icon' />
                )
              }
            />
            <p>{ `退款编号：${ id }` }</p>
          </div>
        </div>
      }
      {
        status === 30 &&
        <div className='refund-info'>
          <div className='refund-info-header'>
            <span>商家已同意</span>
            <CountDown endTime={ businessConfirmTime + (24 * 60 * 60 * 1000 * 7) } timeHeader='请在' timeAfter='内发货' />
          </div>
          <InputItem
            placeholder='请填写快递单号'
            onChange={ handleExpressChange }
            className='sc-user-tips express'
            onBlur={ () => handleIptBlur(currentExpressNumber) }
          >
            快递单号
          </InputItem>
          <List.Item extra={ expressName }>物流公司</List.Item>
          <div className='place-button' onClick={ () => placeExpress(expressParas) }>提交</div>
        </div>
      }
    </div>
  )
}

export default RefundInfo
         
 
 
 
 shangcheng/components/user-center/address.js 
 
import React from 'react'
import { setStore } from '@boluome/common-lib'
import { Contact } from '@boluome/oto_saas_web_app_component'

export default class Address extends React.Component {
  constructor(props) {
    super(props)
    console.log(props.test)
  }
  handleChange(contact) {
    setStore('scContact', contact, 'session')
  }
  handleContainerClose() {
    window.history.back()
  }
  render() {
    return <Contact handleChange={ this.handleChange } handleContainerClose={ this.handleContainerClose } />
  }
}
         
 
 
 
 shangcheng/components/user-center/attention-list.js 
 
import React from 'react'
import { Empty } from '@boluome/oto_saas_web_app_component'
import { Icon } from 'antd-mobile'

import '../../styles/user-center/attention-list.scss'

const AttentionList = ({ attentionList, handleCancelAttention, handleBrandClick }) => {
  if (!attentionList) return <div />
  return (
    <div className='attention-list-container'>
      <ul className='attention-list'>
        {
          attentionList.length === 0 &&
          <Empty message='没找到服务和品牌' imgUrl={ require('../../img/no_commodity.png') } style={{ background: '#f5f5f6', height: 'calc(100% - 1rem)' }} />
        }
        {
          attentionList.length >= 1 &&
          attentionList.map(o => <AttentionItem handleCancelAttention={ handleCancelAttention } handleBrandClick={ handleBrandClick } data={ o } key={ o.brandId } />)
        }
      </ul>
    </div>
  )
}

export default AttentionList


class AttentionItem extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      showDel: false,
    }
  }
  handleIconClick(e, showDel) {
    e.stopPropagation()
    this.setState({ showDel })
  }
  render() {
    const { data, handleCancelAttention, handleBrandClick } = this.props
    const { bigLogoImg, brandName, brandId } = data
    const { showDel } = this.state
    return (
      <li className={ showDel ? 'active attention-item' : 'attention-item' }>
        <p onClick={ () => handleBrandClick(brandId) } className='attention-item-left'><img src={ bigLogoImg } alt={ brandName } /></p>
        <div onClick={ () => handleBrandClick(brandId) } className='attention-item-mid'>
          <span>{ `${ brandName }` }</span>
          <Icon onClick={ e => this.handleIconClick(e, !showDel) } type={ require('svg/shangcheng/more_ad.svg') } size='md' />
        </div>
        <p className='attention-item-right' onClick={ () => handleCancelAttention(data) }>
          <Icon type={ require('svg/shangcheng/attention_fill_ff.svg') } size='md' />
          <span className='line-1'>取消关注</span>
        </p>
      </li>
    )
  }
}
         
 
 
 
 shangcheng/components/user-center/collect-list.js 
 
import React from 'react'
import { Empty } from '@boluome/oto_saas_web_app_component'
import { Icon } from 'antd-mobile'

import SellPrice from '../common-component/sell-price'

import '../../styles/user-center/collect-list.scss'

const CollectList = ({ collectList, handleCancelCollect, handleCommdityClick }) => {
  if (!collectList) return <div />
  return (
    <div className='collect-list-container'>
      <ul className='collect-list'>
        {
          collectList.length === 0 &&
          <Empty message='没找到服务和品牌' imgUrl={ require('../../img/no_commodity.png') } style={{ background: '#f5f5f6', height: 'calc(100% - 1rem)' }} />
        }
        {
          collectList.length >= 1 &&
          collectList.map(o => <CollectItem handleCancelCollect={ handleCancelCollect } handleCommdityClick={ handleCommdityClick } data={ o } key={ o.commodityId } />)
        }
      </ul>
    </div>
  )
}

export default CollectList


class CollectItem extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      showDel: false,
    }
  }
  handleIconClick(e, showDel) {
    e.stopPropagation()
    this.setState({ showDel })
  }
  render() {
    const { data, handleCancelCollect, handleCommdityClick } = this.props
    const { banners, commodityDescription, commodityName, commodityId, maxSellPrice, sellPrice } = data
    const { showDel } = this.state
    return (
      <li className={ showDel ? 'active collect-item' : 'collect-item' }>
        <p onClick={ () => handleCommdityClick(commodityId) } className='collect-item-left'><img src={ banners[0] } alt={ commodityName } /></p>
        <div className='collect-item-mid' onClick={ () => handleCommdityClick(commodityId) }>
          <p className='collect-item-mid-top'>
            <span>{ `${ commodityName } ${ commodityDescription }` }</span>
          </p>
          <div className='collect-item-mid-bottom'>
            <SellPrice className='collect-item-mid-bottom' sellPrice={ sellPrice } maxSellPrice={ maxSellPrice } />
            <Icon onClick={ e => this.handleIconClick(e, !showDel) } type={ require('svg/shangcheng/more_ad.svg') } size='md' />
          </div>
        </div>
        <p className='collect-item-right line-1' onClick={ () => handleCancelCollect(commodityId) }>删除</p>
      </li>
    )
  }
}
         
 
 
 
 shangcheng/components/user-center/index.js 
 
import React from 'react'
import { Mask, SlidePage, Empty } from '@boluome/oto_saas_web_app_component'
import { List } from 'antd-mobile'

import '../../styles/user-center/index.scss'


const UserCenter = ({ features, handleFeatureClick, handleOwnClick, handleToAddress }) => {
  if (!features) return <div />
  const noDo = true
  return (
    <div className='my-center'>
      <img src={ require('../../img/user-center-banner.png') } alt='user-center-bg' className='new-user-center-header' />
      <List.Item extra='全部订单' arrow='horizontal' onClick={ () => handleFeatureClick('') }>我的订单</List.Item>
      <ul className='features'>
        {
          features.map((o, i) => (
            <li key={ o.title } onClick={ () => handleFeatureClick(i) }>
              <p>
                <img src={ o.icon } alt={ o.title } />
                {
                  !noDo &&
                  <span className='sc-badge-icon'>无</span>
                }
              </p>
              <p>{ o.title }</p>
            </li>
          ))
        }
      </ul>
      <List.Item arrow='horizontal' onClick={ () =>
        Mask(
          <SlidePage target='right' type='root' >
            <Empty imgUrl={ require('../../img/no-coupon.png') } message='暂无红包～' />
          </SlidePage>
          , { mask: false, style: { position: 'absolute' } }
        )
      }
      >我的红包</List.Item>
      <List.Item arrow='horizontal' onClick={ handleToAddress }>收货地址</List.Item>
      <List.Item arrow='horizontal' onClick={ () => handleOwnClick('collectList') }>我的收藏</List.Item>
      <List.Item arrow='horizontal' onClick={ () => handleOwnClick('attentionList') }>我的关注</List.Item>
    </div>
  )
}

export default UserCenter

  // <div className='user-center-header'>
  //   <p><img src='' alt='用户图片' /></p>
  //   <span>{ userId }</span>
  // </div>
         
 
 
 
 shangcheng/components/user-center/order-detail-mall/default-content.js 
 
import React from 'react'
import { List } from 'antd-mobile'
import moment from 'moment'

import loc from './loc.png'
import expressImg from './express.png'

const Item = List.Item

// 默认显示内容，除非props传值content，否则显示一下内容
export default class DefaultContent extends React.Component {
  handleRefund(id, status, refundOrderId, orderType, shopId, shopOrderType) {
    if (status === 3 || status === 4 || status === 9) window.location.href = `${ window.location.origin }/shangcheng/refund/${ orderType }/${ id }?shopId=${ shopId }&shopOrderType=${ shopOrderType }`
    // 如果属于退款处理中的状态，就跳转至退款信息页面
    else window.location.href = `${ window.location.origin }/shangcheng/refundInfo/refund/${ refundOrderId }`
    // if (status !== 0) window.location.href = `${ window.location.origin }/shangcheng/refundInfo/refund/${ id }`
  }
  getCommodityDisplay(status) {
    switch (status) {
      case 3:
      case 9:
        return '退款'
      case 4:
        return '申请售后'
      case 6:
        return '退款中'
      case 7:
        return '已退款'
      case 11:
        return '等待退款'
      case 27:
        return '退款申请中'
      case 29:
        return '退货中'
      case 30:
        return '等待退货'
      default:
        return ''
    }
  }
  render() {
    const { orderDetailInfo, imgUrl, refundAllOrder } = this.props
    const { brandId, paidAt, paymentSerial, icon, price, createdAt, id, contact = {}, express = {}, subOrders = [], orderType, displayStatus } = orderDetailInfo
    const { name, gender = 0, phone, city, county, address } = contact
    const { expressPrice, expressInfoList = [] } = express
    const createdDate = new Date(createdAt)
    const expressDate = expressInfoList.length > 0 ? expressInfoList[expressInfoList.length - 1].time : ''
    let totalCommodityPrice = 0
    return (
      <div className='DefaultContent-container'>
        <div className='DefaultContent-header-container'>
          <div className='colorful-container'>
            <img src={ imgUrl } alt='colorful-container' />
            { displayStatus }
          </div>
          {
            expressInfoList.length > 0 ?
              <div className='express-container'>
                <img src={ expressImg } alt='colorful-container' />
                <div className='express-box'>
                  <p>{ expressInfoList[0].context }</p>
                  <p>{ expressInfoList[0].time }</p>
                </div>
              </div>
            : ''
          }
          <div className='contact-container'>
            <img src={ loc } alt='colorful-container' />
            <div className='contact-info-box'>
              <p>
                <span>{ name }</span>
                <span>{ gender === 0 ? '先生' : '女士' }</span>
                <span>{ phone }</span>
              </p>
              <p>{ `${ city }${ county }${ address }` }</p>
            </div>
          </div>
        </div>
        <div className='order-info-container'>
          <Item arrow='horizontal' thumb={ icon } onClick={ () => { window.location.href = `${ window.location.origin }/shangcheng/${ brandId }` } }>
            { orderDetailInfo.name }
          </Item>
          {
            subOrders.length > 0 ?
              <div className='commodity-list-container'>
                {
                  subOrders.map(o => {
                    const { commodityName, specificationName, specificationId, unitPrice, purchaseQuantity, applyCount, refundOrderId } = o
                    const commodityStatus = o.status
                    const commodityDisplay = this.getCommodityDisplay(o.status)
                    totalCommodityPrice += unitPrice * purchaseQuantity
                    return (
                      <div className='commodity-list-box' key={ specificationId }>
                        <div className='commodity-img-box'>
                          <img src={ o.icon } alt={ commodityName } />
                        </div>
                        <div className='commodity-info-container'>
                          <div className='commodity-info-box'>
                            <div className='commodityName'>{ commodityName }</div>
                            <div className='specificationName'>{ specificationName }</div>
                          </div>
                          <div className='commodity-price-box'>
                            <span>{ `¥${ unitPrice }` }</span>
                            <span>{ `x${ purchaseQuantity }` }</span>
                          </div>
                        </div>
                        {
                          // 当状态为已支付，已完成，处理中，并且申请退款次数不存在或小于2次时，显示退款／售后按钮
                          commodityDisplay && applyCount !== 2 && !refundAllOrder &&
                          <div className='refund-container'>
                            <span className='refund-box' onClick={ () => this.handleRefund(o.id, commodityStatus, refundOrderId, o.orderType, id, orderType) }>{ commodityDisplay }</span>
                          </div>
                        }
                      </div>
                    )
                  })
                }
                <div className='commodity-sum-price-container'>
                  <p><span>商品总价</span><span>{ `¥ ${ totalCommodityPrice }` }</span></p>
                  <p><span>运送费</span><span>{ `¥ ${ expressPrice }` }</span></p>
                  <p><span>订单总价</span><span>{ `¥ ${ price }` }</span></p>
                  <p><span>实付款</span><span>{ `¥ ${ price }` }</span></p>
                </div>
              </div>
            : ''
          }
        </div>
        <div className='basis-info-container'>
          <p>{ `订单编号：${ id }` }</p>
          {
            paymentSerial &&
            <p>{ `交易流水号：${ paymentSerial }` }</p>
          }
          <p>{ `创建时间：${ moment(createdDate).format('YYYY-MM-DD HH:mm') }` }</p>
          { paidAt ? <p>{ `付款时间：${ moment(paidAt).format('YYYY-MM-DD HH:mm') }` }</p> : '' }
          { expressDate ? <p>{ `发货时间：${ expressDate }` }</p> : '' }
        </div>
      </div>
    )
  }
}
         
 
 
 
 shangcheng/components/user-center/order-detail-mall/index.js 
 
import React, { Component } from 'react'
import { browserHistory } from 'react-router'
import { get, send } from '@boluome/common-lib'
import { Loading, Mask, SlidePage }   from '@boluome/oto_saas_web_app_component'
import { List, Modal } from 'antd-mobile'

import DefaultContent from './default-content'

import './index.scss'
import completed from './completed.png'
import canceled from './canceled.png'
import notpay from './notopay.png'

const Item = List.Item
const alert = Modal.alert

const CloseComponent = () => <div style={{ width: '13%', height: '100%', position: 'fixed', left: '0', fontSize: '.28rem', boxSizing: 'border-box', padding: '65% 4% 0', color: '#fff' }}>点击此处关闭</div>

export default class OrderDetailMall extends Component {
  constructor(props) {
    super(props)
    const { id, orderType } = props
    this.state = {
      id,
      orderType,
    }
  }

  // 根据ID加载订单信息
  componentWillMount() {
    this.fetchOrderInfo()
  }

  // 获取订单信息
  fetchOrderInfo() {
    const { id, orderType } = this.state
    const handleClose = Loading()
    get(`/order/v1/${ orderType }/${ id }/info`)
    .then(({ code, data, message }) => {
      if (code === 0) {
        this.setState({ orderDetailInfo: data })
        this.loadOrderStatus(data)
      } else {
        console.log(message)
      }
      handleClose()
    }).catch(err => {
      console.log(err)
      handleClose()
    })
  }

  // 根据status做映射
  loadOrderStatus(orderDetailInfo) {
    const { status } = orderDetailInfo
    let statusText
    let imgUrl
    switch (status) {
      case 1:
        statusText = '已下单'
        break
      case 2:
        statusText = '待支付'
        imgUrl = notpay
        break
      case 3:
        statusText = '已支付'
        break
      case 4:
        statusText = '已完成'
        imgUrl = completed
        break
      case 5:
        statusText = '取消中'
        break
      case 6:
        statusText = '退款中'
        break
      case 7:
        statusText = '已退款'
        break
      case 8:
        statusText = '已取消'
        imgUrl = canceled
        break
      case 9:
        statusText = '处理中'
        imgUrl = canceled
        break
      default:
        statusText = '未知'
    }
    this.setState({ statusText, imgUrl })
  }

  // 展示时间线默认展示，除非props传timelineShow === false
  showTimeLine() {
    const { orderDetailInfo = {} } = this.state
    // const { timeline_new = [] } = orderDetailInfo
    const timelineNew = orderDetailInfo.timeline_new ? orderDetailInfo.timeline_new : []

    return (
      Mask(
        <SlidePage
          target='right'
          type='root'
          closeComponent={ CloseComponent }
          style={{ width: '100%', backgroundColor: 'transparent', boxSizing: 'border-box', paddingLeft: '13%', right: '0', left: 'inherit' }}
        >
          <div className='timeline-container'>
            {
              timelineNew.length > 0 ?
                <div>
                  {
                    timelineNew.map(({ status, time }, index) => {
                      return (
                        <div className={ index === timelineNew.length - 1 ? 'timeline-box timeline-now' : 'timeline-box' } key={ `timeline${ time }` }>
                          <div className='timeline-point'>
                            <span style={{ backgroundColor: index === timelineNew.length - 1 ? '#ffab00' : '' }} />
                          </div>
                          <span>{ status }</span>
                          <span>{ time }</span>
                        </div>
                      )
                    })
                  }
                </div>
                : ''
            }
            <i className='timeline-line' />
          </div>
        </SlidePage>
      )
    )
  }

  // 取消订单
  cancelOrder() {
    const { orderDetailInfo = {} } = this.state
    const { id, channel, orderType, partnerId } = orderDetailInfo
    alert('', '确定取消该订单?', [
      { text: '取消', onPress: () => console.log('cancel') },
      {
        text:    '确定',
        onPress: () => {
          const handleClose = Loading()
          send('/order/v1/cancel', { id, channel, orderType, partnerId }).then(({ code, data, message }) => {
            if (code === 0) {
              console.log(data)
              // 重新获取订单状态
              this.fetchOrderInfo()
            } else {
              console.log(message)
            }
            handleClose()
          }).catch(err => {
            console.log(err)
            handleClose()
          })
        },
      },
    ])
  }

  // 支付
  handlePay() {
    const { goPay } = this.props
    if (goPay) goPay()
  }

  // 退款
  handleRefund(id, status, refundOrderId, orderType) {
    if (status === 3 || status === 4 || status === 9) window.location.href = `${ window.location.origin }/shangcheng/refund/${ orderType }/${ id }`
    else window.location.href = `${ window.location.origin }/shangcheng/refundInfo/refund/${ refundOrderId }`
    // if (status !== 0) window.location.href = `${ window.location.origin }/shangcheng/refundInfo/refund/${ id }`
  }

  // 获取底部退款按钮的显示文案
  getRefundText(status) {
    switch (status) {
      case 3:
      case 4:
      case 9:
        return '退款'
      case 6:
      case 7:
      case 11:
      case 27:
      case 29:
      case 30:
        return '退款详情'
      default:
        return ''
    }
  }

  // 跳转到评价页面
  handleToEvaluation(id) {
    browserHistory.push(`/shangcheng/evaluate/shop/${ id }`)
  }

  // 打电话功能可能出现特殊打电话的方式
  handleCall(serverPhone, w, mr) {
    const { customer = {} } = window.OTO_SAAS
    const { bridge = {}, isSpecialPhoneCall = false } = customer
    const { specialPhoneCall } = bridge
    return (
      <span style={{ borderWidth: '.01rem', width: w, marginRight: mr }}>
        {
          isSpecialPhoneCall ?
            <span style={{ border: '0' }} onClick={ () => {
              if (isSpecialPhoneCall && specialPhoneCall && typeof specialPhoneCall === 'function') {
                specialPhoneCall(serverPhone)
              } else {
                console.log('isSpecialPhoneCall else', isSpecialPhoneCall, specialPhoneCall)
              }
            } }
            >联系客服</span>
          :
            <a style={{ border: '0' }} href={ `tel:${ serverPhone }` }>联系客服</a>
        }
      </span>
    )
  }

  render() {
    const { statusText, imgUrl, orderDetailInfo } = this.state
    if (!orderDetailInfo) return <div />

    const { content, timelineShow = true, orderType } = this.props
    const { status, services = [], id, refundOrderId, applyCount, multipleRefunds, canAppraise } = orderDetailInfo
    const serverPhone = services.length > 0 ? services[0].phone : ''
    // 是否是整单退
    const refundAllOrder = multipleRefunds === 0

    const refundText = this.getRefundText(status)
    return (
      <div className='orderDetail-container'>
        {
          timelineShow ?
            <div className='order-status'>
              <Item arrow='horizontal' thumb={ imgUrl } onClick={ () => this.showTimeLine() }>
                { statusText }
              </Item>
            </div>
            : ''
        }
        {
          content ?
            <div className='main-container'>
              { React.cloneElement(content, { orderDetailInfo }) }
            </div>
          :
            <DefaultContent { ...{ orderDetailInfo, statusText, imgUrl, orderType, refundAllOrder } } />
        }
        <div className='btn-container'>
          {
            // 全部退款
            refundAllOrder && applyCount !== 2 && (
            status === 2 ?
              <div className='btn-box'>
                <a href={ `tel:${ serverPhone }` } style={{ width: '2.16rem', marginRight: '0.2rem' }}>联系客服</a>
                <span style={{ width: '2.16rem', marginRight: '0.2rem' }} onClick={ () => this.cancelOrder() }>取消订单</span>
                <span style={{ width: '2.16rem', color: '#ffab00', borderColor: '#ffab00' }} onClick={ () => this.handlePay() }>立即支付</span>
              </div>
              : status === 3 ?
                <div className='btn-box'>
                  <span style={{ width: '2.16rem', marginRight: '0.2rem' }} onClick={ () => this.handleRefund(id, status, refundOrderId, orderType) }>{ refundText }</span>
                  <a href={ `tel:${ serverPhone }` } style={{ width: '2.16rem', marginRight: '0.2rem' }}>联系客服</a>
                  <span style={{ width: '2.16rem' }} onClick={ () => this.cancelOrder() }>取消订单</span>
                </div>
                :
                <div className='btn-box'>
                  <span onClick={ () => this.handleRefund(id, status, refundOrderId, orderType) } style={{ width: '3.35rem', marginRight: '0.2rem' }}>{ refundText }</span>
                  <a href={ `tel:${ serverPhone }` } style={{ width: '3.35rem' }}>联系客服</a>
                </div>
            )
          }
          {
            // 部分退款
            (!refundAllOrder || applyCount === 2) && (
            status === 2 ?
              <div className='btn-box'>
                <a href={ `tel:${ serverPhone }` } style={{ width: '2.16rem', marginRight: '0.2rem' }}>联系客服</a>
                <span style={{ width: '2.16rem', marginRight: '0.2rem' }} onClick={ () => this.cancelOrder() }>取消订单</span>
                <span style={{ width: '2.16rem', color: '#ffab00', borderColor: '#ffab00' }} onClick={ () => this.handlePay() }>立即支付</span>
              </div> :
              status === 3 ?
                <div className='btn-box'>
                  <a href={ `tel:${ serverPhone }` } style={{ width: '3.35rem', marginRight: '0.2rem' }}>联系客服</a>
                  <span style={{ width: '3.35rem' }} onClick={ () => this.cancelOrder() }>取消订单</span>
                </div> :
                status === 4 && canAppraise ?
                  <div className='btn-container'>
                    <div className='btn-box'>
                      { this.handleCall(serverPhone, '3.1rem', '.2rem') }
                      <span style={{ borderWidth: '.01rem', width: '3.1rem', color: '#fff', backgroundColor: '#ffab00', borderColor: '#ffab00' }} onClick={ () => this.handleToEvaluation(id) }>评价服务</span>
                    </div>
                  </div> :
                  <div className='btn-box'>
                    <a href={ `tel:${ serverPhone }` } style={{ width: '95%' }}>联系客服</a>
                  </div>
            )
          }
        </div>
      </div>
    )
  }
}
         
 
 
 
 shangcheng/components/user-center/order-detail-mall/index.scss 
 
.orderDetail-container{
  background-color: #f4f4f5;width: 100%;height: 100%;overflow-y: scroll;
  .order-status{
    img{width: 41px;height: 40px;}
  }
  .btn-container{
    width: 100%;height: 120px;border-top: 1px solid #e5e5e5;box-sizing: border-box;background-color: #fff;
    position: absolute;bottom: 0;left: 0;padding: 20px 0;font-size: 34px;color: #999;text-align: center;
    span, a{
      display: inline-block;height: 80px;line-height: 80px;border: 1px solid #999;border-radius: 4px;
      color: #999;
    }
  }
}
.timeline-container{
  background-color: #fff;height: 100%;
  .timeline-box{
    width: 100%;height: 150px;
    span{
      display: inline-block;width: 50%;line-height: 150px;text-align: center;
    }
    .timeline-point{
      width: 10%;height: 100%;text-align: center;line-height: 150px;display: inline-block;vertical-align: top;
      span{
        width: 20px;background-color: #e7e7e7;height: 20px;border-radius: 100%;position: relative;top: 50%;margin-top: -10px;right: -50%;
        z-index: 5;
      }
    }
    span:nth-child(2){
      font-size: 32px;width: 40%;
    }
    span:nth-child(3){
      color: #999;font-size: 26px;
    }
  }
  .timeline-now{
    span:nth-child(2){
      color: #ffab00;
    }
  }
}
.timeline-line{
  width: 1px;height: 100%;display: inline-block;background-color: #d8d8d8;position: absolute;left: 21.7%;top: 0;
}


.DefaultContent-container{
  overflow-y: scroll;height: calc(100% - 120px);
  .DefaultContent-header-container{
    .colorful-container{
      img{
        width: 40px;height: 40px;vertical-align: middle;margin-right: 20px;
      }
      height: 140px;color: #fff;font-size: 32px;line-height: 140px;padding: 0 30px;
      background:#ffab00;background-image:linear-gradient(90deg, rgba(254,87,35,0.35) 2%, rgba(252,32,0,0.80) 100%);
    }
    .contact-container, .express-container{
      height: 143px;background-color: #fff;
      padding: 0 30px;background-position: 30px center;border-bottom: 1px solid #e5e5e5;
        img{
          width: 40px;height: 40px;margin-right: 20px;vertical-align: middle;float: left;margin-top: 45px;
        }
      .contact-info-box, .express-box{
        display: inline-block;width: 85%;height: 100%;
        p:nth-child(1){
          vertical-align: bottom;font-size: 28px;height: 50%;display: inline-block;
          span{
            height: 100%;display: inline-block;line-height: 90px;
          }
          span:nth-child(2){
            margin: 0 15px;
          }
        }
        p:nth-child(2){
          vertical-align: bottom;font-size: 24px;color: #999;line-height: 40px;height: 50%;
        }
      }
    }
    .express-container{
      img{width: 40px}
      .express-box{
        p:nth-child(1){
          padding-top: 20px;height: 60%;
        }
        p:nth-child(2){
          height: 40%;
        }
      }
    }
  }
  .order-info-container{
    background-color: #fff;margin-top: 20px;
    .commodity-list-container{
      .commodity-list-box{
        background-color: #f8f8f8;padding: 20px 30px;margin-top: 10px;
        .commodity-img-box{
          display: inline-block;
          img{
            width: 150px;height: 150px;border-radius: 8px;
          }
        }
        .commodity-info-container{
          display: inline-block;margin-left: 20px;width: calc(100% - 170px);vertical-align: top;
          .commodity-info-box{
            width: 80%;display: inline-block;
            .commodityName{
              font-size: 28px;color: #333;
            }
            .specificationName{
              font-size: 24px;color: #adadad;margin-top: 15px;
            }
          }
          .commodity-price-box{
            display: inline-block;width: 20%;vertical-align: top;
            span{display: block;text-align: right;font-size: 28px;}
            span:nth-child(2){
              font-size: 24px;color: #adadad;margin-top: 10px;
            }
          }
        }
        .refund-container{
          text-align: right;
          .refund-box{
            padding: 0px 20px;height: 50px;background-color: #fff;line-height: 50px;text-align: center;color: #999;
            font-size: 24px;display: inline-block;
          }
        }
      }
      .commodity-sum-price-container{
        background-color: #fff;padding: 0 30px;
        p{
          padding: 15px 0;
          span{font-size: 24px;color: #adadad;}
          span:nth-child(2){float: right;}
        }
        p:nth-child(3){
          padding: 15px 0;
          span{font-size: 24px;color: #333;}
          span:nth-child(1){font-size: 28px;}
          span:nth-child(2){float: right;}
        }
        p:nth-child(4){
          padding: 30px 0;border-top: 1px solid #e5e5e5;
          span{font-size: 32px;color: #333;}
          span:nth-child(1){font-size: 28px;}
          span:nth-child(2){float: right;color: #ff4848;}
        }
      }
    }
    .am-list-line {
      border-bottom: none;
    }
  }
  .basis-info-container{
    padding: 20px 30px;
    background-color: #fff;
    margin-top: 20px;
    margin-bottom: 50px;
    p{
      font-size: 24px;
      color: #adadad;
      height: 50px;
      line-height: 50px;
    }
  }
}
         
 
 
 
 shangcheng/components/user-center/order-detail.js 
 
import React from 'react'
import { afterOrdering } from 'business'

import OrderDetailMall from './order-detail-mall'

// orderId, orderType, goPay, timelineShow

import '../../styles/user-center/order-detail.scss'

const OrderDetail = () => {
  const orderType = location.pathname.split('/')[3]
  const id = location.pathname.split('/')[4]
  return (
    <div className='order-detail'>
      <OrderDetailMall { ...{ orderType, id, goPay: () => afterOrdering({ id }), timelineShow: false } } />
    </div>
  )
}

export default OrderDetail
         
 
 
 
 shangcheng/components/user-center/order-list.js 
 
import React from 'react'
import { Empty, Mask, SlidePage } from '@boluome/oto_saas_web_app_component'
import { Picker, List } from 'antd-mobile'

import ExpressInfo from '../common-component/express-info'

import '../../styles/user-center/order-list.scss'

const OrderList = ({
  handleTabClick, filters, currentFilter, orderList,
  handleDelOrder, handlePayOrder,
  handleCancelOrder, cancelReason, currentReason,
  handleConfirmOrder, handleEvaluateOrder,
  handleOrderClick,
}) => {
  if (!filters || !orderList) return <div />
  if (!currentReason) currentReason = cancelReason[0].value
  return (
    <div className='order-list-container'>
      <ul className='fitlers'>
        {
          filters.map(o => (
            <li className={ currentFilter === o.id ? 'active' : '' } onClick={ () => handleTabClick(o.id) } key={ o.id }>{ o.title }</li>
          ))
        }
      </ul>
      {
        orderList.length === 0 ?
          <Empty imgUrl={ require('../../img/no_order.png') } title='您还没有相关的订单' message='“可以看看有哪些想买的~”' /> :
          <ul className='order-list'>
            {
              orderList.map(oo => <OrderItem { ...{ currentFilter, handleDelOrder, handlePayOrder, cancelReason, handleCancelOrder, currentReason, handleConfirmOrder, handleEvaluateOrder, handleOrderClick } } data={ oo } key={ oo.id } />)
            }
          </ul>
      }
    </div>
  )
}

export default OrderList


const OrderItem = ({
  data, currentFilter, handleDelOrder, handlePayOrder,
  cancelReason, handleCancelOrder, currentReason,
  handleConfirmOrder, handleEvaluateOrder,
  handleOrderClick,
}) => {
  const { name, price, orderType, id, status, commodityStatus, displayStatus, express = {}, icon, commodityList, canAppraise, channel } = data
  const expressPrice = express.expressPrice ? express.expressPrice : 0
  let goodNum = 0
  console.log('commodityList', commodityList)
  return (
    <li className='order-item'>
      <div className='order-item-title' onClick={ () => handleOrderClick(orderType, id) }>
        <p><img src={ icon } alt='business_img' /></p>
        <p>{ name }</p>
        <p>{ displayStatus }</p>
      </div>
      {
        commodityList &&
        commodityList.map(o => {
          const { commodityName, specificationName, specificationId, unitPrice, originalPrice, purchaseQuantity, specificationStatus } = o
          goodNum += purchaseQuantity
          return (
            <div key={ `${ specificationId }${ commodityName }` } className='order-item-info' onClick={ () => handleOrderClick(orderType, id) }>
              <p><img src={ o.icon } alt='business_img' /></p>
              <p>
                <span>{ commodityName }</span>
                {
                  specificationName &&
                  <span>{ `已选择 ${ specificationName }` }</span>
                }
              </p>
              <p>
                <span>{ `￥${ unitPrice }` }</span>
                {
                  originalPrice !== unitPrice &&
                  <del>{ `￥${ originalPrice }` }</del>
                }
                <span>{ `X${ purchaseQuantity }` }</span>
                {
                  specificationStatus &&
                  <span>{ specificationStatus }</span>
                }
              </p>
            </div>
          )
        })
      }
      <p className='order-item-num'>
        <span>{ `共${ goodNum }件商品  合计：¥` }</span>
        <span>{ price }</span>
        <span>{ `（含运费 ¥ ${ expressPrice }）` }</span>
      </p>
      {
        status === 2 &&
        <div className='order-item-edit'>
          <Picker
            data={ cancelReason }
            title='取消原因'
            value={ currentReason }
            cols={ 1 }
            onOk={ v => handleCancelOrder(v, orderType, id, currentFilter, channel) }
          >
            <List.Item className='cancel-order-picker'>取消订单</List.Item>
          </Picker>
          <p className='high-light' onClick={ () => handlePayOrder(data) }>立即支付</p>
        </div>
      }
      {
        status === 9 && commodityStatus === 1 &&
        <div className='order-item-edit'>
          <p onClick={ () => Mask(<SlidePage showClose={ '' } target='express-slide'><ExpressInfo orderId={ id } /></SlidePage>) } >查看物流</p>
          <p onClick={ () => handleConfirmOrder(orderType, id, currentFilter) }>确认收货</p>
        </div>
      }
      {
        status === 4 && Boolean(canAppraise) &&
        <div className='order-item-edit'>
          <p onClick={ () => handleDelOrder(orderType, id, currentFilter) }>删除订单</p>
          <p onClick={ () => handleEvaluateOrder(orderType, id) }>评价</p>
        </div>
      }
      {
        (status === 8 || (status === 4 && !canAppraise)) &&
        <div className='order-item-edit'>
          <p onClick={ () => handleDelOrder(orderType, id, currentFilter) }>删除订单</p>
        </div>
      }
    </li>
  )
}
         
 
 
 
 shangcheng/components/user-center/order.js 
 
import React from 'react'
import { getStore } from '@boluome/common-lib'
import { Mask, SlidePage, ContactShow, Contact, Bill } from '@boluome/oto_saas_web_app_component'
import { InputItem } from 'antd-mobile'

import CartBrandItem from '../cart/cart-brand-item'
import SellPrice from '../common-component/sell-price'

import '../../styles/user-center/order.scss'

export default class Order extends React.Component {
  constructor(props) {
    super(props)
    this.handleAddressClick = this.handleAddressClick.bind(this)
  }
  handleAddressClick() {
    const { handleSelectAddress } = this.props
    const source = getStore('industryCode', 'session')
    Mask(
      <SlidePage target='right' type='root' showClose={ false }>
        <Contact source={ source } handleChange={ contact => handleSelectAddress(contact) } />
      </SlidePage>
      , { mask: false, style: { position: 'absolute' } }
    )
  }
  render() {
    const { contact = '', orderCommoditys, currentFreight, handlePlaceClick, handleRemarkChange, remark = '', handleSelectInvoice, invoiceInfo } = this.props
    if (!orderCommoditys) return <div />
    const canPlace = currentFreight || currentFreight === 0
    const { totalPrice, commodityList } = orderCommoditys
    const currentPrice = currentFreight ? Number(totalPrice) + currentFreight : totalPrice
    const invoiceId = invoiceInfo ? invoiceInfo.id : ''
    let canInvoice = false
    commodityList.forEach(o => {
      if (o.canInvoice) canInvoice = true
    })
    return (
      <div className='order'>
        <ContactShow { ...{ contact, handleSuccess: this.handleAddressClick } } />
        <CartBrandItem isOrderPage={ 1 } data={ orderCommoditys } key={ orderCommoditys.brandId } />
        {
          Boolean(canInvoice) &&
          <Bill billBack={ handleSelectInvoice } />
        }
        <p className='freight'>
          <span>快递费</span>
          {
            currentFreight ? <span>{ `¥ ${ currentFreight }` }</span> : <span>免运费</span>
          }
        </p>
        <InputItem
          placeholder='选填，对本次交易的说明'
          onChange={ handleRemarkChange }
          className='sc-user-tips'
        >
          备注信息
        </InputItem>
        <div className='footer'>
          <span className='footer-left'>合计：</span>
          <SellPrice sellPrice={ currentPrice } />
          <p onClick={ () => canPlace && handlePlaceClick(orderCommoditys, contact, remark, invoiceId) } className={ canPlace ? 'footer-right active' : 'footer-right' }>提交订单</p>
        </div>
      </div>
    )
  }
}
         
 
 
 
 shangcheng/components/user-center/refund-list.js 
 
import React from 'react'
import { Empty } from '@boluome/oto_saas_web_app_component'
import { Icon } from 'antd-mobile'

import '../../styles/user-center/refund-list.scss'

const RefundList = ({ refundList, handleLookRefundOrder }) => {
  if (!refundList) return <div />
  return (
    <div className='refund-list-container'>
      {
        refundList.length === 0 ?
          <Empty imgUrl={ require('../../img/no_order.png') } title='' message='目前没有退款订单~”' /> :
          <ul className='refund-list'>
            {
              refundList.map(o => <RefundItem handleLookRefundOrder={ handleLookRefundOrder } data={ o } key={ o.id } />)
            }
          </ul>
      }
    </div>
  )
}

export default RefundList


const RefundItem = ({ data, handleLookRefundOrder }) => {
  const { shopLogo, shopName, displayStatus, specification = {}, amount, refundType, id, orderType } = data
  const { icon, commodityName, specificationName, purchaseQuantity } = specification
  return (
    <li className='refund-item'>
      <div className='refund-item-title'>
        <p><img src={ shopLogo } alt='business_img' /></p>
        <p>{ shopName }</p>
      </div>
      <div className='refund-item-info'>
        <p className='commodity-img'><img src={ icon } alt='business_img' /></p>
        <div className='refund-item-info-right'>
          <div className='refund-item-info-right-top'>
            <p>
              <span>{ commodityName }</span>
              {
                specificationName &&
                <span>{ `已选择 ${ specificationName }` }</span>
              }
            </p>
            <p>
              <span>{ `X${ purchaseQuantity }` }</span>
            </p>
          </div>
          <div className='refund-item-info-right-bottom'>
            { `退款金额：￥${ amount }` }
          </div>
        </div>
      </div>
      <p className='refund-status'>
        <Icon type={ require('svg/shangcheng/refund_icon.svg') } size='xs' />
        <span>{ refundType === 1 ? '仅退款' : '退货退款' }</span>
        <span>{ displayStatus }</span>
      </p>
      <div className='refund-item-edit'>
        <p onClick={ () => handleLookRefundOrder(orderType, id) }>查看详情</p>
      </div>
    </li>
  )
}
         
 
 
 
 shangcheng/containers/activity/ttth.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { wrap }    from '@boluome/oto_saas_web_app_component'

import Ttth         from '../../components/activity/ttth'

import { getTtthData } from '../../actions/activity/ttth'

const mapStateToProps = ({ ttth }) => {
  const times = [
    { title: '今日特惠', date: 0 },
    { title: '明日预告', date: 1 },
  ]
  return {
    ...ttth,
    times,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleChangeActivityDay(activityDay) {
      const paras = {
        date:             activityDay,
        activityPageCode: 'tiantiantehui',
      }
      dispatch(getTtthData(paras))
    },
    handletoCommodity(commodityId) {
      browserHistory.push(`/shangcheng/commodity?commodityId=${ commodityId }`)
    },
  }
}

const mapFunToComponent  = dispatch => ({
  componentWillMount() {
    // 清空数据
    dispatch({ type: 'SET_TTTH_DATA', ttthData: '', activityDay: '' })
    const paras = {
      date:             0,
      activityPageCode: 'tiantiantehui',
    }
    dispatch(getTtthData(paras))
  },
})

export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(Ttth)
)
         
 
 
 
 shangcheng/containers/activity/year-activity.js 
 
import { connect } from 'react-redux'
import { setStore, getStore } from '@boluome/common-lib'
import { wrap }    from '@boluome/oto_saas_web_app_component'
import { forceCheck } from 'react-lazyload'
import YearActivity         from '../../components/activity/year-activity'

import { getActivities } from '../../actions/activity/year-activity'

const mapStateToProps = ({ yearActivity }) => {
  return {
    ...yearActivity,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleTitleClick(currentActivityIndex) {
      document.querySelector('.year-activity').scrollTop = document.querySelectorAll('.year-activity-item')[currentActivityIndex].offsetTop - document.querySelector('.sub-title').offsetHeight
    },
    handleScroll(e) {
      const { scrollTop } = e.target
      if (scrollTop) {
        if (scrollTop >= (document.querySelector('.banner').offsetHeight - document.querySelector('.sub-titles').offsetHeight)) {
          // 获取当前subTitle的索引
          let currentActivityIndex = 0
          // document.querySelectorAll('.sub-title').forEach((o, i) => {
          //   if (scrollTop > o.offsetTop - (50 * window.devicePixelRatio)) currentActivityIndex = i
          // })
          // 安卓机加上lazyload后使用forEach操作dom报错，该用for循环
          const nodes = document.querySelectorAll('.sub-title')
          for (let i = 0; i < nodes.length; i++) {
            if (scrollTop > nodes[i].offsetTop - (50 * window.devicePixelRatio)) currentActivityIndex = i
          }
          dispatch({ type: 'SET_CURRENT_ACTIVITITY_INDEX', currentActivityIndex })
          // 自动显示在第一个
          document.querySelector('.sub-titles').scrollLeft = document.querySelector('.sub-titles li:nth-of-type(1)').offsetWidth * (currentActivityIndex - 1)
          // 设置显示subTitles条目
          dispatch({ type: 'SHOW_SUB_TITLES', showSubTitles: true })
        } else {
          dispatch({ type: 'SHOW_SUB_TITLES', showSubTitles: false })
        }
      }
      forceCheck()
    },
  }
}

const mapFunToComponent  = dispatch => ({
  componentWillMount() {
    dispatch(getActivities())
  },
  componentDidMount() {
    const yearEndScrollTop = getStore('yearEndScrollTop', 'session')
    console.log('yearEndScrollTop', yearEndScrollTop, document.querySelector('.year-activity'))
    if (yearEndScrollTop && document.querySelector('.year-activity')) document.querySelector('.year-activity').scrollTop = yearEndScrollTop
  },
  componentWillUnmount() {
    const yearEndScrollTop = document.querySelector('.year-activity').scrollTop
    setStore('yearEndScrollTop', yearEndScrollTop, 'session')
  },
})

export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(YearActivity)
)
         
 
 
 
 shangcheng/containers/app.js 
 
/*
  1， 页面中有购物车时，需参见specialty中的三处数据初始化配置：购物车相关，因为是全局购物车，所以购物车数据统一放入app的数据分支中, 所以需要购物车的都要加上app分支加上const { cartCommoditys } = app
  2,  带搜索头部页面zIndex
    默认： 不设置
    不显示底部menus： 1
    省份： 2
    搜索模式底部： 3

  订单商品数据：
  // directOrder:  表示是否是在详情页面直接下单，如果是，就不删除购物车中数据
  {
    "commodityList": [
      {
      "currentPriceInfo": {
      "specificationId":539,
      "sellPrice":8,
      "originalPrice":10,
      "inventory":59,
      "threshold":5,
      "commodityWeight":0.04,
      "specificationItems":[],
      "canService":true
    },
    "buyNum":1,
    "commodityId":220,
    "brandId":140,
    "brandName":"我只有店铺",
    "bigLogoImg":"http://app.static.boluomeet.com/dev/mms/be1b14aa258e48a78a5a269a4136d195.png",
    "banners": ["http://app.static.boluomeet.com/0ae635a1-5177-41fa-9dc2-cd35aad4767a.jpeg"],
    "commodityName":"薄荷茶",
    "commodityDescription":"凉凉",
    "freightPrice":9,
    "purchasesCount":0,
    "specificationsMore":1,
    "city":"抚顺市",
    "province":"辽宁",
    "sellPrice":8,
    "originalPrice":10,
    "commodityStatus":1,
    "brandStatus":6,
    "prices":[{"specificationId":539,"sellPrice":8,"originalPrice":10,"inventory":59,"threshold":5,"commodityWeight":0.04,"specificationItems":[]}],
    "brand":{
    "brandId":140,
    "brandName":"我只有店铺",
    "bigLogoImg":"http://app.static.boluomeet.com/dev/mms/be1b14aa258e48a78a5a269a4136d195.png",
    "servicePhone":"111999",
    "mainCategoryId":194,
    "mainCategoryCode":"mms_nongtechanping",
    "commodityCount":17,
    "brandStatus":6,
    "brandCode":"wozhiyoudianpu",
    "serviceScore":5,
    "expressScore":4.3,
    "commodityScore":5,
    "attentionCount":13
    },
    "commodityDetails":[{ "imgDescription":"http://app.static.boluomeet.com/090aa8dd-5618-42ba-ae38-9abd1c2eafeb.jpg","commodityDetailType":1 }],
    "commentCount":0,
    "goodCommentCount":0,
    "parameters":[],
    "isCollection":false,
    "isNull":true,
    "isSelectCommodity":true
    }
    ],
    "directOrder": true,
    "totalPrice":"8.00",
    "totalNum":1,
    "brandId":140,
    "brandName":"我只有店铺",
    "brandImg":"http://app.static.boluomeet.com/dev/mms/be1b14aa258e48a78a5a269a4136d195.png",
  }

  2, 阿里百川聊天显示：
    1，app(containers)：componentDidMount
    2，app(components)：底部按钮个数
    3，commodity-detail(components)：消息icon入口
*/

import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { getStore, setStore } from '@boluome/common-lib'
import { wrap, Loading }    from '@boluome/oto_saas_web_app_component'
import customize from 'customize'
import { login, getLocationGaode } from 'business'

import App         from '../components/app'

const mapStateToProps = ({ app, message }) => {
  return {
    ...app,
    ...message,
  }
}


const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleChangeMenu(currentMenu) {
      if (currentMenu === 'main') {
        browserHistory.push(getStore('indexUrl', 'session'))
      } else {
        browserHistory.push(`/shangcheng/${ currentMenu }`)
      }
    },
  }
}
const closeLoading = Loading()

const mapFunToComponent  = dispatch => ({
  componentWillMount() {
    // mock_Data
    // setStore('customerUserId', 'blm_', 'session')
    // setStore('userPhone', '18787878787', 'session')
    // setStore('token', '7a08fcd1129a6821f877f0cb7f964249', 'session')

    // 存储基础数据
    setStore('channel_sc', 'shangcheng', 'session')
    if (!getStore('cartCommoditys')) setStore('cartCommoditys', { totalNum: 0, brandList: [] })
    if (!getStore('orderCommoditys')) setStore('orderCommoditys', { totalNum: 0, brandList: [] })

    // 购物车相关
    const cartCommoditys = getStore('cartCommoditys') ? getStore('cartCommoditys') : {}
    dispatch({ type: 'SET_CART_GOODS', cartCommoditys })

    // 登陆
    login(err => {
      if (err) {
        console.log('login err')
      } else {
        console.log('login suc')
        closeLoading()
        if (!getStore('indexUrl', 'session')) {
          setStore('indexUrl', window.location.href, 'session')
          console.log(2323232323232323, getStore('indexUrl', 'session'))
        }
      }
    })
    // 定位
    getLocationGaode(err => {
      if (err) {
        console.log('getLoaction error')
      } else {
        const currentPosition = getStore('currentPosition', 'session')
        const geopoint = getStore('geopoint', 'session')
        const { city, district } = currentPosition
        const selectedCity = { city: city.replace('市', ''), county: district, ...geopoint }
        setStore('selectedCity', selectedCity, 'session')
      }
      closeLoading()
    })
  },
  componentWillReceiveProps() {
    const pathname = location.pathname
    if (pathname.length <= 12 || pathname.indexOf('main') >= 0 || pathname.indexOf('message') >= 0 || pathname.indexOf('cart') >= 0 || pathname.indexOf('userCenter') >= 0) {
      dispatch({ type: 'SET_MENUS_VISIBLE', showMenus: true })
      const currentMenu = location.pathname.split('/')[2] ? location.pathname.split('/')[2] : 'main'
      dispatch({ type: 'SET_CURRENT_MENU', currentMenu })
    } else {
      dispatch({ type: 'SET_MENUS_VISIBLE', showMenus: false })
    }
  },

  // 阿里百川初始化
  // componentDidMount() {
  //   // 获取要聊天的用户
  //   const isPro = !isTest()
  //   const uid = isPro ? getStore('customerUserId', 'session') : '123'
  //   const credential = isPro ? getStore('customerUserId', 'session') : '123'
  //   const appkey = isPro ? '24687881' : '24687881'
  //
  //   const callback = () => {
  //     if (window.WSDK) {
  //       const sdk = new window.WSDK()
  //
  //       // 获取未读消息条数
  //       const getUnreadMsg = () => {
  //         sdk.Base.getUnreadMsgCount({
  //           count: 10,
  //           success({ data }) {
  //             console.log('getUnreadMsgCount', data)
  //             const totalUnreadNum = data.reduce((p, c) => {
  //               return p + c.msgCount
  //             }, 0)
  //             dispatch({ type: 'GET_UNREAD_MSG_COUNT', unreadMsg: data, totalUnreadNum })
  //           },
  //           error(error) {
  //             console.log('获取未读消息的条数失败', error)
  //           },
  //         })
  //       }
  //
  //       // 获取最近联系人
  //       const getRecentContact = () => {
  //         const msgLoading = Loading()
  //         if (sdk) {
  //           sdk.Base.getRecentContact({
  //             count: 10,
  //             success({ data }) {
  //               console.log('getRecentContact', data)
  //               // cnts数组中type：0 文字，1 图片，2 语音
  //               dispatch({ type: 'GET_RECENT_CONTACT', recentContact: data.cnts })
  //               msgLoading()
  //             },
  //             error(error) {
  //               console.log('获取最近联系人及最后一条消息内容失败', error)
  //               msgLoading()
  //             },
  //           })
  //         }
  //       }
  //
  //       // 订阅接受所有消息的事件
  //       const receiveAllMsg = () => {
  //         const Event = sdk.Event
  //         Event.on('START_RECEIVE_ALL_MSG', data => {
  //           console.log('我所有消息都能收到1', data)
  //         })
  //         sdk.Base.startListenAllMsg()
  //       }
  //
  //       // 用户登陆
  //       const baichuanLogin = () => {
  //         sdk.Base.login({
  //           uid,
  //           appkey,
  //           credential,
  //           timeout: 5000,
  //           success(data) {
  //             // {code: 1000, resultText: 'SUCCESS'}
  //             console.log('login success', data)
  //             getUnreadMsg()
  //             getRecentContact()
  //             receiveAllMsg()
  //
  //             // 轮询未读消息
  //             // if (window.unreadTimer) window.unreadTimer = setInterval(getUnreadMsg, 1000)
  //           },
  //           error(error) {
  //             // {code: 1002, resultText: 'TIMEOUT'}
  //             console.log('login fail', error)
  //           },
  //         })
  //       }
  //
  //       // 登陆并轮询获取未读消息(对话框页面，不登陆)
  //       baichuanLogin()
  //     }
  //   }
  //   // 阿里百川sdk加载
  //   if (location.pathname.indexOf('dialog') < 0) {
  //     const url = 'https://g.alicdn.com/aliww/h5.imsdk/2.1.5/scripts/yw/wsdk.js'
  //     appendJs(url, callback)
  //   }
  // },
})

export default customize(
  connect(mapStateToProps, mapDispatchToProps)(
    wrap(mapFunToComponent)(App)
  )
)
         
 
 
 
 shangcheng/containers/brand.js 
 
import { connect } from 'react-redux'
import { setStore } from '@boluome/common-lib'
import { wrap }    from '@boluome/oto_saas_web_app_component'

import Brand         from '../components/brand'

import { getBrandInfo, handleChangeAttention } from '../actions/brand'

const mapStateToProps = ({ brand }) => {
  return {
    ...brand,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleChangeAttention(brandInfo, isAttention) {
      dispatch(handleChangeAttention(brandInfo, isAttention))
    },
  }
}

const mapFunToComponent  = dispatch => ({
  componentWillMount() {
    const brandId = location.pathname.split('/')[2]
    setStore('brandId', brandId, 'session')
    dispatch(getBrandInfo(brandId))
    // 清空上一个商家的相关信息
    dispatch({ type: 'SET_BRAND_Attention', isAttention: undefined })
  },
})

export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(Brand)
)
         
 
 
 
 shangcheng/containers/cart/index.js 
 
/*
  购物车数据格式：
  {
    totalNum,
    brandList: [
      {
        brandId: 商家id,
        brandName: 商家名,
        commodityList: [
          { 商品信息, 商品数量 },
          { 商品信息, 商品数量 },
        ]
      },
      {
        brandId: 商家id,
        brandName: 商家名,
        commodityList: [
          { 商品信息, 商品数量 },
          { 商品信息, 商品数量 },
        ]
      },
    ]
  }
  默认购物车格式：
  {
    totalNum: 0,
  }
*/

import { connect } from 'react-redux'
import { getStore, setStore } from '@boluome/common-lib'
import { wrap }    from '@boluome/oto_saas_web_app_component'

import Cart         from '../../components/cart'

import { checkCartStatus } from '../../actions/common-api'

const mapStateToProps = ({ cart, app }) => {
  const { cartCommoditys } = app
  return {
    ...cart,
    cartCommoditys,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleChangeCommdity(cartCommoditys) {
      setStore('cartCommoditys', cartCommoditys)
      dispatch({ type: 'SET_CART_GOODS', cartCommoditys })
    },
  }
}

const mapFunToComponent  = dispatch => ({
  componentWillMount() {
    // statusChecked默认为false
    dispatch({ type: 'SET_CHECKED_STATUS', statusChecked: false })

    const cartCommoditys = getStore('cartCommoditys')
    // dispatch({ type: 'SET_CART_GOODS', cartCommoditys })
    dispatch(checkCartStatus(cartCommoditys))
  },
})

export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(Cart)
)
         
 
 
 
 shangcheng/containers/common-component/commodity-list.js 
 
import { connect } from 'react-redux'
import { getStore, parseQuery } from '@boluome/common-lib'
import { wrap }    from '@boluome/oto_saas_web_app_component'

import CommodityList         from '../../components/common-component/commodity-list'
import { getCommodityList } from '../../actions/common-component/commodity-list'

const mapStateToProps = ({ commodityList }, props) => {
  const { isBrand } = props
  const filters = [{ name: '价格', code: 'priceDESC' }, { name: '销量', code: 'sales' }, { name: '新品', code: 'new' }]
  // 购物车相关
  return {
    ...commodityList,
    filters,
    isBrand,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleChangeCommodityList(currentFilter, commodityListParas) {
      if (currentFilter.code === 'priceASC') {
        currentFilter.code = 'priceDESC'
      } else if (currentFilter.code === 'priceDESC') {
        currentFilter.code = 'priceASC'
      }
      const url = commodityListParas.url
      const paras = commodityListParas.paras
      paras.filter = currentFilter.code
      dispatch(getCommodityList(url, paras))
      dispatch({ type: 'SET_CURRENT_FILTER', currentFilter })
    },
    handleChangeMode(model) {
      dispatch({ type: 'CHANGE_SHOW_MODE', model })
    },
  }
}

const mapFunToComponent = (dispatch, props) => (
  {
    componentWillMount() {
      // 清空想上一次页面的数据
      dispatch({ type: 'SET_GOOD_LIST', commodityList: '', commodityListParas: '' })

      const { isBrand } = props
      const isBrandCategories = parseQuery(location.search).isBrandCategories
      let url = ''
      let paras = {}
      if (!isBrand && !isBrandCategories) {
        url = '/mall/v1/commodities'
        paras = location.pathname.split('/')[3] === 'all' ? { filter: 'sales' } : { categoryId: location.pathname.split('/')[3], filter: 'sales' }
      }

      if (isBrand) {
        url = '/mall/v1/commodity/list'
        const brandId = getStore('brandId', 'session')
        paras = { brandId, filter: 'sales' }
      }

      if (isBrandCategories) {
        url = '/mall/v1/brand/sort/commoditys'
        const brandId = getStore('brandId', 'session')
        const brandSortId = parseQuery(location.search).brandSortId
        paras = { brandId, brandSortId, filter: 'sales' }
      }
      dispatch(getCommodityList(url, paras))
    },
  }
)

export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(CommodityList)
)
         
 
 
 
 shangcheng/containers/evaluate/evaluate-list.js 
 
import React from 'react'
import { get } from '@boluome/common-lib'
import { Listview, Loading, Empty } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'

import EvaluateItem from '../../components/common-component/evaluate-item'

import '../../styles/evaluate/evaluate-info.scss'

export default class EvaluateList extends React.Component {
  constructor(props) {
    super(props)
    const commodityId = location.pathname.split('/')[3]
    const currentFilter = { code: '0', name: '全部' }
    // isFirst: 第一次请求评价接口
    this.state = {
      currentFilter,
      commodityId,
      offset:  0,
      isFirst: true,
    }
    this.getEvaluates = this.getEvaluates.bind(this)
    this.getCommenetApi = this.getCommenetApi.bind(this)
    // this.getCommenetApi({ filter: '0', commodityId }, data => this.setState({ evaluateAllData: data }))
  }
  handleLabelClickMiddleware(currentFilter) {
    this.setState({ currentFilter, offset: 0 })
  }
  getEvaluates(limit, offset, fetchData, onSuccess) {
    this.onSuccess = onSuccess
    const { currentFilter, commodityId, isFirst } = this.state
    const evaluateParas = { filter: currentFilter.code, commodityId, limit: Math.ceil(offset / limit) ? Math.ceil(offset / limit) : 1, offset: limit }
    const callback = data => {
      const evaluateData = data.commodityOrderCommentBos
      onSuccess(evaluateData)
      if (isFirst) {
        this.setState({ evaluateAllData: data, isFirst: false })
      }
      if (evaluateData.length > 0) this.setState({ offset: offset + limit + 1 })
    }
    this.getCommenetApi(evaluateParas, callback)
  }
  getCommenetApi(paras, callback) {
    const closeLoading = Loading()
    const url = '/mall/v1/commodity/comments'
    get(url, paras).then(({ code, data, message }) => {
      if (code === 0) {
        callback(data)
        // 如果第一次，保存所有资料
        // if (isFirst) this.setState({ evaluateAllData: data })
      } else {
        Toast.fail(message)
      }
      closeLoading()
    })
  }
  render() {
    const datas = [
      { code: '0', name: '全部' },
      { code: '1', name: '好评' },
      { code: '2', name: '中评' },
      { code: '3', name: '差评' },
    ]
    const { currentFilter, offset, evaluateAllData } = this.state
    if (evaluateAllData) {
      const { failCommentCount, goodCommentCount, mediumCommentCount, commentCount } = evaluateAllData
      datas[0].num = commentCount
      datas[1].num = goodCommentCount
      datas[2].num = mediumCommentCount
      datas[3].num = failCommentCount
    }
    // if (!evaluateAllData) return <div />
    return (
      <div className='evaluate-info'>
        <ul className='s-label'>
          {
            evaluateAllData &&
            datas.map(item => <li className={ item.code === currentFilter.code ? 'active' : '' } key={ item.code } onClick={ item.code === currentFilter.code ? '' : () => this.handleLabelClickMiddleware(item) }>{ `${ item.name }(${ item.num })` }</li>)
          }
        </ul>
        <div>
          <Listview
            listItem={ <EvaluateItem /> }
            onFetch={ (limit, ofs, fetchData, onSuccess) => this.getEvaluates(limit, ofs, fetchData, onSuccess) }
            limit={ 20 }
            offset={ offset }
            fetchData={{}}
            dataList={ [] }
            noOneComponent={ <Empty selfClass='no-one-component' message='暂无评论～' imgUrl={ require('../../img/no_evaluate.png') } style={{ background: '#f5f5f6' }} /> }
          />
        </div>
      </div>
    )
  }
}
         
 
 
 
 shangcheng/containers/evaluate/index.js 
 
import { connect } from 'react-redux'
// import { getStore, setStore } from '@boluome/common-lib'
import { wrap }    from '@boluome/oto_saas_web_app_component'
import Evaluate         from '../../components/evaluate'

import { getOrderInfo, placeEvaluate } from '../../actions/evaluate'

const mapStateToProps = ({ evaluate }) => {
  return {
    ...evaluate,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleChangeImg(imgs, specificationId, appraises) {
      appraises[specificationId].imgs = imgs
      dispatch({ type: 'SET_CURRENT_APPRAISES', appraises })
    },
    handleSelectStar(score, specificationId, appraises) {
      appraises[specificationId].score = score
      dispatch({ type: 'SET_CURRENT_APPRAISES', appraises })
    },
    handleTextareaChange(userComment, specificationId, appraises) {
      appraises[specificationId].userComment = userComment
      dispatch({ type: 'SET_CURRENT_APPRAISES', appraises })
    },
    handleButtonClick(paras) {
      dispatch(placeEvaluate(paras))
    },
  }
}

const mapFunToComponent  = dispatch => ({
  componentWillMount() {
    // 首次进入，清除上一个商品评价状态树中的信息
    dispatch({ type: 'SET_CURRENT_APPRAISES', appraises: {} })
    const orderType = location.pathname.split('/')[3]
    const id = location.pathname.split('/')[4]
    dispatch(getOrderInfo(id, orderType))
  },
})

export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(Evaluate)
)
         
 
 
 
 shangcheng/containers/main/categories.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { wrap }    from '@boluome/oto_saas_web_app_component'

import Categories         from '../../components/main/categories'
import { getTopCategories, getSubCategories } from '../../actions/main/categories'

const mapStateToProps = ({ categories }) => {
  return {
    ...categories,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleChangeTop(currentTop) {
      const { categoryId } = currentTop
      dispatch(getSubCategories(categoryId))
      dispatch({ type: 'SET_CURRENT_TOP_CATEGORIES', currentTop: categoryId })
    },
    handleToCommodities(brandType, categoryId, categoryCode) {
      // brandType为1表示商城商品，为0表示到家商品
      if (brandType === 1) {
        browserHistory.push(`/shangcheng/commodityList/${ categoryId }`)
      } else if (brandType === 0) {
        location.href = `${ location.origin }/daojia/${ categoryCode }`
      }
    },
  }
}

const mapFunToComponent  = dispatch => ({
  componentWillMount() {
    // 清空想上一次页面的数据
    dispatch({ type: 'SET_CURRENT_TOP_CATEGORIES', currentTop: '' })

    dispatch(getTopCategories())
  },
})

export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(Categories)
)
         
 
 
 
 shangcheng/containers/main/commodity-detail.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { parseQuery } from '@boluome/common-lib'
import { wrap }    from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { contains, keys, all } from 'ramda'

import CommodityDetail         from '../../components/main/commodity-detail'

import { getCommodityDetail, handleChangeCollect } from '../../actions/main/commodity-detail'
import { checkCommodityStatus } from '../../actions/common-api'

const mapStateToProps = ({ commodityDetail, message }) => {
  const { totalUnreadNum } = message
  return {
    ...commodityDetail,
    totalUnreadNum,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleSelectParams(currentTopParamId, paramsList, prices, parameters, currentNum) {
      // paramsList : { topParamsId: { name: subParamsName, id: subparamsId } }
      // parameters: 先强转一波，保持传入的parameters的纯净
      let newParameters = JSON.parse(JSON.stringify(parameters))
      // topParamsList, subParamsList 分别表示选中的一级规格、二级规格的列表
      const topParamsList = keys(paramsList)
      const subParamsList = topParamsList.map(o => paramsList[o].id)
      // existList: 当前存在的所符合的所有prices组合
      prices.forEach(o => {
        const { specificationItems, inventory } = o
        subParamsList.forEach(oo => {
          // 如果当前标准规格组合中，存在选择的任意一个二级规格且库存小于当前选中商品数量时，
          if (contains(oo)(specificationItems) && inventory < currentNum) {
            // 找到规格列表中对应的规格，添加无库存标记
            newParameters = newParameters.map(t => {
              t.subParameters.map(tt => {
                // 当库存为0时，如果当前二级分类在当前prices的价格列表中且不是选中的二级分类，就添加无库存标记
                if (contains(tt.parameterId)(specificationItems) && !contains(tt.parameterId)(subParamsList)) {
                  tt.noInvertory = true
                }
                return tt
              })
              return t
            })
          }
        })
      })
      let currentPriceInfo = ''
      // 如果选择了当前的所有规格，就将当前的价格保存到规格信息中
      if (subParamsList.length === parameters.length) {
        currentPriceInfo = prices.filter(o => all(e => contains(e)(o.specificationItems))(subParamsList))[0]
      }
      // params: 当前选中的标签列表，newParameters: 带无库存标记的规格列表，currentPriceInfo: 当前规格对应的价格信息(当所有规格选中之后，才有)
      const currentParamsInfo = { paramsList, newParameters, currentPriceInfo }
      dispatch({ type: 'SET_CURRENT_PARAMS', currentParamsInfo })
    },
    handleBrandClick(brandId) {
      browserHistory.push(`/shangcheng/${ brandId }`)
    },
    handleChangePopup(showPopup, buttonType) {
      dispatch({ type: 'SET_POPUP_VISIBLE', showPopup, buttonType })
    },
    handleChangeNum(model, currentNum, currentPriceInfo, checkNum) {
      if (!currentPriceInfo) {
        Toast.info('请选择规格', 1)
        return
      }
      if (model) {
        if (currentNum && checkNum && checkNum <= currentNum) {
          Toast.info('已达到限购数量')
          return
        }
        if (currentNum && currentNum === currentPriceInfo.inventory) {
          Toast.info('已达到库存上限')
          return
        }
        currentNum++
      } else {
        currentNum--
      }
      dispatch({ type: 'SET_CURRENT_NUM', currentNum })
    },
    // allSubSingle: 所有的二级分类都是一个, currentParamsInfo: 当前选中产品参数信息, commodityDetail: 当前商品的详情, currentNum: 当前商品的购买数量, listName: 当前点击的是购物车还是购买按钮, isParasPage: 表示是不是在规格弹出框处，点击的加入购物车或立即购买
    handleClickCartOrPay(currentParamsInfo, commodityDetail, currentNum, listName = 'cartCommoditys', isParasPage = false) {
      // 判断当前规格是否全选，是则生成对应的商品信息，包括数量
      const { paramsList, currentPriceInfo } = currentParamsInfo
      const { parameters } = commodityDetail
      const topParamsList = keys(paramsList)
      console.log(22222, topParamsList, parameters)
      if (topParamsList.length < parameters.length && !all(e => e.subParameters.length === 1)(parameters)) {
        if (isParasPage) {
          let tipParam = ''
          parameters.forEach(o => {
            if (!tipParam && !contains(String(o.parameterId))(topParamsList)) tipParam = o.parameterName
          })
          Toast.info(`请选择${ tipParam }`, 1)
        } else {
          dispatch({ type: 'SET_POPUP_VISIBLE', showPopup: true })
        }
      } else {
        const currentOrderInfo = {
          currentPriceInfo,
          buyNum: currentNum,
          ...commodityDetail,
        }
        dispatch(checkCommodityStatus(currentOrderInfo, listName))
        dispatch({ type: 'SET_POPUP_VISIBLE', showPopup: false })
      }
    },
    handleModalClick() {
      dispatch({ type: 'SET_CURRENT_COMMODITY_STATUS', commodityStatus: '' })
    },
    handleChangeCollect(commodityId, isCollect) {
      dispatch(handleChangeCollect(commodityId, isCollect))
    },
    handleEvaluateClick(commodityId) {
      browserHistory.push(`/shangcheng/evaluateList/${ commodityId }`)
    },
    handleToCart() {
      browserHistory.push('/shangcheng/cart')
    },
    handleToMessage(brandId, brandName) {
      window.location.href = `${ location.origin }/shangcheng/message/dialog?brandId=${ brandId }&brandName=${ brandName }`
      // location.href = window.encodeURIComponent(url)
    },
  }
}

const mapFunToComponent  = dispatch => ({
  componentWillMount() {
    // 清空当前规格信息，避免下一个商品也使用上一个所选的规格
    dispatch({ type: 'SET_CURRENT_PARAMS', currentParamsInfo: { paramsList: {} } })
    const commodityId = parseQuery(location.search).commodityId
    dispatch(getCommodityDetail(commodityId))
    // 清空当前状态树中的上一组数据
    dispatch({ type: 'SET_COMMODITY_DETAIL', commodityDetail: '' })
    dispatch({ type: 'SET_COMMODITY_COLLECT', isCollect: undefined })
    dispatch({ type: 'SET_POPUP_VISIBLE', showPopup: false })
  },
})

export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(CommodityDetail)
)
         
 
 
 
 shangcheng/containers/main/daojia.js 
 
import { connect } from 'react-redux'
// import { browserHistory } from 'react-router'
import { getStore, setStore } from '@boluome/common-lib'
import { wrap }    from '@boluome/oto_saas_web_app_component'
// import { getLoaction } from 'business'

import Daojia         from '../../components/main/daojia'
import { getDaojiaInfo } from '../../actions/main/daojia'

const mapStateToProps = ({ daojia }) => {
  return {
    ...daojia,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleServiceClick(service) {
      location.pathname = `/daojia/${ service.code }`
    },
    handleSelectCity(retrunData) {
      const { city, district, location, name } = retrunData
      const selectedCity = { city, address: name, county: district, latitude: location.lat, longitude: location.lng }
      dispatch({ type: 'SET_DAOJIA_ADDRESS', selectedCity })
      dispatch(getDaojiaInfo(selectedCity))
      setStore('selectedCity', selectedCity, 'session')
    },
  }
}

const mapFunToComponent = dispatch => ({
  componentWillMount() {
    const paras = getStore('selectedCity', 'session')
    dispatch(getDaojiaInfo(paras))

    const selectedCity = getStore('selectedCity', 'session')
    const address = getStore('currentAddress', 'session')
    selectedCity.address = address
    dispatch({ type: 'SET_DAOJIA_ADDRESS', selectedCity })
  },
})

export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(Daojia)
)
         
 
 
 
 shangcheng/containers/main/index.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
// import { getStore, setStore } from '@boluome/common-lib'
import { wrap }    from '@boluome/oto_saas_web_app_component'

import Main         from '../../components/main'
import { getColumns, getNewCommoditys, getRecommends } from '../../actions/main'


const mapStateToProps = ({ main }) => {
  const mockAdList = [
    { img: require('../../img/carousel_1.png'), id: 1 },
    { img: require('../../img/carousel_1.png'), id: 2 },
    { img: require('../../img/carousel_1.png'), id: 3 },
    { img: require('../../img/carousel_1.png'), id: 4 },
  ]
  const columnList = [
    { categoryName: '全部商品', url: '/shangcheng/commodityList/all', icon: require('../../img/market.png') },
    { categoryName: '口碑食品', url: '/shangcheng/commodityList/158', icon: require('../../img/food.png') },
    { categoryName: '订单', url: '/shangcheng/orderList?filter=', icon: require('../../img/order.png') },
    { categoryName: '分类', url: '/shangcheng/categories', icon: require('../../img/category.png') },
  ]
  const categorySecondatys = [
    { title: '珠宝首饰', text: '顺从自然，至臻于美', img: require('../../img/accessories.png'), url: '/shangcheng/commodityList/215', id: 1 },
    { title: '休闲食品', text: '浓情惬意，尽在其中', img: require('../../img/foods.png'), url: '/shangcheng/commodityList/162', id: 2 },
    { title: '农特产品', text: '强国富民，助推三农', img: require('../../img/products.png'), url: '/shangcheng/commodityList/194', id: 3 },
  ]
  return {
    ...main,
    mockAdList,
    columnList,
    categorySecondatys,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleColumnClick(data) {
      const { url } = data
      browserHistory.push(url)
    },
    handleCommodityClick(id) {
      browserHistory.push(`/shangcheng/commodity?commodityId=${ id }`)
    },
    handleCategoryClick(url) {
      browserHistory.push(url)
    },
  }
}

const mapFunToComponent  = dispatch => ({
  componentWillMount() {
    dispatch(getColumns())
    dispatch(getNewCommoditys())
    dispatch(getRecommends())
  },
})

export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(Main)
)
         
 
 
 
 shangcheng/containers/main/market.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { getStore } from '@boluome/common-lib'
import { wrap }    from '@boluome/oto_saas_web_app_component'

import Market         from '../../components/main/market'
import { getMarketCategories, getMarketCommoditys } from '../../actions/main/market'
import { addCommodity } from '../../actions/common-fuc'

const mapStateToProps = ({ market, app }) => {
  const { cartCommoditys } = app
  return {
    ...market,
    cartCommoditys,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleTabClick(tabs) {
      dispatch(getMarketCommoditys(tabs))
    },
    // 购物车相关
    handleAddCommodity(data, cartCommoditys) {
      const currentPriceInfo = data.prices.filter(o => o.inventory)[0]
      data.currentPriceInfo = currentPriceInfo
      data.buyNum = 1
      dispatch(addCommodity(data, cartCommoditys))
    },
    handleChangeMenu(currentMenu) {
      browserHistory.push(`/shangcheng/${ currentMenu }`)
      dispatch({ type: 'SET_CURRENT_MENU', currentMenu })
    },
  }
}

const mapFunToComponent  = dispatch => ({
  componentWillMount() {
    dispatch(getMarketCategories())
    dispatch(getMarketCommoditys())
    const cartCommoditys = getStore('cartCommoditys')
    dispatch({ type: 'SET_CART_GOODS', cartCommoditys })
  },
})

export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(Market)
)
         
 
 
 
 shangcheng/containers/main/specialty.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { getStore } from '@boluome/common-lib'
import { wrap }    from '@boluome/oto_saas_web_app_component'

import Specialty         from '../../components/main/specialty'
import { getSpecialtyCommoditys, getProvince } from '../../actions/main/specialty'
import { addCommodity } from '../../actions/common-fuc'

const mapStateToProps = ({ specialty, app }) => {
  // 购物车相关
  const { cartCommoditys } = app
  return {
    cartCommoditys,
    ...specialty,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleChangeProvince(id) {
      dispatch(getSpecialtyCommoditys(id))
    },
    // 购物车相关
    handleAddCommodity(data, cartCommoditys) {
      const currentPriceInfo = data.prices.filter(o => o.inventory)[0]
      data.currentPriceInfo = currentPriceInfo
      data.buyNum = 1
      dispatch(addCommodity(data, cartCommoditys))
    },
    handleChangeMenu(currentMenu) {
      browserHistory.push(`/shangcheng/${ currentMenu }`)
      dispatch({ type: 'SET_CURRENT_MENU', currentMenu })
    },
    handleToCommodityList(o) {
      browserHistory.push(`/shangcheng/commodityList/${ o.commodityCategoryId }`)
    },
  }
}

const mapFunToComponent  = dispatch => ({
  componentWillMount() {
    dispatch(getSpecialtyCommoditys())
    dispatch(getProvince())
    // 购物车相关
    const cartCommoditys = getStore('cartCommoditys') ? getStore('cartCommoditys') : {}
    dispatch({ type: 'SET_CART_GOODS', cartCommoditys })
  },
})

export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(Specialty)
)
         
 
 
 
 shangcheng/containers/message/index.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
// import { getStore } from '@boluome/common-lib'
import { wrap }    from '@boluome/oto_saas_web_app_component'
// import TopClient from 'node-taobao-topclient'

import Message         from '../../components/message'

const mapStateToProps = ({ message }) => {
  return {
    ...message,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleChangeDialog(brandId, brandName) {
      location.href = `${ location.origin }/shangcheng/message/dialog?brandId=${ brandId }&brandName=${ brandName }`
      browserHistory.push()
    },
  }
}

const mapFunToComponent  = () => ({
  componentWillReceiveProps() {
    //
  },
})

export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(Message)
)
         
 
 
 
 shangcheng/containers/message/message-dialog.js 
 
import React from 'react'
import { browserHistory } from 'react-router'
import { appendJs, getStore, parseQuery } from '@boluome/common-lib'
import { isTest } from 'business'

import '../../styles/message/message-dialog.scss'

export default class MessageDialog extends React.Component {
  constructor(props) {
    super(props)
    console.log(props)
    this.fSize = document.documentElement.style.fontSize
  }
  componentDidMount() {
    // 获取要聊天的用户
    const brandName = parseQuery(location.search).brandName
    const touid = parseQuery(location.search).brandId
    const isPro = !isTest()
    const uid = isPro ? getStore('customerUserId', 'session') : '132'
    const credential = isPro ? getStore('customerUserId', 'session') : '132'
    const appkey = isPro ? '24687881' : '24687881'

    // 阿里百川初始化
    const url = 'https://g.alicdn.com/aliww/??h5.imsdk/2.1.5/scripts/yw/wsdk.js,h5.openim.kit/0.4.0/scripts/kit.js?mobile=1'
    const callback = () => {
      if (window.WKIT) {
        window.WKIT.init({
          uid,
          credential,
          appkey,
          // 需要聊天的用户
          touid,
          // 自定义颜色 (初始化了这些颜色，才会出现对应的类名)
          themeBgColor:     '#f3f3f4',
          msgBgColor:       '#ffab00',
          themeColor:       '#333333',
          title:            brandName,
          // avatar:        'https://otosaas.pek3a.qingstor.com/test/mms/f2169f31-7b84-48c0-a290-1fe70c10b63a.jpg',
          // 隐藏登陆结果提示
          hideLoginSuccess: true,
          // 成功后回调
          onLoginSuccess() {
            const sdk = window.WKIT.Conn.sdk
            // console.log('登陆成功，sdk为：', sdk)
            // 接受当前的所有消息
            sdk.Chat.startListenMsg({ touid })
          },
          // 收到消息后的回调
          onMsgReceived(data) {
            console.log('收到消息：', data)
          },
        })
      }
    }
    appendJs(url, callback)

    // 创建一个店铺的悬浮框
    const business = document.createElement('div')
    business.id = 'business-icon'
    business.innerHTML = `<img src=${ require('../../img/business.png') } alt='business-icon' />`
    business.onclick = () => {
      browserHistory.push(`/shangcheng/${ touid }`)
    }
    document.body.appendChild(business)
    this.business = business
  }
  componentWillUnmount() {
    if (window.WKIT) {
      // const node = document.getElementById('wkit-content')
      window.WKIT.destroy()
      document.documentElement.style.fontSize = this.fSize
      // node.parentNode.removeChild(node)
    }
    // 移除插入的商家按钮标签
    if (this.business) this.business.remove()
  }

  render() {
    return (
      <div />
    )
  }
}
         
 
 
 
 shangcheng/containers/refund/index.js 
 
// 订单详情跳转退款的链接；/shangcheng/refund/mms_nongtechanping/blm001873226498340?specificationId=180

import { connect } from 'react-redux'
import { parseQuery } from '@boluome/common-lib'
import { wrap } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'

import Refund from '../../components/refund'

import { getOrderInfo, placeRefundOrder } from '../../actions/refund'

const mapStateToProps = ({ refund }) => {
  const shopId = parseQuery(location.search).shopId ? parseQuery(location.search).shopId : ''
  const shopOrderType = parseQuery(location.search).shopOrderType
  return {
    ...refund,
    shopId,
    shopOrderType,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleRefundTypeChange(refundType) {
      dispatch({ type: 'SET_CURRENT_REFUND_TYPE', refundType, showRefundReason: true })
    },
    handlePriceChange(refundPrice) {
      refundPrice = refundPrice.substring(2)
      dispatch({ type: 'SET_CURRENT_REFUND_PRICE', refundPrice })
    },
    handleRemarkChange(remark) {
      dispatch({ type: 'SET_REFUND_REMARK', remark })
    },
    handleCommodityStatus(currentCommodityStatus) {
      dispatch({ type: 'SET_CURRENT_COMMODITY_STATUS', currentCommodityStatus })
    },
    handleSelectReason(currentReason) {
      dispatch({ type: 'SET_CURRENT_REASON', currentReason })
    },
    placeRefund(paras, maxPrice) {
      if (!paras.commodityStatus) {
        Toast.info('请选择货物状态')
        return
      }
      if (!paras.reason) {
        Toast.info('请选择退款原因')
        return
      }
      if (paras.amount === '') {
        Toast.info('请输入退款金额')
        return
      }
      if (paras.amount > maxPrice) {
        dispatch({ type: 'CHANGE_PRICE_MODAL_VISIBEL', priceModalVisible: true })
        return
      }
      dispatch(placeRefundOrder(paras))
    },
    // 隐藏价格警告框
    handleHidePriceModal() {
      dispatch({ type: 'CHANGE_PRICE_MODAL_VISIBEL', priceModalVisible: false })
    },
    handleChangeImg(uploadImgs) {
      dispatch({ type: 'SET_UPDATE_IMGS', uploadImgs })
    },
  }
}

const mapFunToComponent = dispatch => {
  return {
    componentWillMount() {
      const orderType = location.pathname.split('/')[3]
      const id = location.pathname.split('/')[4]
      dispatch(getOrderInfo(id, orderType))
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(wrap(mapFunToComponent)(Refund))
         
 
 
 
 shangcheng/containers/refund/refund-info.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
// import { parseQuery } from '@boluome/common-lib'
import { wrap } from '@boluome/oto_saas_web_app_component'
import { Toast, Modal } from 'antd-mobile'

import RefundInfo from '../../components/refund/refund-info'

import { getRefundInfo, refundCancel, getExpressInfo, placeExpress } from '../../actions/refund/refund-info'

const mapStateToProps = ({ refundInfo }) => {
  return {
    ...refundInfo,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleEidtRefund(id, originOrderType, refundId, specificationId) {
      clearInterval(window.countdown)
      browserHistory.push(`/shangcheng/refund/${ originOrderType }/${ id }?refundId=${ refundId }&specificationId=${ specificationId }`)
    },
    handleCancelRefund(id, originId, originOrderType) {
      const cancelFn = () => {
        clearInterval(window.countdown)
        dispatch(refundCancel(id, originId, originOrderType))
      }
      Modal.alert('温馨提示', '退款申请仅可发起2次，确定撤销吗？', [
        { text: '取消', onPress: () => console.log('cancel') },
        { text: '确定', onPress: cancelFn },
      ])
    },
    handleExpressChange(currentExpressNumber) {
      dispatch({ type: 'CHANGE_EXPRESS_NUMBER', currentExpressNumber })
    },
    handleIptBlur(currentExpressNumber) {
      dispatch(getExpressInfo(currentExpressNumber))
    },
    placeExpress(paras) {
      if (!paras.express.name) {
        Toast.info('请填写正确的物流单号')
        return
      }
      dispatch(placeExpress(paras))
    },
  }
}

const mapFunToComponent = dispatch => {
  return {
    componentWillMount() {
      dispatch(getRefundInfo())
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(wrap(mapFunToComponent)(RefundInfo))
         
 
 
 
 shangcheng/containers/user-center/attention-list.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
// import { parseQuery } from '@boluome/common-lib'
import { wrap } from '@boluome/oto_saas_web_app_component'

import AttentionList from '../../components/user-center/attention-list'

import { getAttentionList, handleChangeAttention } from '../../actions/brand'

const mapStateToProps = ({ attentionList }) => {
  return {
    ...attentionList,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleCancelAttention(brandInfo) {
      dispatch(handleChangeAttention(brandInfo, false, true))
    },
    handleBrandClick(brandId) {
      browserHistory.push(`/shangcheng/${ brandId }`)
    },
  }
}

const mapFunToComponent = dispatch => {
  return {
    componentWillMount() {
      dispatch(getAttentionList())
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(wrap(mapFunToComponent)(AttentionList))
         
 
 
 
 shangcheng/containers/user-center/collect-list.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
// import { parseQuery } from '@boluome/common-lib'
import { wrap } from '@boluome/oto_saas_web_app_component'

import CollectList from '../../components/user-center/collect-list'

import { getCollectList, handleChangeCollect } from '../../actions/main/commodity-detail'

const mapStateToProps = ({ collectList }) => {
  console.log('collectList', collectList)
  return {
    ...collectList,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleCancelCollect(commodityId) {
      dispatch(handleChangeCollect(commodityId, false, true))
    },
    handleCommdityClick(commodityId) {
      browserHistory.push(`/shangcheng/commodity?commodityId=${ commodityId }`)
    },
  }
}

const mapFunToComponent = dispatch => {
  return {
    componentWillMount() {
      dispatch(getCollectList())
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(wrap(mapFunToComponent)(CollectList))
         
 
 
 
 shangcheng/containers/user-center/index.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { getStore } from '@boluome/common-lib'
import { wrap, Mask }    from '@boluome/oto_saas_web_app_component'

import UserCenter         from '../../components/user-center'

const mapStateToProps = ({ userCenter }) => {
  const features = [
    { title: '待付款', icon: require('../../img/feature_1.png') },
    { title: '待发货', icon: require('../../img/feature_2.png') },
    { title: '待收货', icon: require('../../img/feature_3.png') },
    { title: '待评价', icon: require('../../img/feature_4.png') },
    { title: '退款/售后', icon: require('../../img/feature_5.png') },
  ]
  const userId = getStore('customerUserId', 'session')
  return {
    ...userCenter,
    features,
    userId,
  }
}

const mapDispatchToProps = dispatch => ({
  dispatch,
  handleFeatureClick(filter) {
    if (filter <= 3) {
      browserHistory.push(`/shangcheng/orderList?filter=${ filter }`)
    } else {
      browserHistory.push('/shangcheng/refundList')
    }
  },
  handleOwnClick(url) {
    browserHistory.push(`/shangcheng/${ url }`)
  },
  handleToAddress() {
    browserHistory.push('/shangcheng/address')
  },
})

const mapFunToComponent  = () => ({
  componentWillMount() {
    Mask.closeAll()
  },
})

export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(UserCenter)
)
         
 
 
 
 shangcheng/containers/user-center/order-list.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { parseQuery } from '@boluome/common-lib'
import { wrap } from '@boluome/oto_saas_web_app_component'
import { Modal } from 'antd-mobile'
import { afterOrdering } from 'business'

import OrderList from '../../components/user-center/order-list'

import { getOrderList } from '../../actions/user-center/order-list'
import { handleDelOrder, handleCancelOrder, handleConfirmOrder } from '../../actions/order-edit'

const mapStateToProps = ({ orderList }) => {
  const cancelReason = [
    { label: '我不想买了', value: '我不想买了' },
    { label: '信息填写错误，重新拍', value: '信息填写错误，重新拍' },
    { label: '卖家缺货', value: '卖家缺货' },
  ]
  return {
    ...orderList,
    cancelReason,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleTabClick(currentFilter) {
      dispatch({ type: 'SET_FILTER', currentFilter })
      dispatch(getOrderList(currentFilter))
    },
    handleCancelOrder(currentReason, orderType, id, filter, channel) {
      console.log('currentReason', currentReason)
      dispatch({ type: 'SET_CURRENT_CANCEL_REASON', currentReason })
      const paras = {
        reason: currentReason,
        orderType,
        id,
        channel,
      }
      dispatch(handleCancelOrder(paras, filter))
    },
    handleDelOrder(orderType, id, filter) {
      Modal.alert('温馨提示', '删除后不可恢复，确认删除订单？', [
        { text: '取消', onPress: () => console.log('cancel') },
        { text: '确定', onPress: () => dispatch(handleDelOrder(orderType, id, filter)) },
      ])
    },
    handlePayOrder(data) {
      afterOrdering(data)
    },
    handleEvaluateOrder(orderType, id) {
      browserHistory.push(`/shangcheng/evaluate/${ orderType }/${ id }`)
    },
    handleConfirmOrder(orderType, id, filter) {
      Modal.alert('温馨提示', '请确认已收到货物没有问题，确认后不可取消操作。', [
        { text: '取消', onPress: () => console.log('cancel') },
        { text: '确定', onPress: () => dispatch(handleConfirmOrder(id, orderType, filter)) },
      ])
    },
    handleOrderClick(orderType, id) {
      browserHistory.push(`/shangcheng/order/${ orderType }/${ id }`)
    },
  }
}

const mapFunToComponent = dispatch => {
  return {
    componentWillMount() {
      const filters = [
        { title: '全部', id: '' },
        { title: '待付款', id: '0' },
        { title: '待发货', id: '1' },
        { title: '待收货', id: '2' },
        { title: '待评价', id: '3' },
      ]
      const currentFilter = parseQuery(location.search).filter || parseQuery(location.search).filter === 0 ? parseQuery(location.search).filter : filters[0].id
      dispatch({ type: 'SET_FILTER', filters, currentFilter })
      dispatch(getOrderList(currentFilter))
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(wrap(mapFunToComponent)(OrderList))
         
 
 
 
 shangcheng/containers/user-center/order.js 
 
import { connect } from 'react-redux'
import { getStore, setStore } from '@boluome/common-lib'
import { wrap } from '@boluome/oto_saas_web_app_component'

import Order from '../../components/user-center/order'

import { getBestAddress, changeAddress, placeOrder } from '../../actions/user-center/order'

const mapStateToProps = ({ order }) => {
  const orderCommoditys = getStore('orderCommoditys')
  return {
    ...order,
    orderCommoditys,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleSelectAddress(contact) {
      dispatch({ type: 'SET_CURRENT_ADDRESS', contact })
      dispatch(changeAddress(contact))
    },
    handleRemarkChange(remark) {
      dispatch({ type: 'SET_CURRENT_REMARK', remark })
    },
    handlePlaceClick(orderCommoditys, contact, remark, invoiceId) {
      const { brandId, brandName, directOrder } = orderCommoditys
      const { contactId, province } = contact
      const paras = {
        contactId,
        province,
        invoiceId,
        brands: [
          {
            brandDescription: brandName,
            brandId,
          },
        ],
      }
      if (remark) paras.remark = remark
      dispatch(placeOrder(paras, directOrder))
    },
    handleSelectInvoice(invoiceInfo) {
      console.log('invoiceInfo', invoiceInfo)
      dispatch({ type: 'SET_INVOICE_INFO', invoiceInfo })
    },
  }
}

// 将当前的订单商品对应的运费参数，抽取出来，存入本地，供计算运费时使用
const getFreightParas = () => {
  const orderCommoditys = getStore('orderCommoditys')
  const { brandId, commodityList } = orderCommoditys
  // 将订单商品列表中的相同商品不同规格的商品合并为同一个商品，commodities为结果
  const commodities = []
  commodityList.forEach(o => {
    // inP：是否已存在当前列表中
    let inP = false
    const currentSpecificationFreigts = { specificationId: o.currentPriceInfo.specificationId, specificationName: o.currentPriceInfo.specificationName, count: o.buyNum }
    // 如果在已有列表中，将规格合并到已有商品的规格列表中
    commodities.map(oo => {
      if (oo.commodityId === o.commodityId) {
        inP = true
        oo.specifications.push(currentSpecificationFreigts)
      }
      return oo
    })
    // 如果不在已有列表中，新建一个商品，插入到已有商品列表
    if (!inP) {
      commodities.push({ commodityId: o.commodityId, commodityDescription: o.commodityDescription, specifications: [currentSpecificationFreigts], commodityType: o.commodityType })
    }
    return commodities
  })

  const freightParas = {
    brands: [
      {
        brandId,
        commodities,
      },
    ],
  }
  setStore('freightParas', freightParas, 'session')
  setStore('orderParasCommodities', commodities, 'session')
}

const mapFunToComponent = dispatch => {
  return {
    componentWillMount() {
      getFreightParas()
      dispatch(getBestAddress())
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(wrap(mapFunToComponent)(Order))
         
 
 
 
 shangcheng/containers/user-center/refund-list.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
// import { parseQuery } from '@boluome/common-lib'
import { wrap } from '@boluome/oto_saas_web_app_component'

import RefundList from '../../components/user-center/refund-list'

import { getRefundList } from '../../actions/user-center/refund-list'

const mapStateToProps = ({ refundList }) => {
  return {
    ...refundList,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleLookRefundOrder(orderType, id) {
      browserHistory.push(`/shangcheng/refundInfo/${ orderType }/${ id }`)
    },
  }
}

const mapFunToComponent = dispatch => {
  return {
    componentWillMount() {
      dispatch(getRefundList())
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(wrap(mapFunToComponent)(RefundList))
         
 
 
 
 shangcheng/index.js 
 
import React        from 'react'
import { createStore, applyMiddleware } from 'redux'
import { render }   from 'react-dom'
import { Provider } from 'react-redux'
import thunk        from 'redux-thunk'
import reducers     from './reducers'
import Routes       from './routes'

// 定义根组件
const Root  = () => (
  <Provider store={ createStore(reducers, applyMiddleware(thunk)) }>
    <Routes />
  </Provider>
)
render(<Root />, document.querySelector('#root'))
         
 
 
 
 shangcheng/reducers/activity/ttth.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const ttth = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_TTTH_DATA':
      return mergeState(state, action)
    default:
      return state
  }
}

export default ttth
         
 
 
 
 shangcheng/reducers/activity/year-activity.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const YearActivity = (state = initialState, action) => {
  switch (action.type) {
    case 'GET_ACTIVITIES':
    case 'SET_CURRENT_ACTIVITITY_INDEX':
    case 'SHOW_SUB_TITLES':
      return mergeState(state, action)
    default:
      return state
  }
}

export default YearActivity
         
 
 
 
 shangcheng/reducers/app.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {
  title: 'shangcheng',
}

const app = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_MAIN_MENUS':
    case 'SET_CURRENT_MENU':
    case 'SET_MENUS_VISIBLE':
      return mergeState(state, action)
    case 'SET_CART_GOODS':
      // 当商家下没有商品时，删掉该商家
      console.log('action.cartCommoditys', action.cartCommoditys)
      if (action.cartCommoditys && action.cartCommoditys.brandList) action.cartCommoditys.brandList = action.cartCommoditys.brandList.filter(o => o.commodityList.length !== 0)
      return mergeState(state, action)
    default:
      return state
  }
}

export default app
         
 
 
 
 shangcheng/reducers/brand.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const brand = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_BRAND_INFO':
    case 'SET_BRAND_COMMODITY_LIST':
    case 'SET_BRAND_Attention':
      return mergeState(state, action)
    default:
      return state
  }
}

export default brand
         
 
 
 
 shangcheng/reducers/cart/index.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const cart = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_SELECT_GOODS':
    case 'SET_CART_COMMODITYS':
    case 'SET_CHECKED_STATUS':
      return mergeState(state, action)
    default:
      return state
  }
}

export default cart
         
 
 
 
 shangcheng/reducers/common-component/commodity-list.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const commodityList = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_GOOD_LIST':
    case 'SET_CURRENT_FILTER':
    case 'CHANGE_SHOW_MODE':
      return mergeState(state, action)
    default:
      return state
  }
}

export default commodityList
         
 
 
 
 shangcheng/reducers/evaluate/index.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const evaluate = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_EVALUATE_ORDER_INFO':
    case 'SET_CURRENT_APPRAISES':
      return mergeState(state, action)
    default:
      return state
  }
}

export default evaluate
         
 
 
 
 shangcheng/reducers/index.js 
 
import { combineReducers } from 'redux'
// 引入reducers
import app  from './app'
import main  from './main'
import market  from './main/market'
import daojia  from './main/daojia'
import specialty  from './main/specialty'
import categories  from './main/categories'
import commodityList  from './common-component/commodity-list'
import commodityDetail  from './main/commodity-detail'
import brand  from './brand'
import cart  from './cart'
import userCenter  from './user-center'
import order  from './user-center/order'
import orderList  from './user-center/order-list'
import collectList  from './user-center/collect-list'
import attentionList  from './user-center/attention-list'
import evaluate  from './evaluate'
import refundList  from './user-center/refund-list'
import refund  from './refund'
import refundInfo  from './refund/refund-info'
// massge
import message  from './message'
// activity
import yearActivity from './activity/year-activity'
import ttth from './activity/ttth'

// 组合reducers
export default combineReducers({
  app,
  main,
  market,
  daojia,
  cart,
  userCenter,
  specialty,
  categories,
  commodityList,
  commodityDetail,
  brand,
  order,
  orderList,
  collectList,
  attentionList,
  evaluate,
  refundList,
  refund,
  refundInfo,
  message,
  yearActivity,
  ttth,
})
         
 
 
 
 shangcheng/reducers/main/categories.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const categories = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_TOP_CATEGORIES':
    case 'SET_SUB_CATEGORIES':
    case 'SET_CURRENT_TOP_CATEGORIES':
      return mergeState(state, action)
    default:
      return state
  }
}

export default categories
         
 
 
 
 shangcheng/reducers/main/commodity-detail.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const commodityDetail = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_COMMODITY_DETAIL':
    case 'SET_CURRENT_PARAMS':
    case 'SET_POPUP_VISIBLE':
    case 'SET_CURRENT_NUM':
    case 'SET_CURRENT_COMMODITY_STATUS':
    case 'SET_COMMODITY_COLLECT':
      return mergeState(state, action)
    default:
      return state
  }
}

export default commodityDetail
         
 
 
 
 shangcheng/reducers/main/daojia.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const daojia = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_DAOJIA_INFO':
    case 'SET_DAOJIA_ADDRESS':
      return mergeState(state, action)
    default:
      return state
  }
}

export default daojia
         
 
 
 
 shangcheng/reducers/main/index.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const app = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_MAIN_COLUMNS':
    case 'SET_MAIN_RECOMMENDATION':
    case 'SET_MAIN_NEW_COMMODITYS':
      return mergeState(state, action)
    default:
      return state
  }
}

export default app
         
 
 
 
 shangcheng/reducers/main/market.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const market = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_MARKET_CATEGORIES':
    case 'SET_MARKET_GOODS':
      return mergeState(state, action)
    default:
      return state
  }
}

export default market
         
 
 
 
 shangcheng/reducers/main/specialty.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const specialty = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_SPECIALTY_GOODS':
    case 'SET_SPECIALTY_PROVINCE':
      return mergeState(state, action)
    default:
      return state
  }
}

export default specialty
         
 
 
 
 shangcheng/reducers/message/index.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const message = (state = initialState, action) => {
  switch (action.type) {
    case 'GET_UNREAD_MSG_COUNT':
    case 'GET_RECENT_CONTACT':
      return mergeState(state, action)
    default:
      return state
  }
}

export default message
         
 
 
 
 shangcheng/reducers/refund/express-info.js 
 
import React from 'react'

const ExpressInfo = () => {
  return (
    <div className='express-info-slide'>
      <div className='express-info-slide-header'>
        <p><img src={  } alt='good-info' /></p>
      </div>

    </div>
  )
}

export default ExpressInfo
         
 
 
 
 shangcheng/reducers/refund/index.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const refund = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_CURRENT_REFUND_TYPE':
    case 'SET_CURRENT_ORDER_INFO':
    case 'SET_CURRENT_REFUND_PRICE':
    case 'SET_REFUND_REMARK':
    case 'SET_CURRENT_COMMODITY_STATUS':
    case 'SET_CURRENT_REASON':
    case 'CHANGE_PRICE_MODAL_VISIBEL':
    case 'SET_UPDATE_IMGS':
      return mergeState(state, action)
    default:
      return state
  }
}

export default refund
         
 
 
 
 shangcheng/reducers/refund/refund-info.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const refundInfo = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_CURRENT_REFUND_INFO':
    case 'SET_CURRENT_EXPRESS_INFO':
    case 'CHANGE_EXPRESS_NUMBER':
      return mergeState(state, action)
    default:
      return state
  }
}

export default refundInfo
         
 
 
 
 shangcheng/reducers/user-center/attention-list.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const attentionList = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_ATTENTION_LIST':
      return mergeState(state, action)
    default:
      return state
  }
}

export default attentionList
         
 
 
 
 shangcheng/reducers/user-center/collect-list.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const collectList = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_COLLECT_LIST':
      return mergeState(state, action)
    default:
      return state
  }
}

export default collectList
         
 
 
 
 shangcheng/reducers/user-center/index.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const userCenter = (state = initialState, action) => {
  switch (action.type) {
    case 'TEST':
      return mergeState(state, action)
    default:
      return state
  }
}

export default userCenter
         
 
 
 
 shangcheng/reducers/user-center/order-list.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const orderList = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_FILTER':
    case 'SET_ORDER_LIST':
    case 'SET_CURRENT_CANCEL_REASON':
      return mergeState(state, action)
    default:
      return state
  }
}

export default orderList
         
 
 
 
 shangcheng/reducers/user-center/order.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const order = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_ADDRESS_AVAIL':
    case 'SET_CURRENT_ADDRESS':
    case 'SET_CURRENT_FREIGHT':
    case 'SET_CURRENT_FREIGHT_PARAS':
    case 'SET_CURRENT_REMARK':
    case 'SET_INVOICE_INFO':
      return mergeState(state, action)
    default:
      return state
  }
}

export default order
         
 
 
 
 shangcheng/reducers/user-center/refund-list.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const refundList = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_REFUND_LIST':
      return mergeState(state, action)
    default:
      return state
  }
}

export default refundList
         
 
 
 
 shangcheng/routes.js 
 
import React from 'react'
import { Router, Route, browserHistory, IndexRoute } from 'react-router'
// 路由配置
const Routes = () => (
  <Router history={ browserHistory } >
    <Route path='/shangcheng' component={ require('react-router?name=app!./containers/app') } >
      <IndexRoute component={ require('react-router?name=main!./containers/main') } />
      <Route path='main' component={ require('react-router?name=main!./containers/main') } />
      <Route path='market' component={ require('react-router?name=market!./containers/main/market') } />
      <Route path='daojia' component={ require('react-router?name=daojia!./containers/main/daojia') } />
      <Route path='specialty' component={ require('react-router?name=specialty!./containers/main/specialty') } />
      <Route path='categories' component={ require('react-router?name=categories!./containers/main/categories') } />
      <Route path='commodityList/:categoryId' component={ require('react-router?name=commodity-list!./containers/common-component/commodity-list') } />
      <Route path='commodity' component={ require('react-router?name=commodity!./containers/main/commodity-detail') } />
      <Route path='cart' component={ require('react-router?name=cart!./containers/cart') } />
      <Route path='userCenter' component={ require('react-router?name=user-center!./containers/user-center') } />
      <Route path='address' component={ require('react-router?name=address!./components/user-center/address') } />
      <Route path='activity' component={ require('react-router?name=activity!./components/activity') }>
        <Route path='year' component={ require('react-router?name=year!./containers/activity/year-activity') } />
        <Route path='ttth' component={ require('react-router?name=ttth!./containers/activity/ttth') } />
      </Route>
      <Route path='order'>
        <IndexRoute component={ require('react-router?name=order!./containers/user-center/order') } />
        <Route path=':orderType/:orderId' component={ require('react-router?name=order-detail!./components/user-center/order-detail') } />
      </Route>
      <Route path='orderList' component={ require('react-router?name=order-list!./containers/user-center/order-list') } />
      <Route path='collectList' component={ require('react-router?name=collect-list!./containers/user-center/collect-list') } />
      <Route path='attentionList' component={ require('react-router?name=attention-list!./containers/user-center/attention-list') } />
      <Route path='evaluate/:orderType/:orderId' component={ require('react-router?name=attention-list!./containers/evaluate') } />
      <Route path='evaluateList/:commodityId' component={ require('react-router?name=attention-list!./containers/evaluate/evaluate-list') } />
      <Route path='refundList' component={ require('react-router?name=refund-list!./containers/user-center/refund-list') } />
      <Route path='refund/:orderType/:orderId' component={ require('react-router?name=refund!./containers/refund') } />
      <Route path='refundInfo/:orderType/:orderId' component={ require('react-router?name=refundInfo!./containers/refund/refund-info') } />
      <Route path='message'>
        <IndexRoute component={ require('react-router?name=message!./containers/message') } />
        <Route path='dialog' component={ require('react-router?name=message-dialog!./containers/message/message-dialog') } />
      </Route>
      <Route path=':brandId' component={ require('react-router?name=brand!./containers/brand') } />
    </Route>
  </Router>
)
export default Routes


/*
  commodity:    /shangcheng/commodity?commodityId=${ commodityId }
  orderList:    /shangcheng/orderList?filter=${ filter }
  orderDetail:  /shangcheng/order/${ orderType }/${ orderId }
  evaluate:     /shangcheng/evaluate/${ orderType }/${ orderId }
  evaluateList: /shangcheng/evaluateList/${ orderId }
  refund:       /shangcheng/refund/:orderType/:orderId?specificationId=${ specificationId }
  messageDialog: /shangcheng/dialog?brandId=132&brandName=132
  brand:         /shangcheng/${ brandId }
*/
         
 
 
 
 shangcheng/styles/activity/ttth.scss 
 
@import "../common.scss";

.ttth {
  height: 100%;
  overflow: auto;
  /* 公共样式*/
  .activity-btn {
    @include s_blockDemo(120px, 48px);
    @include s_fontDemo(28px, 48px, #fff);
    background: $font-f48;
    border-radius: 4px;
    text-align: center;
  }
  .disable {
    background: #e5e5e5 !important;
    color: #999 !important;
  }
  .green-active-font {
    color:#28b400 !important;
  }
  .green-active-border {
    border-color:#28b400 !important;
  }
  .green-active-bg {
    background-color:#28b400 !important;
  }
  /* .am-progress-hide-outer {*/
  /*   width: 220px;*/
  /*   height: 30px;*/
  /*   border-radius: 15px;*/
  /*   background: #f00;*/
  /*   background-size: 100%;*/
  /*   border: none;*/
  /*   .am-progress-bar {*/
  /*     height: 30px !important;*/
  /*     border: none;*/
  /*     border-radius: 15px;*/
  /*     background: #00f;*/
  /*     background-size: auto 100%;*/
  /*   }*/
  /* }*/

  .banners {
    width: 100%;
    height: 320px;
    position: relative;
    z-index: 0;
    img {
      width: 100%;
    }
  }
  .list-sort {
    position: relative;
    overflow: hidden;
    background: $bg-ff;
    margin-bottom: 20px;
    li {
      float: left;
      height: 110px;
      box-sizing: border-box;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
          -ms-flex-direction: column;
              flex-direction: column;
      -webkit-box-pack: center;
          -ms-flex-pack: center;
              justify-content: center;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      width: 50%;
      border-bottom: 4px solid $bg-ff;
      p {
        text-align: center;
        @include s_fontDemo(32px, 45px, $font-99);
        margin-bottom: 4px;
      }
      span {
        text-align: center;
        @include s_fontDemo(24px, 33px, $font-99);
      }
      &:last-of-type {
        width: 1px;
        height: 60px;
        background: #e5e5e5;
        @include s_allCenter;
      }
      &.active {
        border-color: $font-f48;
        p, span {
          color: $font-f48;
        }
      }
      &.green-active {
        border-color: #28b400;
        p, span {
          color: #28b400;
        }
      }
    }
  }

  .spike {
    margin-left: 30px;
    margin-right: 30px;
    margin-bottom: 20px;
    background:#ffffff;
    box-shadow:0 0 16px 0 rgba(172,172,172,0.50);
    border-radius:17px;
    padding: 30px;
    position: relative;
    &>p {
      width: 140px;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      -ms-flex-pack: distribute;
          justify-content: space-around;
      margin-bottom: 20px;
      span {
        font-family:DFPZongYiW9;
        font-size:28px;
        color:#333333;
        &:nth-of-type(2) {
          background:#2c2c2c;
          width:6px;
          height:6px;
          border-radius:100%;
        }
      }
    }
    dl {
      overflow: hidden;
      dt {
        @include sc_img_container(184px, 184px);
        margin-right: 30px;
        float: left;
      }
      dd {
        width: calc(100% - 215px);
        float: left;
        &>p {
          &:nth-of-type(1) {
            @include s_fontDemo(32px, 45px, $font-33);
            margin-bottom: 6px;
          }
          &:nth-of-type(2) {
            @include s_fontDemo(24px, 33px, $font-66);
            height: 33px;
            margin-bottom: 24px;
          }
        }
        .spike-dd-l {
          float: left;
          .activity-common-buy-step {
            margin-bottom: 10px;
          }
          .green-active-font:nth-of-type(1) {
            font-size: 24px;
            line-height: 33px;
          }
        }
        .spike-dd-r {
          float: right;
          width: 120px;
          .count-down {
            width: 100%;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-pack: justify;
                -ms-flex-pack: justify;
                    justify-content: space-between;
            margin-bottom: 10px;
            span {
              @include s_blockDemo(30px, 30px);
              @include s_fontDemo(22px, 30px, $font-ff);
              background:$font-f48;
              border-radius:4px;
              text-align: center;
            }
          }
        }
      }
    }
  }

  .brand-buy {
    padding: 20px 30px 14px;
    background: $bg-ff;
    margin-bottom: 20px;
    ul.title {
      overflow: hidden;
      margin-bottom: 20px;
      li {
        float: left;
        &:nth-of-type(1) {
          @include s_blockDemo(90px, 26px);
          @include s_fontDemo(20px, 26px, $font-ff);
          background:$font-f48;
          border-radius:4px;
          text-align: center;
          margin-right: 20px;
        }
        &:nth-of-type(2) {
          @include s_fontDemo(28px, 26px, $font-33);
        }
        &:nth-of-type(3) {
          @include s_blockDemo(180px, 26px);
          @include s_fontDemo(20px, 26px, $font-f48);
          float: right;
          background:#ffb6b6;
          border-radius:13px;
          text-align: center;
        }
      }
    }
    .list-commodities {
      overflow: hidden;
      dl {
        margin-right: 2%;
        width: 32%;
        box-sizing: border-box;
        float: left;
        &:last-of-type {
          margin-right: 0;
        }
        dt {
          padding-top: 100%;
          @include sc_img_container(100%, 0);
          margin-bottom: 10px;
          background: $bg-ff;
        }
        dd {
          @include s_fontDemo(30px, 42px, $font-f48);
          text-align: center;
          .commodity-name {
            @include s_fontDemo(28px, 32px, $font-33);
            margin-bottom: 10px;
            width: 100%;
          }
          del {
            color: $font-99;
          }
        }
      }
    }
  }

  .activity-3 {
    background: $bg-ff;
  }
}
         
 
 
 
 shangcheng/styles/activity/year-activity.scss 
 
@import "../common.scss";

.year-activity {
  background: #FFF6E3 url(../../img/activity/bg.png) repeat-y left top;
  background-size: 100% auto;
  // padding-top: 88px;
  height: 100%;
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
  position: relative;
  .banner {
    width: 100%;
    overflow: hidden;
    position: relative;
    margin-bottom: 10px;
    z-index: 0;
    .scroll-contaienr {
      width: 100%;
      overflow: auto;
      position: relative;
      z-index: 2;
      p {
        display: flex;
      }
      img {
        width: 100%;
      }
    }
    &>img {
      @include s_allCenter;
      z-index: 1;
      transition: 1.5s;
      opacity: 0;
      &.active {
        opacity: 1;
      }
    }
  }
  .sub-titles {
    height: 88px;
    overflow: auto;
    position: fixed;
    top: 0;
    z-index: 2;
    width: 100%;
    background: url(../../img/activity/title.png) repeat-x left top;
    background-size: auto 88px;
    box-shadow:0 2px 9px 0 rgba(144,131,104,0.48);
    opacity: 0;
    transition: .3s;
    margin-top: -88px;
    white-space: nowrap;
    &.active {
      opacity: 1;
      margin-top: 0px;
    }
    li {
      padding-left: 30px;
      padding-right: 30px;
      @include s_fontDemo(28px, 88px, #fff);
      display: inline-block;;
      &.active {
        color: #fffdb6;
      }
      .am-icon {
        margin-right: 8px;
        margin-top: 22px;
        float: left;
      }
    }
  }
  .year-activity-item {
    .sub-title {
      display: flex;
      justify-content: center;
      align-items: center;
      padding-bottom: 10px;
      img {
        width: 50px;
      }
      p {
        @include s_fontDemo(38px, 80px, #ff4242);
        margin: 0 6px;
        width: auto;
      }
    }
    .year-commodity-item {
      margin-bottom: 10px;
      overflow: hidden;
      li {
        width: 50%;
        box-sizing: border-box;
        float: left;
        .img-container {
          background: $bg-ff;
        }
        &.year-commodity-item-left {
          padding-right: 5px;
        }
        &.year-commodity-item-right {
          padding-left: 5px;
        }
        .img-container {
          padding-top: 100%;
          @include sc_img_container(100%, auto);
        }
        .commodity-describe {
          padding: 16px 20px 8px;
          background: #e75048;
          .commodity-name {
            @include s_fontDemo(28px, 35px, #fff);
            margin-bottom: 16px;
            height: 70px;
          }
          del {
            @include s_fontDemo(20px, 20px, #333);
            height: 20px;
          }
          .sell-price {
            @include s_fontDemo(28px, 48px, #fffdb6);
            span:nth-of-type(1) {
              @include s_fontDemo(22px, 48px, #fffdb6);
            }
            span:nth-of-type(2) {
              @include s_fontDemo(48px, 48px, #fffdb6);
            }
          }
        }
      }
    }
  }
  .footer-bg {
    height: 50px;
    margin-top: 30px;
    background: url(../../img/activity/footer.png) repeat-x left top;
    background-size: 100% auto;
  }
}
         
 
 
 
 shangcheng/styles/app.scss 
 
@import "./common.scss";

.app-container {
  height: 100%;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  .app {
    -webkit-box-flex: 1;
        -ms-flex: 1;
            flex: 1;
    overflow: auto;
  }
  .menus {
    @include s_border_t;
    height: 97px;
    width: 100%;
    background: $bg-ff;
    .am-flexbox-item {
      position: relative;
      .am-icon {
        display: block;
        margin: 0 auto;
        @include s_blockDemo(55px, 55px);
      }
      span {
        display: block;
        text-align: center;
        @include s_fontDemo(24px, 32px, $font-99);
        &.sc-badge-icon {
          line-height: 26px;
          right: 47%;
        }
      }
      &.active span {
        color: $theme;
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/brand/brand-categories.scss 
 
@import "../common.scss";

.categories-icon {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  padding-top: 15px;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  padding-left: 30px;
  span {
    @include s_fontDemo(18px, 18px, $font-ad);
  }
}


.brand-categories {
  padding-top: 20px;
  .all-commodity {
    margin-bottom: 20px;
    background: $bg-ff;
  }
  .brand-categories-list {
    overflow: hidden;
    li {
      background: $bg-ff;
      .list-header {
        height: 90px;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: justify;
            -ms-flex-pack: justify;
                justify-content: space-between;
        -webkit-box-align: center;
            -ms-flex-align: center;
                align-items: center;
        padding-left: 30px;
        padding-right: 20px;
        span {
          &:nth-of-type(1) {
            @include s_fontDemo(32px, 90px, $font-33);
          }
          &:nth-of-type(2) {
            @include s_fontDemo(24px, 90px, $font-99);
          }
        }
      }
      .list-content {
        overflow: hidden;
        p {
          width: 50%;
          box-sizing: border-box;
          margin-bottom: 10px;
          background: $bg-ff;
          float: left;
          &:nth-child(odd) {
            padding-right: 5px;
          }
          &:nth-child(even) {
            padding-left: 5px;
          }
          span {
            display: block;
            background: $bg-f3;
            padding-left: 30px;
            @include s_fontDemo(24px, 100px, $font-33);
          }
        }
      }
    }
  }
}

.brand-categories-slide {
  background-color: $bg-f3 !important;
}
         
 
 
 
 shangcheng/styles/brand/index.scss 
 
@import "../common.scss";

.brand-container {
  background: $bg-f3;
  .brand {
    height: 100%;
    padding-top: 100px;
    box-sizing: border-box;
    overflow-y: auto;
    .brand-header-container {
      position: relative;
      width: 100%;
      height: 180px;
      .brand-header-mask {
        position: absolute;
        width: 100%;
        height: 100%;
        -webkit-filter: blur(3px);
                filter: blur(3px);
        background-size: 100% auto !important;
      }
      .brand-header {
        background: rgba(0, 0, 0, .3);
        padding: 70px 30px 30px;
        overflow: hidden;
        position: relative;
        z-index: 2;
        .brand-header-left {
          @include s_blockDemo(80px, 80px);
          float: left;
          margin-right: 20px;
          border-radius: 4px;
          span {
            width: 100%;
            height: 100%;
            display: block;
            background-size: auto 100% !important;
          }
        }
        .brand-header-mid {
          float: left;
          p {
            &:nth-of-type(1) {
              @include s_fontDemo(28px, 28px, $font-ff);
              margin-bottom: 13px;
            }
          }
          a {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            height: 32px;
            -webkit-box-align: center;
                -ms-flex-align: center;
                    align-items: center;
            @include s_fontDemo(24px, 32px, $font-ff);
            .am-icon {
              margin-right: 10px;
            }
          }
        }
        .brand-header-right {
          float: right;
          border-left: 1px solid $font-ff;
          padding-left: 13px;
          overflow: hidden;
          display: -webkit-box;
          display: -ms-flexbox;
          display: flex;
          -webkit-box-align: center;
              -ms-flex-align: center;
                  align-items: center;
          p {
            float: left;
            &:nth-of-type(1) {
              @include s_fontDemo(28px, 36px, $font-ff);
              margin-right: 10px;
              span {
                display: block;
              }
            }
            &:nth-of-type(2) {
              @include s_fontDemo(28px, 36px, $font-ff);
              background: $bg-ff;
              border-radius:100px;
              width:110px;
              height:46px;
              @include s_fontDemo(24px, 46px, $theme);
              text-align: center;
              &.attention-false {
                background: $theme;
                color: $font-ff;
                display: -webkit-box;
                display: -ms-flexbox;
                display: flex;
                -webkit-box-align: center;
                    -ms-flex-align: center;
                        align-items: center;
                -webkit-box-pack: center;
                    -ms-flex-pack: center;
                        justify-content: center;
                .am-icon {
                  margin-right: 5px;
                }
              }
            }
          }
        }

      }
    }

    .commodity-list-container {
      /* height: calc(100% - 180px);*/
      /* padding-bottom: 80px;*/
      /* .commodity-list {*/
      /*   height: calc(100% - 102px);*/
      /*   overflow-y: auto;*/
      /* }*/
    }
    .footer-tips {
      @include s_fontDemo(28px, 70px, $font-99);
      margin-bottom: 10px;
      text-align: center;
    }
  }
}
         
 
 
 
 shangcheng/styles/cart/cart-brand-item.scss 
 
@import "../common.scss";

.cart-brand-item {
  @include s_border_t;
  background: $bg-ff;
  margin-bottom: 20px;
  .not-select-icon, .am-icon {
    @include s_blockDemo(38px, 38px);
    border:1px solid #999999;
    border-radius:100%;
    float: left;
    @include s_middle;
  }
  .am-icon {
    border: none;
  }
  .cart-brand-item-title {
    height: 80px;
    padding-left: 90px;
    position: relative;
    @include s_border_b;
    .not-select-icon, .am-icon {
      left: 25px;
    }
    .brand-name {
      float: left;
      @include s_fontDemo(24px, 80px, $font-33);
    }
    .brand-edit {
      float: right;
      @include s_fontDemo(24px, 80px, $font-33);
      margin-right: 30px;
    }
  }
  .clear-commodies {
    height: 90px;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center;
    -webkit-box-pack: center;
        -ms-flex-pack: center;
            justify-content: center;
    .am-icon {
      position: static;
      -webkit-transform: translateY(0);
              transform: translateY(0);
      margin-right: 10px;
    }
    span {
      @include s_fontDemo(28px, 28px, $font-ad);
    }
  }
}
         
 
 
 
 shangcheng/styles/cart/index.scss 
 
@import "../common.scss";

.cart {
  height: calc(100% - 100px);
  position: relative;
}
         
 
 
 
 shangcheng/styles/comment-component/activity-common.scss 
 
@import "../common.scss";

.activity-common-buy-step {
  width: 220px;
  height: 30px;
  border-radius: 15px;
  background: url(../../img/activity/step_bg.png) no-repeat left top;
  background-size: 100%;
  position: relative;
  p {
    height: 28px;
    border-radius: 15px;
    overflow: hidden;
    text-align: center;
    position: relative;
    span {
      &:nth-of-type(1) {
        height: 30px;
        width: 220px;
        position: absolute;
        left: 0;
        top: 0;
        background-image:linear-gradient(-90deg, rgba(255, 160, 72, .7) 0%, rgba(255, 93, 93, .9) 100%);
        border-radius: 15px;
        text-align: right;
        @include s_fontDemo(20px, 30px, $font-ff);
      }
    }
  }
  &>span{
    &:nth-of-type(1) {
      @include s_fontDemo(20px, 30px, $font-ff);
      position: absolute;
      top: 0;
      right: 15px;
      white-space: nowrap;
      height: 30px;
    }
    &:nth-of-type(2) {
      @include s_fontDemo(20px, 30px, $font-ff);
      @include s_middle;
      left: 0;
      min-width: 100px;
      text-align: center;
    }
  }
}

.activity-common-price {
  span {
    &:nth-of-type(1) {
      color: #ff4848;
      font-size: 20px;
      margin-right: 7px;
    }
    &:nth-of-type(2) {
      color: #ff4848;
      font-size: 40px;
      margin-right: 20px;
    }
  }
  del {
    color: #999;
    font-size: 24px;
  }
}

.activity-commodity-item {
  padding: 30px 30px;
  border-bottom: 1px solid #d8d8d8;
  position: relative;
  dl {
    display: flex;
    dt {
      padding-top: 240px;
      @include sc_img_container(240px, 0);
      margin-right: 30px;
      .saled-icon {
        @include s_blockDemo(160px, 160px);
        background: url(../../img/activity/selled.png) no-repeat center center;
        background-size: cover;
        @include s_allCenter;
      }
    }
    dd {
      flex: 1;
      h1 {
        @include s_fontDemo(32px, 45px, $font-33);
        margin-bottom: 6px;
        font-weight: normal;
      }
      h2 {
        @include s_fontDemo(24px, 35px, $font-66);
        min-height: 70px;
        margin-bottom: 25px;
        font-weight: normal;
      }
      .bottom {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
        height: 56px;
      }
    }
  }
  .discount-tag {
    position: absolute;
    top: 0;
    left: 40px;
    @include s_blockDemo(56px, 52px);
    background: url(../../img/activity/dicount_icon.png) no-repeat left top;
    background-size: cover;
    @include s_fontDemo(24px, 36px, $font-ff);
    text-align: center;
    &.small {
      font-size: 20px;
    }
  }
}
         
 
 
 
 shangcheng/styles/comment-component/cart-commodity-item.scss 
 
@import "../common.scss";

.cart-commodity-item {
  position: relative;
  // background: #f8f8f8;
  @include s_border_b;
  &:last-child {
    border-bottom: 0;
  }
  &.is-order-page {
    margin-bottom: 10px;
    border-bottom: 0;
    &:last-child {
      margin-bottom: 0;
    }
  }

  .invalid-mask {
    width: 100%;
    height: 100%;
    position: absolute;
    background: rgba(255, 255, 255, .6);
    z-index: 1;
  }
  .select-icon {
    left: 25px;
  }
  .not-select-icon {
    left: 25px;
  }
  .invalid-text {
    @include s_fontDemo(24px, 100px, $font-ad);
    @include s_middle;
    left: 20px;
  }
  .cart-commodity-info {
    overflow: hidden;
    padding-left: 30px;
    padding-left: 90px;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: justify;
        -ms-flex-pack: justify;
            justify-content: space-between;
    .cart-commodity-info-left {
      @include s_blockDemo(184px, 184px);
      margin-right: 20px;
      overflow: hidden;
      position: relative;
      padding-top: 20px;
      padding-bottom: 20px;
      img {
        height: 184px;
        display: block;
        @include s_allCenter;
      }
    }
    .cart-commodity-info-edit {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      height: 224px;
      .cart-commodity-edit-left {
        padding-top: 36px;
        padding-bottom: 30px;
        p {
          &:nth-of-type(1) {
            width: 70%;
            padding-left: 20px;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-pack: justify;
                -ms-flex-pack: justify;
                    justify-content: space-between;
            margin-bottom: 80px;
            @include s_fontDemo(28px, 28px, $font-ad);
            span {
              &:nth-of-type(2) {
                color: $font-33;
              }
            }
          }
          &:nth-of-type(2) {
            width: 100%;
            position: relative;
            padding-right: 50px;
            box-sizing: border-box;
            overflow: hidden;
            span {
              float: left;
              @include s_fontDemo(24px, 30px, $font-ad);
            }
            .arrow-icon {
              width: 40px;
              height: 40px;
              color: $font-ad;
              @include s_middle;
              right: 10px;
            }
          }
        }
      }
      .cart-commodity-edit-right {
        @include s_blockDemo(120px, auto);
        background: $font-f48;
        @include s_fontDemo(28px, 224px, $font-ff);
        text-align: center;
        position: relative;
        z-index: 2;
      }
    }
    .cart-commodity-info-right {
      -webkit-box-flex: 1;
          -ms-flex: 1;
              flex: 1;
      padding-top: 20px;
      padding-bottom: 20px;
      padding-right: 30px;
      .cart-commodity-title {
        min-height: 130px;
        p {
          &:nth-of-type(1) {
            @include s_fontDemo(28px, 35px, $font-33);
            margin-bottom: 13px;
          }
          &.specification {
            @include s_fontDemo(24px, 30px, $font-ad);
            margin-bottom: 13px;
          }
          &.limit-buyNum {
            @include s_fontDemo(24px, 30px, $theme);
            margin-bottom: 20px;
          }
        }
      }
      &>p {
        @include s_fontDemo(24px, 40px, $font-f48);
        span {
          display: inline-block;
          &:nth-of-type(1) {
            font-size: 32px;
          }
          &:nth-of-type(2) {
            float: right;
            @include s_fontDemo(24px, 40px, $font-33);
          }
        }
        del {
          display: inline-block;
          margin-left: 10px;
          @include s_fontDemo(24px, 40px, $font-ad);
        }
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/comment-component/commodity-item.scss 
 
@import "../common.scss";

.commodity-item {
  overflow: hidden;
  padding-right: 30px;
  background: $bg-ff;
  list-style: none;
  .commodity-item-left, .commodity-item-right {
    float: left;
    box-sizing: border-box;
  }
  .commodity-item-left {
    @include s_blockDemo(260px, 260px);
    overflow: hidden;
    position: relative;
    margin-right: 20px;
    overflow: hidden;
    img {
      display: block;
      height: 250px;
      @include s_allCenter;
    }
    p {
      background: rgba(35,35,35,0.60);
      border-radius: 100%;
      text-align: center;
      overflow: hidden;
      @include s_fontDemo(24px, 31px, $font-ff);
      @include s_allCenter;
      @include s_blockDemo(140px, 140px);
      span {
        width: 100%;
        @include s_allCenter;
      }
    }
  }
  .commodity-item-right {
    @include s_blockDemo(calc(100% - 280px), 260px);
    position: relative;
    @include s_border_b;
    .commodity-item-top {
      @include s_fontDemo(28px, 35px, $font-33);
      padding-top: 16px;
    }
    .commodity-item-middle {
      @include s_fontDemo(24px, 35px, $font-99);
    }
    .commodity-item-bottom {
      overflow: hidden;
      width: 100%;
      position: absolute;
      bottom: 23px;
      .commodity-item-price {
        display: block;
        @include s_fontDemo(28px, 52px, $font-f48);
        span {
          font-size: 36px;
        }
      }
      .commodity-item-original-price, .commodity-item-purchases-count, .commodity-item-commodity-comment {
        float: left;
        margin-right: 20px;
        @include s_fontDemo(24px, 35px, $font-ad);
      }
      .commodity-item-commodity-comment {
        margin-right: 0;
      }
      .commodity-item-cart-icon {
        position: absolute;
        right: 0;
        bottom: 5px;
      }
    }

    .commodity-count {
      @include s_fontDemo(28px, 40px, $font-66);
      @include s_middle;
      right: 23px;
      &.change-commodity-count {
        @include s_fontDemo(28px, 45px, $font-33);
        .am-icon, span {
          float: left;
        }
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/comment-component/commodity-list.scss 
 
@import "../common.scss";

.commodity-list-container {
  width: 100%;
  .commodity-list-container-bottom {
    padding-top: 100px;
    &.commodity-list-brand {
      padding-top: 0;
      .commodity-list-header {
        .filter-list {
          width: 100%;
        }
      }
    }
    .commodity-list-header {
      @include s_border_t;
      height: 100px;
      padding-left: 30px;
      padding-right: 30px;
      background: $bg-ff;
      @include s_border_b;
      @include s_border_t;
      .filter-list {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        justify-content: space-around;
        float: left;
        width: calc(100% - 100px);
        height: 100px;
        li {
          -webkit-box-flex: 1;
          -ms-flex: 1;
          flex: 1;
          display: -webkit-box;
          display: -ms-flexbox;
          display: flex;
          justify-content: center;
          color: $font-99;
          @include s_fontDemo(32px, 96px, $font-99);
          position: relative;
          &:nth-of-type(1) {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            span {
              @include s_fontDemo(32px, 96px, $font-99);
            }
            .am-icon {
              &.rotate180 {
                -webkit-transform: rotate(180deg);
                transform: rotate(180deg);
              }
            }
          }
          &.active {
            span {
              color: $theme;
            }
            .bottom-line {
              background: $theme;
            }
          }
          .bottom-line {
            @include s_blockDemo(120px, 4px);
            @include s_center;
            bottom: 0;
            background: $bg-ff;
          }
        }
      }
      .commodity-list-search {
        width: 40px;
        height: 40px;
        float: right;
        transform: translateY(30px);
      }
    }
    .commodity-list {
      overflow: hidden;
      width: 100%;
      .empty-container {
        z-index: 1;
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/comment-component/evaluate-item.scss 
 
@import "../common.scss";

.evaluate-item {
  background: $bg-ff;
  .evaluate-header {
    padding: 20px 23px 0;
    @include s_border_b;
    .evaluate-item-info {
      @include s_fontDemo(28px, 60px, $font-66);
      margin-bottom: 20px;
      p, span {
        float: left;
      }
      .user-icon {
        @include s_blockDemo(60px, 60px);
        background: #000;
        border-radius: 100%;
        margin-right: 23px;
      }
      span {
        margin-right: 20px;
      }
    }
    .evaluate-time {
      @include s_fontDemo(20px, 28px, $font-99);
      margin-bottom: 10px;
    }
    .evaluate-content {
      @include s_fontDemo(24px, 32px, $font-33);
      /* @include s_border_b;*/
      margin-bottom: 10px;
      .text {
        margin-bottom: 22px;
      }
      div p {
        @include s_blockDemo(226px, 226px);
      }
    }
    .evaluate-address {
      @include s_fontDemo(20px, 50px, $font-99);
    }

    /* 改变默认样式*/
    .am-flexbox-item.am-grid-item {
      margin-bottom: 20px;
    }
    .evaluation-container {
      -webkit-transform: translateY(3px);
              transform: translateY(3px);
    }
  }
  .evaluate-reply {
    background: $bg-ff;
    padding-left: 23px;
    p {
      @include s_fontDemo(24px, 36px, $font-66);
      @include s_border_b;
      padding-top: 22px;
      padding-bottom: 22px;
      .am-icon {
        vertical-align: middle;
        margin-right: 15px;
      }
      &:last-child {
        border-bottom: 0;
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/comment-component/express-info.scss 
 
@import "../common.scss";

.express-slide.slide-page-container.info {
  background-color: $bg-f3;
}

.express-info {
  height: 100%;
  overflow-y: auto;
  .header {
    padding: 30px;
    overflow: hidden;
    margin-bottom: 20px;
    background: $bg-ff;
    p {
      float: left;
      &:nth-of-type(1) {
        @include sc_img_container(140px, 140px);
        border-radius: 4px;
        position: relative;
        margin-right: 30px;
        span {
          position: absolute;
          bottom: 0;
          width: 100%;
          height: 30px;
          background: #333;
          text-align: center;
          @include s_fontDemo(24px, 30px, $font-ff);
        }
      }
      &:nth-of-type(2) {
        span {
          @include s_fontDemo(28px, 28px, $font-99);
          margin-bottom: 20px;
          display: block;
        }
      }
    }
  }
  .express-info-list {
    background: $bg-ff;
    li {
      padding-left: 45px;
      height: 120px;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      p {
        &:nth-of-type(1) {
          width: 45px;
          height: 120px;
          -webkit-transform: translateY(50%);
                  transform: translateY(50%);
          @include s_border_l;
          &:last-of-type {
            border-left: none;
          }
          span {
            display: block;
            border-radius: 100%;
          }
          .active, .unActive {
            -webkit-transform: translateX(-50%) translateY(-50%);
                    transform: translateX(-50%) translateY(-50%);
          }
          .active {
            @include s_blockDemo(30px, 30px);
            background: rgba(255, 171, 0, .3);
            position: relative;
            display: none;
            span {
              @include s_blockDemo(20px, 20px);
              background: $theme;
              @include s_allCenter;
            }
          }
          .unActive {
            @include s_blockDemo(14px, 14px);
            background: #e5e5e5;
          }
        }
        &:nth-of-type(2) {
          padding-top: 30px;
          padding-bottom: 30px;
          @include s_border_b;
          span {
            @include s_fontDemo(28px, 28px, $font-99);
            display: block;
            &:nth-of-type(1) {
              margin-bottom: 10px;
            }
            &:nth-of-type(2) {
              font-size: 24px;
            }
          }
        }
      }
    }
    li.active {
      p {
        &:nth-of-type(1) {
          .active {
            display: block;
          }
          .unActive {
            display: none;
          }
        }
        &:nth-of-type(2) {
          span {
            color: $font-33;
          }
        }
      }
    }
    li:last-of-type {
      p {
        &:nth-of-type(1) {
          border-left: none;
        }
        &:nth-of-type(2) {
          border-bottom: none;
        }
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/comment-component/index-search.scss 
 
@import "../common.scss";

.search-slidePage {
  height: 100%;
  overflow: auto;
}

.index-search {
  .index-search-header {
    height: 1rem;
    line-height: 1rem;
    text-align: left;
    background-color: rgba(255, 255, 255, .8);
    padding-left: 30px;
    padding-right: 30px;
    position: fixed;
    width: 100%;
    box-sizing: border-box;
    z-index: 5;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    .select-provice {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      padding-right: 20px;
      span {
        font-size: 32px;
        color: $font-33;
        width: 100px;
        text-align: center;
      }
    }
    .search-main {
      -webkit-box-flex: 1;
          -ms-flex: 1;
              flex: 1;
      height: 0.54rem;
      font-size: 0.28rem;
      text-align: center;
      background-color: $bg-f8;
      display: inline-block;
      line-height: 0.54rem;
      background-image: url(../../img/fangdajin.png);
      background-size: 0.27rem;
      background-position: 20px center;
      background-repeat: no-repeat;
      margin-top: 0.23rem;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      box-sizing: border-box;
      input {
        -webkit-box-flex: 1;
            -ms-flex: 1;
                flex: 1;
        height: 100%;
        font-size: 0.28rem;
        background-color: $bg-f8;
        float: left;
        margin-left: 60px;
      }
    }
    .cart-container {
      display: inline-block;
      padding-left: 30px;
      padding-top: 28px;
      position: relative;
      .sc-badge-icon {
        right: 25px;
        top: 20px;
      }
    }
  }

  .index-search-bottom {
    -webkit-transition: .5s;
    transition: .5s;
    height: calc(100% - 100px);
    width: 100%;
    background: $bg-f3;
    position: absolute;
    padding-top: 100px;
    z-index: 1;
    overflow-y: auto;
    .search-history {
      background: $bg-ff;
      .search-title, .search-item {
        height: 88px;
        position: relative;
        @include s_border_b;
        @include s_fontDemo(28px, 88px, $font-33);
        .am-icon {
          @include s_middle;
          right: 30px;
        }
        &:last-of-type {
          border-bottom: none;
        }
      }
      .search-title {
        font-size: 24px;
        color: $font-ad;
        padding-left: 30px;
        @include s_border_t;
      }
      .search-container {
        padding-left: 25px;
      }
      .search-footer {
        height: 88px;
        text-align: center;
        position: relative;
        @include s_fontDemo(28px, 88px, $font-99);
        @include s_border_t;
        .am-icon {
          vertical-align: middle;
          margin-right: 10px;
          -webkit-transform: translateY(-4px);
          transform: translateY(-4px);
        }
      }
    }

    .search-result {
      .title {
        padding-left: 23px;
        @include s_fontDemo(24px, 60px, $font-99);
      }
      .am-grid-icon {
        width: 50% !important;
        height: 50% !important;
        margin-top: 0 !important;
      }
      .am-grid-text {
        color: $font-66 !important;
      }
      .am-grid-item {
        /* @include s_border_r;*/
        /* @include s_border_b;*/
        /* &:last-of-type {*/
        /*   border-right: none;*/
        /* }*/
      }
    }
  }
}

.provice-popup {
  background: rgba(0, 0, 0, .3);
  width: 100%;
  height: 100%;
  position: absolute;;
  z-index: 2;
  @include s_border_t;
  .provice-title {
    @include s_fontDemo(24px, 85px, $font-ad);
    @include s_border_b;
    padding-left: 30px;
    background: $bg-ff;
  }
  .provice-list {
    padding: 20px 15px 30px;
    overflow: hidden;
    background: $bg-ff;
    .provice-item {
      padding-left: 14px;
      padding-right: 14px;
      margin-bottom: 15px;
      box-sizing: border-box;
      width: 25%;
      float: left;
      p {
        @include s_fontDemo(32px, 70px, $font-33);
        text-align: center;
        @include s_border;
      }
      &.active {
        p {
          background: $theme;
          border-color: $theme;
          color: $font-ff;
        }
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/common.scss 
 
@import "../../../styles/s_common.scss";

// vconsole样式
#__vconsole .vc-switch {
  padding: 20px;
}
#__vconsole.vc-toggle .vc-panel {
  font-size: 20px;
}

.sc-icon-container {
  float: left;
  padding-top: 40px;
  padding-bottom: 40px;
  .am-icon {
    display: block;
    margin: 0 auto;
  }
  span {
    width: 100%;
    text-align: center;
    display: block;
  }
}

.sc-title {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  padding-top: 30px;
  padding-bottom: 30px;
  .am-icon {
    margin-right: 10px;
  }
  span {
    &:nth-of-type(1) {
      @include s_blockDemo(30px, 1px);
      background: $font-33;
      margin-right: 20px;
    }
    &:nth-of-type(2) {
      @include s_fontDemo(28px, 28px, $font-33);
    }
    &:nth-of-type(3) {
      @include s_blockDemo(30px, 1px);
      background: $font-33;
      margin-left: 20px;
    }
  }
}

.load-complete {
  @include s_fontDemo(28px, 68px, $font-99);
  text-align: center;
  margin-bottom: 10px;
}

.sc-4-commodity {
  display: inline-block;
  width: 25%;
  img {
    @include s_blockDemo(180px, 180px);
    margin-bottom: 15px;
  }
  p {
    &:nth-of-type(1) {
      @include s_fontDemo(24px, 24px, $font-33);
      margin-bottom: 10px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    &:nth-of-type(2) {
      @include s_fontDemo(28px, 28px, $font-f48);
    }
  }
}

.sc-ad {
  height: 160px;
  background: #fff;
  padding: 0px 30px 30px;
  position: relative;
  margin-bottom: 20px;
  .ad-carousel {
    .slider-list {
      height: 160px !important;
      .slider-slide {
        height: 100%;
        img {
          height: 100%;
        }
      }
    }
  }
  &>p {
    @include s_blockDemo(40px, 22px);
    @include s_fontDemo(12px, 22px, $font-ff);
    background:rgba(0,0,0,0.70);
    text-align: center;
    position: absolute;
    left: 30px;
    bottom: 30px;
  }
}
/* 活动指示器*/
.slider-decorator-0 {
  bottom: 10px !important;
  .am-carousel-wrap-dot>span {
    @include s_blockDemo(20px, 4px);
    border-radius: 0;
    background: rgba(255, 255, 255, .3);
  }
  .am-carousel-wrap-dot-active>span {
    background: #fff;
  }
}

.enlarge {
  -webkit-animation: enlarge .3s;
          animation: enlarge .3s;
}

/* user-tips*/
.am-input-item.sc-user-tips {
  height: 90px;
  .am-input-label-5, .am-input-control input {
    font-size: 28px !important;
    color: $font-33 !important;
  }
  .am-input-control input {
    text-align: right;
  }
}

/*installer.failurerequests*/
.am-list-line {
  height: 90px;
  height: 90px;
  @include s_border_b;
}

/* place-button*/
.place-button {
  position: absolute;
  width: 100%;
  bottom: 0;
  @include s_fontDemo(34px, 100px, $theme);
  text-align: center;
  background: $bg-ff;
}

/* badge-icon*/
.sc-badge-icon {
  display: block;
  text-align: center;
  position: absolute;
  @include s_blockDemo(auto, 26px);
  @include s_fontDemo(24px, 26px, $font-ff !important);
  padding: 0 5px;
  min-width: 16px;
  text-align: center;
  border-radius: 13px;
  background: $font-f48;
  top: -3px;
  right: 50%;
  -webkit-transform: translateX(35px);
          transform: translateX(35px);
}

@-webkit-keyframes enlarge {
  0% {
    -webkit-transform: scale(1);
            transform: scale(1);
  }
  50% {
    -webkit-transform: scale(1.5);
            transform: scale(1.5);
  }
  100% {
    -webkit-transform: scale(1);
            transform: scale(1);
  }
}

@keyframes enlarge {
  0% {
    -webkit-transform: scale(1);
            transform: scale(1);
  }
  50% {
    -webkit-transform: scale(1.5);
            transform: scale(1.5);
  }
  100% {
    -webkit-transform: scale(1);
            transform: scale(1);
  }
}

/* 不现实底部menus样式设置：*/
/* @mixin sc_hideMenus {*/
/*   position: absolute;*/
/*   width: 100%;*/
/*   height: 100%;*/
/*   overflow: hidden;*/
/*   z-index: 1;*/
/*   background: $bg-f3;*/
/* }*/

/* img的容器*/
@mixin sc_img_container($w, $h) {
  @include s_blockDemo($w, $h);
  position: relative;
  overflow: hidden;
  img {
    height: 100%;
    @include s_allCenter;
  }
}

/* padding & bg*/
@mixin s_defaultList {
  padding-left: 30px;
  padding-right: 30px;
  background: $bg-ff;
  overflow: hidden;
}
         
 
 
 
 shangcheng/styles/evaluate/evaluate-info.scss 
 
@import "../common.scss";

.evaluate-info {
  .evaluate-item {
    margin-bottom: 13px;
  }
  /* 公共组件listview*/
  .wrap {
    height: calc(100% - 142px);
  }
}
         
 
 
 
 shangcheng/styles/evaluate/index.scss 
 
@import "../common.scss";

.evaluate {
  @include s_border_t;
  overflow-y: auto;
  .commodity-item {
    background: $bg-ff;
    margin-bottom: 20px;
    padding-bottom: 1px;
    .commodity-item-header {
      padding: 20px 30px;
      @include s_border_b;
      overflow: hidden;
      .brand-img {
        @include sc_img_container(80px, 80px);
        margin-right: 20px;
        float: left;
      }
      .evaluation-container {
        float: left;
        margin-top: 15px;
      }
      .evaluate-status {
        float: right;
        @include s_fontDemo(24px, 80px, $font-66);
      }
    }
    .am-textarea-control textarea {
      @include s_fontDemo(28px, 40px, $font-33);
    }
  }
  .brand-evaluate {
    background: $font-ff;
    padding-left: 30px;
    padding-right: 30px;
    padding-bottom: 45px;
    .brand-evaluate-header {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      .am-icon {
        margin-right: 20px;
      }
      span {
        @include s_fontDemo(28px, 90px, $font-33);
      }
    }
    .brand-evaluate-text {
      @include s_fontDemo(28px, 50px, $font-99);
      overflow: hidden;
      margin-bottom: 15px;
      span {
        float: left;
        margin-right: 20px;
      }
      .evaluation-container {
        margin-top: 8px;
      }
    }
  }
  .evaluate-button {
    margin-left: 30px;
    margin-right: 30px;
    background:#ffab00;
    border-radius:4px;
    @include s_fontDemo(34px, 90px, $font-ff);
    text-align: center;
    margin-top: 50px;
    margin-bottom: 30px;
  }

  // 改变默认样式
  .am-image-picker-list .am-flexbox {
    overflow: hidden;
  }
}
         
 
 
 
 shangcheng/styles/main/categories.scss 
 
@import "../common.scss";

.categories {
  position: absolute;
  width: 100%;
  height: 100%;
  overflow: hidden;
  background: $bg-ff;
  z-index: 1;
  .categories-container {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    padding-top: 100px;
    box-sizing: border-box;
    .top-categories {
      width: 210px;
      height: 100%;
      overflow-y: auto;
      @include s_border_r;
      padding: 30px 20px 30px 0;
      overflow: auto;
      @include s_border_t;
      li {
        @include s_fontDemo(26px, 50px, $font-66);
        border-left: 8px solid $font-ff;
        margin-bottom: 30px;
        text-align: center;
        &.active {
          border-color: $theme;
          color: $theme;
          font-size: 30px;
        }
      }
    }
    .sub-categories {
      -webkit-box-flex: 1;
          -ms-flex: 1;
              flex: 1;
      padding-left: 30px;
      height: 100%;
      overflow: auto;
      padding-bottom: 30px;
      @include s_border_t;
      .sub-container {
        @include s_border_b;
        &:last-of-type {
          border-bottom: none;
        }
        .sub-title {
          @include s_fontDemo(24px, 84px, $font-ad);
        }
      }
    }
    .three-categories {
      overflow: hidden;
      padding-right: 14px;
      &.sub-categories {
        padding-top: 30px;
      }
      dl {
        width: calc(100% / 3);
        float: left;
        padding-right: 14px;
        box-sizing: border-box;
        dt {
          @include sc_img_container(100%, 150px);
        }
        dd {
          @include s_fontDemo(24px, 64px, $font-66);
          margin-bottom: 10px;
          text-align: center;
        }
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/main/commodity-detail/index.scss 
 
@import "../../common.scss";

.commodity-detail-container {
  .msg-icon {
    @include s_blockDemo(80px, 80px);
    position: absolute;
    right: 30px;
    top: 30px;
    z-index: 10;
    background:rgba(0,0,0,0.70);
    border-radius:100%;
    .am-icon {
      @include s_allCenter;
    }
    .sc-badge-icon {
      top: 10px;
      -webkit-transform: translateX(30px);
              transform: translateX(30px);
    }
  }

  .commodity-disable {
    position: absolute;
    bottom: 99px;
    height: 54px;
    width: 100%;
    background: #fefceb;
    text-align: center;
    @include s_fontDemo(28px, 54px, #ff6e19);
  }

  .commodity-detail {
    height: calc(100% - 100px);
    overflow-y: auto;
    overflow-x: hidden;
    .banner-carousel {
      position: relative;
      overflow: hidden;
      .slider-list {
        width: 100%;
        height: 750px !important;
      }
      .img-container {
        @include sc_img_container(100%, 750px !important);
      }
      .activity-tips {
        overflow: hidden;
        padding: 23px 30px;
        opacity:0.95;
        background-image:linear-gradient(-226deg, #ff4848 0%, #f2325c 100%);
        position: absolute;
        bottom: 0px;
        width: 100%;
        box-sizing: border-box;
        &>p {
          float: left;
          border: 1px solid #fff;
          border-radius: 4px;
          span {
            float: left;
            &:nth-of-type(1) {
              @include s_blockDemo(42px, 42px);
              background: $bg-ff;
              .am-icon {
                @include s_blockDemo(40px, 40px);
                float: left;
                margin-top: 1px;
                margin-left: 1px;
              }
            }
            &:nth-of-type(2) {
              @include s_blockDemo(auto, 42px);
              @include s_fontDemo(32px, 42px, $font-ff);
              padding-left: 10px;
              padding-right: 10px;
              text-align: center;
            }
          }
        }
        &>span {
          float: right;
          @include s_fontDemo(30px, 42px, $font-ff);
        }
      }
    }
    .commodity-detail-header {
      padding-left: 30px;
      padding-right: 30px;
      background: #fff;
      .title {
        @include s_fontDemo(32px, 40px, $font-33);
        padding-top: 30px;
        margin-bottom: 30px;
      }
      .sell-price {
        margin-bottom: 5px;
        margin-left: -7px;
      }
      .original-price {
        margin-bottom: 20px;
      }
      .freight-price {
        @include s_fontDemo(24px, 33px, $font-99);
        padding-bottom: 25px;
        overflow: hidden;
        span {
          &:nth-of-type(1) {
            float: left;
            margin-right: 70px;
          }
          &:nth-of-type(2) {
            float: left;
          }
          &:nth-of-type(3) {
            float: right;
          }
        }
      }
    }
    .service-text {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      height: 65px;
      background: #f8f8f8;
      width: 100%;
      padding-left: 30px;
      @include s_fontDemo(24px, 65px, $font-99);
      .am-icon {
        margin-right: 10px;
      }
    }
    .params {
      height: 92px;
      padding-left: 30px;
      padding-right: 30px;
      margin-top: 20px;
      @include s_fontDemo(32px, 92px, $font-33);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: justify;
          -ms-flex-pack: justify;
              justify-content: space-between;;
      -webkit-box-align: center;;
          -ms-flex-align: center;;
              align-items: center;
      background: $bg-ff;
      .am-icon {
        color: $font-cc;
      }
    }
    .detail-evaluate {
      margin-top: 20px;
      .detail-evaluate-header {
        @include s_border_b;
        .am-list-line {
          border-bottom: none;
          .am-list-extra {
            font-size: 20px;
            color: $font-66;
          }
        }
      }
    }
    .brand-info {
      padding: 30px 30px 25px;
      background: $bg-ff;
      margin-bottom: 20px;
      margin-top: 20px;
      .brand-info-header {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        margin-bottom: 25px;
        .brand-info-left {
          @include sc_img_container(90px, 90px);
          margin-right: 28px;
          border-radius: 4px;
          img {
            height: 100%;
            margin: 0 auto;
            display: block;
          }
        }
        .brand-info-right {
          p {
            &:nth-of-type(1) {
              @include s_fontDemo(32px, 40px, $font-33);
              margin-bottom: 10px;
            }
          }
        }
      }
      .brand-info-bottom {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: justify;
            -ms-flex-pack: justify;
                justify-content: space-between;
        li {
          -webkit-box-flex: 1;
              -ms-flex: 1;
                  flex: 1;
          height: 100px;
          @include s_border_r;
          &:nth-of-type(1), &:nth-of-type(2) {
            padding-top: 20px;
            span {
              display: block;
              @include s_fontDemo(32px, 44px, $font-33);
              margin-bottom: 16px;
              text-align: center;
            }
            p {
              @include s_fontDemo(24px, 32px, $font-99);
              text-align: center;
            }
          }
          &:nth-of-type(3) {
            border-right: none;
            .brand-score-item {
              display: -webkit-box;
              display: -ms-flexbox;
              display: flex;
              -webkit-box-align: center;
                  -ms-flex-align: center;
                      align-items: center;
              -webkit-box-pack: center;
                  -ms-flex-pack: center;
                      justify-content: center;
              p {
                @include s_fontDemo(24px, 33px, $font-99);
                margin-bottom: 10px;
                &:nth-of-type(1) {
                  margin-right: 10px;
                }
                &:nth-of-type(2) {
                  margin-right: 10px;
                  color: #ff6e19;
                  width: 35px;
                  text-align: center;
                }
                &:nth-of-type(3) {
                  @include s_blockDemo(28px, 28px);
                  background:#ff6e19;
                  border-radius:4px;
                  @include s_fontDemo(24px, 28px, $font-ff);
                  text-align: center;
                }
              }
            }
          }
        }
      }
    }
    .commodity-detail-list {
      background: $bg-ff;
      .detail-list-header {
        border-left: 8px solid $theme;
        padding-left: 20px;
        margin-bottom: 20px;
        @include s_fontDemo(32px, 92px, $font-33);
      }
      .commodity-detail-item-container {
        .commodity-detail-item {
          img {
            width: 100%;
            height: auto;
            display: block;
          }
          p {
            padding: 20px 30px;
            @include s_fontDemo(28px, 35px, $font-66);
          }
        }
        .li-last {
          height: 90px;
          @include s_fontDemo(28px, 90px, $font-99);
          text-align: center;
          background: #f5f5f6;
        }
      }
    }
  }
  .commodity-detail-footer {
    height: 99px;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    @include s_border_t;
    .contact {
      -webkit-box-flex: 1;
          -ms-flex: 1;
              flex: 1;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
          -ms-flex-direction: column;
              flex-direction: column;
      -webkit-box-pack: center;
          -ms-flex-pack: center;
              justify-content: center;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      background: $font-ff;
      span {
        @include s_fontDemo(24px, 42px, $font-99);
      }
      .am-icon {
        @include s_blockDemo(30px, 30px);
        display: block;
      }
    }
    .commodity-btn {
      width: 205px;
      height: 99px;
      @include s_fontDemo(34px, 99px, $font-ff);
      text-align: center;
    }
  }
}
.commodity.am-modal {
  .am-modal-body {
    display: none;
  }
}
         
 
 
 
 shangcheng/styles/main/commodity-detail/parameters.scss 
 
@import "../../common.scss";

.parameters {
  max-height: 80%;
  /* height: 500px;*/
  background: $bg-ff;
  position: absolute;
  z-index: 10;
  width: 100%;
  bottom: 0;
  /* z-index: 10;*/
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  .parameters-header {
    padding: 30px;
    position: relative;
    @include s_border_b;
    height: 220px;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    .close {
      position: absolute;
      right: 10px;
      top: 10px;
      color: $font-cc;
    }
    .parameters-header-left {
      @include s_blockDemo(230px, 230px);
      padding: 3px;
      @include s_border;
      border-radius: 6px;
      margin-right: 25px;
      margin-top: -75px;
      background: $bg-ff;
      position: relative;
      overflow: hidden;
      span {
        height: 100%;
        height: 100%;
        display: block;
        background-size: auto 100% !important;
      }
    }
    .parameters-header-right {
      -webkit-box-flex: 1;
          -ms-flex: 1;
              flex: 1;
      .inventory {
        @include s_fontDemo(28px, 50px, $font-33);
      }
      .parameters-text {
        @include s_fontDemo(28px, 35px, $font-33);
      }
    }
  }
  .parameters-middle-container {
    max-height: 600px;
    overflow-y: auto;
    position: relative;
    z-index: 10;
    .parameters-middle {
      .parameters-list-container {
        // overflow-y: auto;
        li {
          padding: 23px 10px 10px 30px;
          @include s_border_b;
          h1 {
            @include s_fontDemo(28px, 40px, $font-33);
            margin-bottom: 23px;
            font-weight: normal;
          }
          .parameters-list {
            overflow: hidden;
            p {
              @include s_fontDemo(24px, 56px, $font-33);
              float: left;
              padding-left: 20px;
              padding-right: 20px;
              margin-right: 20px;
              background:#f3f3f4;
              border-radius:4px;
              margin-bottom: 20px;
              &.disabled {
                background: #f3f3f4;
                color: $disable;
              }
              &.active {
                background: $theme;
                color: #fff;
              }
            }
          }
        }
      }
      .commodity-count {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
        justify-content: space-between;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
        @include s_border_b;
        margin-bottom: 30px;
        p {
          &:nth-of-type(1) {
            @include s_fontDemo(28px, 120px, $font-33);
            padding-left: 30px;
          }
          &:nth-of-type(2) {
            padding-right: 30px;
            overflow: hidden;
            span {
              display: inline-block;
              margin-right: 1px;
              @include s_blockDemo(65px, 65px);
              @include s_fontDemo(28px, 65px, $font-ad);
              background: $bg-f3;
              text-align: center;
              &:nth-of-type(2) {
                color: $font-33
              }
            }
          }
        }
      }
    }
  }
  .parameters-footer {
    overflow: hidden;
    height: 100px;
    min-height: 100px;
    p {
      width: 50%;
      float: left;
      @include s_fontDemo(34px, 100px, $font-ff);
      text-align: center;
      &:nth-of-type(1) {
        background-color: $theme;
      }
      &:nth-of-type(2) {
        background-color: #ff6e19;
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/main/daojia.scss 
 
@import "../common.scss";

.daojia {
  height: 100%;
  .daojia-header {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: justify;
        -ms-flex-pack: justify;
            justify-content: space-between;
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center;
    height: 100px;
    padding-left: 30px;
    padding-right: 30px;
    background: $bg-ff;
    p {
      overflow: hidden;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      .am-icon {
        margin-right: 10px;
        float: left;
        &:nth-of-type(2) {
          width: 15px;
          height: 15px;
        }
      }
      span {
        float: left;
        max-width: 250px;
        @include s_fontDemo(32px, 100px, $font-33);
        margin-right: 10px;
        box-sizing: 20px 0 20px 20px #fff outset;
      }
    }
  }
  .daojia-service-carousel {
    margin-bottom: 20px;
    .slider-list {
      height: 460px !important;
      background: $bg-ff;
    }
    .slider-decorator-0 {
      bottom: 30px !important;
      .am-carousel-wrap-dot > span {
        background: rgba(0, 0, 0, .25);
      }
      .am-carousel-wrap-dot-active > span {
        background: rgba(0, 0, 0, .5);
      }
    }
    .industry-item {
      overflow: hidden;
      padding: 30px;
      margin-bottom: 20px;
      li {
        padding-right: 10px;
        float: left;
        box-sizing: border-box;
        height: 175px;
        width: 25%;
        margin-bottom: 10px;
        &:nth-of-type(4), &:nth-of-type(8) {
          padding-right: 0;
        }
        .industry-item-container {
          background: $bg-f8;
          display: -webkit-box;
          display: -ms-flexbox;
          display: flex;
          -webkit-box-orient: vertical;
          -webkit-box-direction: normal;
              -ms-flex-direction: column;
                  flex-direction: column;
          -webkit-box-pack: center;
              -ms-flex-pack: center;
                  justify-content: center;
          -webkit-box-align: center;
              -ms-flex-align: center;
                  align-items: center;
          padding-right: 10px;
          height: 100%;
          p {
            @include sc_img_container(100px, 100px);
            margin-bottom: 10px;
          }
          span {
            display: block;
            padding-left: 15px;
            padding-right: 15px;
            width: 100%;
            box-sizing: border-box;
            text-align: center;
            @include s_fontDemo(26px, 26px, $font-66);
          }
        }
      }
    }
  }
  .recommend-service {
    .recommend-service-header {
      @include s_fontDemo(32px, 90px, $font-33);
      padding-left: 30px;
      background: $bg-ff;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      span {
        &:nth-of-type(1) {
          width: 250px;
        }
        &:nth-of-type(2) {
          -webkit-box-flex: 1;
              -ms-flex: 1;
                  flex: 1;
          @include s_border_b;
        }
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/main/index.scss 
 
@import "../common.scss";

.main {
  height: calc(100% - 100px);
  .main-list {
    height: 100%;
    padding-top: 100px;
    /* overflow-y: auto;*/
    .sc-ad {
      margin-bottom: 0;
      padding: 0 0rem 0.3rem;
      height: 200px !important;
      box-sizing: content-box;
      &>p {
        left: 0;
      }
      .ad-carousel .slider-list {
        height: 200px !important;
      }
    }
    .columns {
      background: #fff;
      overflow-y: hidden;
      overflow-x: auto;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      padding-bottom: 30px;
      margin-bottom: 20px;
      li {
        -webkit-box-flex: 1;
            -ms-flex: 1;
                flex: 1;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
            -ms-flex-direction: column;
                flex-direction: column;
        -webkit-box-align: center;
            -ms-flex-align: center;
                align-items: center;
        -webkit-box-pack: justify;
            -ms-flex-pack: justify;
                justify-content: space-between;
        height: 140px;
        p {
          @include sc_img_container(100px, 100px);
          margin-bottom: 12px;
        }
        span {
          @include s_fontDemo(28px, 40px, $font-33);
        }
      }
    }
    .new-commoditys {
      padding-bottom: 30px;
      padding-left: 30px;
      background: $bg-ff;
      margin-bottom: 20px;
      .commoditys-list-container {
        white-space: nowrap;
        width: 100%;
        overflow-x: auto;
        .commoditys-list {
          overflow-y: hidden;
          .sc-4-commodity {
            margin-right: 15px;
          }
        }
      }
    }
    .category-secondary {
      overflow: hidden;
      p {
        position: relative;
        float: left;
        &:nth-of-type(1) {
          width: 40%;
        }
        &:nth-of-type(2), &:nth-of-type(3) {
          width: 60%;
          box-sizing: border-box;
          padding-left: 2px;
        }
        &:nth-of-type(3) {
          width: 60%;
          margin-top: 2px;
        }
        img {
          width: 100%;
          height: auto;
        }
        span {
          position: absolute;
          left: 30px;
        }
        span:nth-of-type(1) {
          top: 40px;
          font-size:30px;
          color:#333333;
        }
        span:nth-of-type(2) {
          top: 80px;
          font-size:22px;
          color:#999999;
        }
      }
    }
    .recommend-list {
      overflow: hidden;
      .recommend-list-title {
        height: 70px;
        padding-top: 20px;
        img {
          display: block;
          margin: 0 auto;
          height: 50px;
        }
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/main/market.scss 
 
@import "../common.scss";

.market {
  height: 100%;
  /* 改变antd的样式*/
  .am-tabs-top {
    padding-top: 100px;
    .am-tabs-tab {
      height: 120px;
      -webkit-box-align: start;
          -ms-flex-align: start;
              align-items: flex-start;
    }
  }
  .main-list {
    box-sizing: border-box;
    height: calc(100% - 220px);
    padding-top: 5px;
    overflow-y: auto;
    background: $bg-ff;
  }
}
         
 
 
 
 shangcheng/styles/main/sc-2-commodity.scss 
 
@import "../common.scss";

.sc-2-commodity-container {
  width: 100%;
  overflow: hidden;
  .sc-2-commodity {
    margin-bottom: 10px;
    width: 50%;
    box-sizing: border-box;
    float: left;
    .bg-container {
      background: $bg-ff;
      p {
        padding-left: 20px;
        padding-right: 20px;
        &:nth-of-type(1) {
          position: relative;
          overflow: hidden;
          height: 370px;
          margin-bottom: 15px;
          img {
            @include s_allCenter;
            height: 370px;
          }
        }
        &:nth-of-type(2) {
          @include s_fontDemo(28px, 35px, $font-33);
          height: 70px;
          margin-bottom: 20px;
          display: -webkit-box;
          -webkit-box-orient: vertical;
          -webkit-line-clamp: 2;
          overflow: hidden;
        }
        &:nth-of-type(3) {
          overflow: hidden;
          span {
            float: left;
            &:nth-of-type(1) {
              @include s_fontDemo(24px, 40px, $font-f48);
            }
            &:nth-of-type(2) {
              @include s_fontDemo(35px, 35px, $font-f48);
            }
            &:last-of-type {
              float: right;
              @include s_fontDemo(24px, 35px, $font-ad);
            }
          }
        }
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/main/specialty.scss 
 
@import "../common.scss";

.specialty {
  .spacialty-category {
    margin-bottom: 20px;
    .specialty-list-title {
      height: 92px;
      @include s_fontDemo(32px, 92px, $font-33);
      padding-left: 30px;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      background: $bg-ff;
      &>span {
        width: 250px;
      }
      p {
        -webkit-box-flex: 1;
            -ms-flex: 1;
                flex: 1;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: end;
            -ms-flex-pack: end;
                justify-content: flex-end;
        -webkit-box-align: center;
            -ms-flex-align: center;
                align-items: center;
        padding-right: 20px;
        @include s_border_b;
        span {
          @include s_fontDemo(24px, 92px, $font-99);
        }
        .am-icon {
          color: $font-99;
        }
      }
    }
    .specialty-list {
      box-sizing: border-box;
      padding-top: 5px;
      overflow-y: auto;
      background: $bg-ff;
    }
  }
  .sc-ad {
    padding: 0;
    padding-top: 100px;
    box-sizing: border-box;
    width: 100%;
    height: auto;
    img {
      width: 100%;
    }
    p {
      left: 0;
      bottom: 0;
    }
  }
}
         
 
 
 
 shangcheng/styles/message/index.scss 
 
@import "../common.scss";

.message {
  background: $bg-ff;
  .message-list {
    padding-left: 30px;
    li {
      padding: 30px;
      @include s_border_b;
      .sc-badge-icon {
        left: 120px;
        right: auto;
        top: 20px;
        transform: translateX(25px);
      }
      dl {
        overflow: hidden;
        position: relative;
        dt {
          @include sc_img_container(96px, 96px);
          border-radius:12px;
          float: left;
          margin-right: 20px;
        }
        dd {
          float: left;
          width: calc(100% - 120px);
          &:nth-of-type(1) {
            p:nth-of-type(1) {
              float: left;
              @include s_fontDemo(34px, 60px, $font-33);
            }
            p:nth-of-type(2) {
              float: right;
              @include s_fontDemo(24px, 60px, $font-99);
            }
          }
          &:nth-of-type(2) {
            @include s_fontDemo(28px, 28px, $font-99);
          }
        }
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/message/message-dialog.scss 
 
@import "../common.scss";

// 对话title模块
.wkit-theme-custom .wkit-title {
  background: #fff !important;
  color: $font-33 !important;
  font-size: 72px;
}

// 对话内容模块
.wkit-clear{
  background-color: $bg-f3;
}
.wkit-msg-content {
  @include s_border_t;
  background: $bg-f3 !important;
}
.wkit-msg-wrap {
  padding-top: .3rem;
  padding-bottom: .3rem;
}
.wkit-msg-wrap .wkit-msg-inner .wkit-msg-item {
  background: $bg-ff;
}
.wkit-msg-wrap.wkit-r .wkit-arr {
  border-color: $bg-ff transparent transparent !important;
}
.wkit-msg-wrap.wkit-s .wkit-msg-item {
  color: $font-ff !important;
  line-height: 64px;
}
.wkit-msg-time {
  @include s_fontDemo(48px, 88px, $font-ad);
  span {
    display: none;
  }
}

// 输入框模块
.wkit-input-content {
  background: $bg-ff !important;
}

// 输入框模块 - button
.wkit-theme-custom .wkit-input-wrap button {
  background: $theme !important;
  color: $font-ff !important;
}

// 商户的icon
#business-icon {
  @include s_blockDemo(160px, 160px);
  position: absolute;
  left: 60px;
  bottom: 260px;
  z-index: 10;
  background:rgba(0,0,0,0.70);
  border-radius:100%;
  img {
    padding-top: 15%;
    height: 70%;
    margin: 0 auto;
    display: block;
  }

}
         
 
 
 
 shangcheng/styles/refund/consult-list.scss 
 
@import "../common.scss";

.consult-list {
  .consult-item {
    margin-bottom: 20px;
    .consult-item-header {
      padding: 30px;
      @include s_border_b;
      .consult-item-header-left {
        @include sc_img_container(90px, 90px);
        float: left;
        margin-right: 30px;
      }
      .consult-item-header-right {
        span {
          display: block;
          &:nth-of-type(1) {
            padding-bottom: 10px;
            @include s_fontDemo(28px, 28px, $font-33);
            margin-bottom: 17px;
          }
          &:nth-of-type(2) {
            @include s_fontDemo(24px, 24px, $font-ad);
          }
        }
      }
    }
    .consult-item-bottom {
      padding-left: 30px;
      @include s_border_b;
      @include s_fontDemo(24px, 85px, $font-33);
    }
  }
}
         
 
 
 
 shangcheng/styles/refund/index.scss 
 
@import "../common.scss";

.refund {

  .refund-header {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    padding: 30px;
    margin-bottom: 20px;
    background: $bg-ff;
    .refund-header-left {
      @include sc_img_container(152px, 152px);
      margin-right: 20px;
    }
    .refund-header-right {
      p {
        &:nth-of-type(1) {
          @include s_fontDemo(28px, 35px, $font-33);
          margin-bottom: 13px;
          height: 70px;
        }
        &:nth-of-type(2) {
          @include s_fontDemo(24px, 30px, $font-ad);
        }
      }
    }
  }
  .refund-bottom {
    .refund-select {
      padding-left: 30px;
      background: $bg-ff;
      .refund-select-item {
        padding: 30px 20px 30px 0;
        @include s_border_b;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: justify;
            -ms-flex-pack: justify;
                justify-content: space-between;
        -webkit-box-align: center;
            -ms-flex-align: center;
                align-items: center;
        .refund-select-item-left {
          p {
            &:nth-of-type(1) {
              @include s_fontDemo(28px, 40px, $font-33);
              margin-bottom: 13px;
            }
            &:nth-of-type(2) {
              @include s_fontDemo(24px, 36px, $font-ad);
            }
          }
        }
        .refund-select-item-right {
          @include s_blockDemo(40px, 40px);
          color: $font-cc;
        }
      }
    }
    .refund-write {
      background: $bg-ff;
      .am-list-line {
        @include s_border_b;
      }
    }

    .refund-bottom-title {
      float: left;
      @include s_fontDemo(28px, 90px, $font-33);
    }
    .refund-price {
      margin-top: 20px;
      background: $bg-ff;
      /* .refund-price-top {*/
      /*   overflow: hidden;*/
      /*   padding-left: 30px;*/
      /*   .sell-price {*/
      /*     float: left;*/
      /*     line-height: 90px !important;*/
      /*   }*/
      /* }*/
      .refund-price-top {
        .am-input-control input {
          text-align: left;
          color: $font-f48 !important;
        }
        .am-input-label.am-input-label-5 {
          width: auto;
        }
      }
      .refund-price-bottom {
        padding-left: 30px;
        @include s_fontDemo(24px, 60px, $font-99);
        background: $bg-f3;
      }
    }
    .refund-reason {
      background: $bg-ff;
      padding-left: 30px;
      margin-bottom: 20px;
      .am-input-label.am-input-label-5 {
        width: auto;
      }
      .am-input-control input {
        text-align: left;
      }
    }
    .select-pic {
      background: $bg-ff;
      padding-bottom: 20px;
      &>h1 {
        @include s_fontDemo(28px, 28px, $font-33);
        padding: 30px 30px 12px;
        font-weight: normal;
      }
      .am-image-picker-list {
        margin-bottom: 0;
      }
      .am-wingblank.am-wingblank-md {
        margin-left: 30px;
        margin-right: 30px;
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/refund/refund-info.scss 
 
@import "../common.scss";

.refund-info {

  .refund-info-header {
    @include s_defaultList;
    @include s_border-b;
    margin-bottom: 20px;
    span {
      &:nth-of-type(1) {
        @include s_fontDemo(28px, 87px, $font-33);
        float: left;
      }
      &:nth-of-type(2) {
        @include s_fontDemo(24px, 87px, $font-ad);
        float: right;
      }
    }
  }
  .refund-info-status {
    margin-bottom: 20px;
    p {
      @include s_defaultList;
      &.refund-info-common-header {
        @include s_fontDemo(28px, 92px, $font-33);
        @include s_border-b;
      }
      &.font-24-ad {
        padding-top: 27px;
        padding-bottom: 27px;
        @include s_fontDemo(24px, 30px, $font-ad);
      }
      &.apply-button {
        @include s_fontDemo(24px, 48px, $font-99);
        padding-bottom: 30px;
        span {
          float: right;
          border: 1px solid #e5e5e5;
          border-radius: 4px;
          width: 152px;
          height: 48px;
          margin-left: 10px;
          text-align: center;
        }
      }
    }
    .refund-info-reject {
      padding-left: 0;
      span {
        display: block;
        padding-left: 30px;
        &:nth-of-type(1) {
          @include s_fontDemo(28px, 90px, $font-33);
          @include s_border-b;
        }
        &:nth-of-type(2) {
          padding-top: 27px;
          padding-bottom: 27px;
          @include s_fontDemo(24px, 30px, $font-ad);
          a {
            color: $font-ad;
          }
        }
      }
    }
    .refund-info-amount {
      overflow: hidden;
      @include s_fontDemo(28px, 90px, $font-33);
      span {
        &:nth-of-type(1) {
          float: left;
        }
        &:nth-of-type(2) {
          float: right;
        }
      }
    }
    .express-show {
      background: $bg-ff;
      @include s_border;
      .am-list-line {
        height: auto !important;
        border-bottom: none;
      }
      p {
        padding-left: 0;
        span {
          @include s_fontDemo(24px, 30px, $font-ad);
          display: block;
          margin-bottom: 13px;
          &:last-of-type {
            margin-bottom: 0;
          }
        }
      }
      .am-icon {
        width: 55px;
        height: 55px;
        color: #ccc;
      }
    }
  }
  .refund-info-history {
    margin-bottom: 20px;
  }
  .refund-info-detail {
    @include s_defaultList;
    padding-bottom: 30px;
    .commodity-info {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      margin-bottom: 30px;
      h5 {
        font-weight: normal;
        &:nth-of-type(1) {
          @include sc_img_container(152px, 152px);
          margin-right: 20px;
        }
        &:nth-of-type(2) {
          span {
            display: block;
            &:nth-of-type(1) {
              @include s_fontDemo(28px, 35px, $font-33);
              margin-bottom: 13px;
              height: 70px;
            }
            &:nth-of-type(2) {
              @include s_fontDemo(24px, 30px, $font-ad);
            }
          }
        }
      }
    }
    p {
      @include s_fontDemo(24px, 30px, $font-ad);
      &:nth-of-type(1) {
        @include s_fontDemo(28px, 88px, $font-33);
        margin-bottom: 0px;
      }
    }
  }
  .am-grid.am-grid-line .am-flexbox {
    margin-bottom: 20px;
    &:after {
      border-bottom: none;
    }
    .am-flexbox-item {
      margin-right: 20px;
      @for $i from 1 to 10{
        &:nth-of-type(#{$i*4}){margin-right:0;}
      }
      .am-grid-item-content {
        overflow: hidden;
        img {
          height: 100%;
          width: auto;
          @include s_allCenter;
        }
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/user-center/attention-list.scss 
 
@import "../common.scss";

.attention-list-container {

  @include s_border_t;
  .attention-list {
    overflow: auto;
    .attention-item {
      width: 100%;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      @include s_border_b;
      background: $bg-ff;
      &.active {
        .attention-item-left {
          width: 0px;
          margin-left: 0px;
        }
        .attention-item-right {
          width: 140px;
        }
      }
      .attention-item-left {
        @include sc_img_container(100px, 100px);
        margin-left: 30px;
        margin-right: 20px;
        -webkit-transition: .3s;
        transition: .3s;
      }
      .attention-item-mid {
        -webkit-box-flex: 1;
            -ms-flex: 1;
                flex: 1;
        height: 160px;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: justify;
            -ms-flex-pack: justify;
                justify-content: space-between;
        -webkit-box-align: center;
            -ms-flex-align: center;
                align-items: center;
        span {
          margin-top: -50px;
          @include s_fontDemo(28px, 33px, $font-33);
        }
        .am-icon {
          height: 40px;
          margin-right: 30px;
          display: -webkit-box;
          display: -ms-flexbox;
          display: flex;
          -webkit-box-pack: justify;
              -ms-flex-pack: justify;
                  justify-content: space-between;
          -webkit-box-align: center;
              -ms-flex-align: center;
                  align-items: center;
        }
      }
      .attention-item-right {
        width: 0px;
        @include s_fontDemo(24px, 48px, $font-ff);
        background: $font-f48;
        text-align: center;
        height: 160px;
        overflow: hidden;
        -webkit-transition: .3s;
        transition: .3s;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
            -ms-flex-direction: column;
                flex-direction: column;
        -webkit-box-align: center;
            -ms-flex-align: center;
                align-items: center;
        -webkit-box-pack: center;
            -ms-flex-pack: center;
                justify-content: center;
        span {
          display: block;
        }
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/user-center/collect-list.scss 
 
@import "../common.scss";

.collect-list-container {

  @include s_border_t;
  .collect-list {
    overflow: auto;
    .collect-item {
      padding-bottom: 10px;
      width: 100%;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      background: $bg-ff;
      &.active {
        .collect-item-left {
          width: 125px;
        }
        .collect-item-right {
          width: 120px;
        }
      }
      .collect-item-left {
        @include sc_img_container(250px, 250px);
        margin-right: 20px;
        -webkit-transition: .3s;
        transition: .3s;
      }
      .collect-item-mid {
        @include s_border_b;
        -webkit-box-flex: 1;
            -ms-flex: 1;
                flex: 1;
        height: 224px;
        padding-right: 30px;
        padding-bottom: 36px;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
            -ms-flex-direction: column;
                flex-direction: column;
        -webkit-box-pack: justify;
            -ms-flex-pack: justify;
                justify-content: space-between;
        .collect-item-mid-top {
          padding-top: 16px;
          @include s_fontDemo(28px, 35px, $font-33);
        }
        .collect-item-mid-bottom {
          height: 40px;
          display: -webkit-box;
          display: -ms-flexbox;
          display: flex;
          -webkit-box-pack: justify;
              -ms-flex-pack: justify;
                  justify-content: space-between;
          -webkit-box-align: center;
              -ms-flex-align: center;
                  align-items: center;
        }
      }
      .collect-item-right {
        width: 0px;
        @include s_fontDemo(28px, 260px, $font-ff);
        background: $font-f48;
        text-align: center;
        height: 260px;
        overflow: hidden;
        -webkit-transition: .3s;
        transition: .3s;
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/user-center/index.scss 
 
@import "../common.scss";

.my-center {
  .new-user-center-header {
    width: 100%;
  }
  .user-center-header {
    padding: 60px 30px;
    // background: url(../../img/user_center_bg.png) repeat-y left top;
    background-size: cover;
    overflow: hidden;
    p {
      @include sc_img_container(120px, 120px);
      border-radius: 100%;
      margin-right: 30px;
      float: left;
    }
    span {
      float: left;
      @include s_fontDemo(36px, 120px, $font-ff);
    }
  }
  .features {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    height: 180px;
    -ms-flex-pack: distribute;
        justify-content: space-around;
    background: $bg-ff;
    margin-bottom: 20px;
    li {
      padding-top: 40px;
      padding-bottom: 30px;
      -webkit-box-flex: 1;
          -ms-flex: 1;
              flex: 1;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
          -ms-flex-direction: column;
              flex-direction: column;
      -webkit-box-pack: center;
          -ms-flex-pack: center;
              justify-content: center;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      p {
        &:nth-of-type(1) {
          width: 50px;
          height: 50px;
          position: relative;
          img {
            /* width: 100%;*/
            height: 96%;
          }
          .sc-badge-icon {
            top: -13px;
          }
        }
        &:nth-of-type(2) {
          @include s_fontDemo(24px, 64px, $font-66);
        }

      }
    }
  }
  /* 改变默认样式*/
  .am-list-item .am-list-line .am-list-extra {
    font-size: 24px;
    color: $font-99;
  }
}
         
 
 
 
 shangcheng/styles/user-center/order-detail.scss 
 
@import "../common.scss";

.order-detail {

}
         
 
 
 
 shangcheng/styles/user-center/order-list.scss 
 
@import "../common.scss";

.order-list-container {

  .fitlers {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center;
    background: $bg-ff;
    @include s_border_b;
    li {
      -webkit-box-flex: 1;
          -ms-flex: 1;
              flex: 1;
      @include s_fontDemo(28px, 90px, $font-66);
      text-align: center;
      box-sizing: border-box;
      border-bottom: 5px solid $font-ff;
      &.active {
        color: $theme;
        font-size: 32px;
        font-weight: bold;
        border-bottom: 5px solid $theme;
      }
    }
  }
  .order-list {
    overflow: auto;
    height: calc(100% - 90px);
    -webkit-overflow-scrolling: touch;
    .order-item {
      background: $bg-ff;
      margin-bottom: 20px;
      .order-item-title {
        height: 96px;
        padding-left: 30px;
        padding-right: 30px;
        p {
          float: left;
          &:nth-of-type(1) {
            @include sc_img_container(36px, 36px);
            margin-top: 30px;
            margin-right: 20px;
          }
          &:nth-of-type(2) {
            @include s_fontDemo(28px, 96px, $font-33);
          }
          &:nth-of-type(3) {
            float: right;
            @include s_fontDemo(28px, 96px, $theme);
          }
        }
      }
      .order-item-info {
        background: $bg-f8;
        padding: 20px 30px;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        margin-bottom: 10px;
        &:last-of-type {
          margin-bottom: 0;
        }
        p {
          &:nth-of-type(1) {
            @include sc_img_container(150px, 150px);
            margin-right: 20px;
          }
          &:nth-of-type(2) {
            @include s_fontDemo(28px, 35px, $font-33);
            -webkit-box-flex: 1;
                -ms-flex: 1;
                    flex: 1;
            span {
              display: block;
              &:nth-of-type(2) {
                margin-top: 13px;
                @include s_fontDemo(24px, 30px, $font-ad);
              }
            }
          }
          &:nth-of-type(3) {
            float: right;
            text-align: right;
            @include s_fontDemo(28px, 28px, $font-33);
            width: 140px;
            span {
              display: block;
              &:nth-of-type(2) {
                @include s_fontDemo(24px, 34px, $font-ad);
              }
              &:nth-of-type(3) {
                @include s_fontDemo(24px, 38px, #ff6e19);
              }
            }
            del {
              margin-top: 10px;
              @include s_fontDemo(28px, 28px, $font-ad);
            }
          }
        }
      }
      .order-item-num {
        @include s_fontDemo(24px, 87px, $font-33);
        text-align: right;
        @include s_border_b;
        padding-right: 30px;
        span:nth-of-type(2) {
          font-size: 32px;
        }
      }
      .order-item-edit {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: end;
            -ms-flex-pack: end;
                justify-content: flex-end;
        -webkit-box-align: center;
            -ms-flex-align: center;
                align-items: center;
        height: 94px;
        padding-right: 30px;
        p {
          @include s_blockDemo(152px, 52px);
          border:1px solid #999999;
          border-radius:4px;
          @include s_fontDemo(24px, 52px, $font-99);
          text-align: center;
          &:nth-of-type(1) {
            margin-right: 20px;
          }
          &:nth-of-type(2), &.high-light {
            color: $font-ff;
            background: $theme;
            border-color: $theme;
          }
          &:last-of-type {
            margin-right: 0;
          }
        }
      }
    }
  }
  /* 默认样式*/
  .cancel-order-picker.am-list-item .am-list-line {
    @include s_blockDemo(152px, 52px);
    font-size: 0.24rem;
    line-height: 0.52rem;
    color: $font-99;
    text-align: center;
    padding-right: 10px;
    border-bottom: none;
    .am-list-extra {
      display: none;
    }
    .am-list-content {
      border:1px solid #999999;
      @include s_fontDemo(24px !important, 52px, $font-99 !important);
      border-radius: 0.04rem;
      text-align: center;
      padding: 0;
    }
  }
}
         
 
 
 
 shangcheng/styles/user-center/order.scss 
 
@import "../common.scss";

.order {
  max-height: 100%;
  padding-bottom: 1.3rem;
  .cart-brand-item {
    margin-top: 20px;
  }
  .freight {
    background: $bg-ff;
    @include s_fontDemo(28px, 89px, $font-33);
    @include s_border_b;
    padding-left: 30px;
    padding-right: 30px;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: justify;
        -ms-flex-pack: justify;
            justify-content: space-between;
  }

  .footer {
    position: absolute;
    bottom: 0;
    width: 100%;
    height: 99px;
    @include s_border_t;
    background: $bg-ff;
    span {
      line-height: 99px;
    }
    .footer-left {
      float: left;
      padding-left: 30px;
    }
    .sell-price {
      float: left;
    }
    .footer-right {
      float: right;
      width: 260px;
      @include s_fontDemo(34px, 99px, $font-ff);
      text-align: center;
      background: $disable;
      &.active {
        background: $theme;
      }
    }
  }

  /* cart-brand-item样式*/
  .cart-brand-item-title {
    background: $bg-ff;
    .cart-commodity-item {
      margin-bottom: 10px;
      &:last-of-type {
        margin-bottom: 0;
      }
    }
  }
}
         
 
 
 
 shangcheng/styles/user-center/refund-list.scss 
 
@import "../common.scss";

.refund-list-container {

  .refund-list {
    overflow: auto;
    height: 100%;
    .refund-item {
      background: $bg-ff;
      margin-bottom: 20px;
      .refund-item-title {
        height: 96px;
        padding-left: 30px;
        padding-right: 30px;
        p {
          float: left;
          &:nth-of-type(1) {
            @include sc_img_container(36px, 36px);
            margin-top: 30px;
            margin-right: 20px;
          }
          &:nth-of-type(2) {
            @include s_fontDemo(28px, 96px, $font-33);
          }
          &:nth-of-type(3) {
            float: right;
            @include s_fontDemo(28px, 96px, $theme);
          }
        }
      }
      .refund-item-info {
        background: $bg-f8;
        padding: 20px 30px;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        .commodity-img {
          @include sc_img_container(150px, 150px);
          margin-right: 20px;
        }
        .refund-item-info-right {
          -webkit-box-flex: 1;
              -ms-flex: 1;
                  flex: 1;
          .refund-item-info-right-top {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-align: center;
                -ms-flex-align: center;
                    align-items: center;
            p {
              &:nth-of-type(1) {
                @include s_fontDemo(28px, 35px, $font-33);
                -webkit-box-flex: 1;
                    -ms-flex: 1;
                        flex: 1;
                span {
                  display: block;
                  &:nth-of-type(2) {
                    margin-top: 13px;
                    @include s_fontDemo(24px, 30px, $font-ad);
                  }
                }
              }
              &:nth-of-type(2) {
                width: 140px;
                @include s_fontDemo(24px, 35px, $font-ad);
                text-align: right;
                span {
                  display: block;
                }
              }
            }
          }
          .refund-item-info-right-bottom {
            @include s_fontDemo(24px, 32px, $font-f48);
            padding-top: 12px;
            padding-bottom: 18px;
            text-align: right;
          }
        }
      }
      .refund-status {
        @include s_fontDemo(28px, 84px, $font-33);
        @include s_border_b;
        padding-left: 30px;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: start;
            -ms-flex-pack: start;
                justify-content: flex-start;
        -webkit-box-align: center;
            -ms-flex-align: center;
                align-items: center;
        .am-icon {
          margin-right: 15px;
        }
        span:first-of-type {
          margin-right: 20px;
        }
      }
      .refund-item-edit {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: end;
            -ms-flex-pack: end;
                justify-content: flex-end;
        -webkit-box-align: center;
            -ms-flex-align: center;
                align-items: center;
        height: 94px;
        padding-right: 30px;
        p {
          @include s_blockDemo(152px, 52px);
          border:1px solid $theme;
          border-radius:4px;
          @include s_fontDemo(24px, 52px, $theme);
          text-align: center;
        }
      }
    }
  }

}
