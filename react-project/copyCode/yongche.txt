         
 
 
 
 yongche/actions/index.js 
 
import { send as preSend, get as preGet, getStore } from '@boluome/common-lib'

export const get = (url, data = {}, headers = {}) => {
  if (url.indexOf('basis') < 0 && url.indexOf('rating') < 0) {
    headers.model = getStore('isSinglePrice', 'session') ? 'fixed' : 'realtime'
  }
  return preGet(url, data, headers)
}

export const send = (url, data = {}, headers = {}) => {
  if (url.indexOf('basis') < 0 && url.indexOf('rating') < 0) {
    headers.model = getStore('isSinglePrice', 'session') ? 'fixed' : 'realtime'
  }
  return preSend(url, data, headers)
}
         
 
 
 
 yongche/actions/invoice-info.js 
 
         
 
 
 
 yongche/actions/order-cancel.js 
 
import { getStore } from '@boluome/common-lib'
import { Toast } from 'antd-mobile'
import { send } from './'

import { cancelOrder } from './order-id'

export const putCancleReason = reason => dispatch => {
  const id = location.pathname.split('/')[3]
  send('/order/v1/cancel_reason', { orderType: 'yongche', id, reason }).then(({ code, message }) => {
    if (code === 0) {
      const channel = getStore('channel', 'session')
      // status等于2表示是从cancel页面执行的cancelOrder命令
      dispatch(cancelOrder(2, channel, reason))
    } else {
      Toast.fail(message)
    }
  })
}
         
 
 
 
 yongche/actions/order-id.js 
 
// import { browserHistory } from 'react-router'
import { getStore, setStore } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { login, afterOrdering } from 'business'
import coordtransform from 'coordtransform'

import { get, send } from './'

const useMock = false
const mockStatus = { status: 3, partnerStatus: 'NoDriverAvailable' }

const getOrderStatusMid = (id, isFirst) => dispatch => {
  let closeLoading
  if (isFirst) closeLoading = Loading()
  get(`/order/v1/yongche/${ id }/info`).then(({ code, data, message }) => {
    if (code === 0) {
      let { status, partnerStatus } = data
      const { channel, mapType } = data
      setStore('channel', channel, 'session')
      if (useMock) {
        status = mockStatus.status
        partnerStatus = mockStatus.partnerStatus
      }
      // 将起终点、司机的经纬度转成高德的、
      if (mapType === 'baidu') {
        const originPoint = coordtransform.bd09togcj02(data.origin.longitude, data.origin.latitude)
        const destinationPoint = coordtransform.bd09togcj02(data.destination.longitude, data.destination.latitude)
        data.origin.longitude = originPoint[0]
        data.origin.latitude = originPoint[1]
        data.destination.longitude = destinationPoint[0]
        data.destination.latitude = destinationPoint[1]
        if (data.driver) {
          // 司机位置
          const driverPoint = coordtransform.bd09togcj02(data.driver.longitude, data.driver.latitude)
          data.driver.latitude = driverPoint[0]
          data.driver.longitude = driverPoint[1]
        }
      }
      // 司机经纬度改变
      // let driverPoint = []
      // if (data.driver) {
      //   driverPoint = coordtransform.bd09togcj02(data.driver.longitude, data.driver.latitude)
      //   data.driver.longitude = driverPoint[0]
      //   data.driver.latitude = driverPoint[1]
      // }

      /*
      status:
          2: 行程结束
          4: 已完成
          5: 取消中
          6: 退款中
          7: 已退款
          8: 已取消
          9:
            'Pending': 等待司机接单
            'NoDriverAvailable': 无司机接单
            'Accepted': 司机已接单
            'Charging': 行程中
          10: 订单失败
          11: 等待退款
          12: 支付处理中
      */
      // 个人定义的 currentStatus：0: 无司机接单，1: 等待司机接单，2:司机已接单，3:行程中，4:待支付，5:已支付, 8:取消订单, 11:等待退款, 12: 支付处理中
      // 默认状态是等待司机接单
      let currentStatus = 1
      if (status === 2 || status === 4 || status === 9) {     // 将司机无应答设为false
        dispatch({ type: 'SET_NO_DRIVER_RESPONSE', noDriverResponse: false })
      }
      switch (status) {
        // 因为在关闭页面的时候，会清除所有定时器，所以当前页面只需要有一个地方清除排单中或行程中的定时器就行了，又由于一口价的存在，行程中状态后不存在待支付状态，所以要在完成时，也清楚定时器
        case 2:
          currentStatus = 4
          // 关闭行程中的定时器
          clearInterval(window[`${ id }_charging`])
          window[`${ id }_charging`] = ''
          break
        case 4:
          currentStatus = 5
          clearInterval(window[`${ id }_charging`])
          window[`${ id }_charging`] = ''
          break
        case 5:     // 取消中
        case 6:     // 退款中
        case 7:     // 已退款订单，只会在cancel-info页面用到
        case 8:     // 取消订单，只会在cancel-info页面用到
          currentStatus = 8
          if (partnerStatus === 10 || partnerStatus === 'NoDriverAvailable') {
            currentStatus = 0
            dispatch({ type: 'SET_NO_DRIVER_RESPONSE', noDriverResponse: true })
          }
          if (window[id]) {
            clearInterval(window[id])
            window[id] = ''
          }
          // 删除localStorage中相关的定时器
          // removeStore(`startTime_${ id }`)      // 记录开始时间的定时器
          break
        case 9:
          switch (partnerStatus) {
            case 'Pending':
            case 0:
              currentStatus = 1
              // 当当页没有或是从其他页返回到订单详情页（window[id] === null）时，设置一个等待应答过程的订单轮询，每30s一次，当无应答，行程中 时 以及订单取消的接口请求中, 退出当前页 关闭
              if (!window[id] || window[id] === null) window[id] = setInterval(() => dispatch(getOrderStatusMid(id)), 3000)
              break
            case 'Accepted':
            case 1:
              currentStatus = 2
              data.displayStatus = '司机已接单，请您及时到达上车地点'
              if (!window[id] || window[id] === null) window[id] = setInterval(() => dispatch(getOrderStatusMid(id)), 3000)
              break
            case 'Arrived':
            case 2:
              if (channel === 'shenzhou') {
                currentStatus = 3
              } else {
                currentStatus = 2
              }
              data.displayStatus = '司机已到达上车地点'
              if (!window[id] || window[id] === null) window[id] = setInterval(() => dispatch(getOrderStatusMid(id)), 3000)
              break
            case 'Charging':
            case 3:
            case 4:
              currentStatus = 3
              data.displayStatus = '开始行程，祝您旅途愉快'
              if (window[id]) {
                clearInterval(window[id])
                window[id] = ''
              }
              // 设置一个行程中过程的订单轮询，每60s一次，当已评价时 以及订单取消的接口请求中, 退出当前页 关闭
              if (!window[`${ id }_charging`] || window[`${ id }_charging`] === null) window[`${ id }_charging`] = setInterval(() => dispatch(getOrderStatusMid(id)), 6000)
              break
            default:
              // Toast.fail('订单返回状态错误')
              console.log('订单返回状态错误')
              break
          }
          break
        case 11:
          currentStatus = 11
          // 删除localStorage中相关的定时器
          // removeStore(`startTime_${ id }`)      // 记录开始时间的定时器
          break
        case 12:
          currentStatus = 12
          break
        default:
          // Toast.fail('订单返回状态错误')
          console.log('订单返回状态错误')
          currentStatus = 8
          break
      }
      // 模拟司机位置改变
      // data.driver = {}
      // data.driver.latitude = 31.244870662083018 + (Math.random() * 0.01)
      // data.driver.longitude = 121.49448545338123 + (Math.random() * 0.01)
      // console.log(11111, data.driver.latitude, data.driver.longitude)
      dispatch({ type: 'SET_CURRENT_STATUS', currentStatus, currentOrderInfo: data })
    } else {
      Toast.fail(message)
    }
    if (closeLoading) closeLoading()
  })
}

export const getOrderStatus = id => dispatch => {
  if (!getStore('customerUserId', 'session')) {
    const closeLoading = Loading()
    login(err => {
      if (err) {
        console.log('login err')
      } else {
        dispatch(getOrderStatusMid(id))
      }
      closeLoading()
    })
  } else {
    dispatch(getOrderStatusMid(id))
  }
}


export const cancelOrder = (status, channel, reason) => dispatch => {
  const closeLoading = Loading()
  const id = location.pathname.split('/')[3]
  if (!reason) reason = '无应答取消'
  send('/order/v1/cancel', { channel, orderType: 'yongche', id, reason }).then(({ code, message }) => {
    if (code === 0) {
      // 关闭轮询订单的定时器
      if (window[id]) {
        clearInterval(window[id])
        window[id] = ''
      }
      if (window[`${ id }_charging`]) {
        clearInterval(window[`${ id }_charging`])
        window[`${ id }_charging`] = ''
      }
      // 删除localStorage中相关的定时器
      // removeStore(`startTime_${ id }`)      // 记录开始时间的定时器
      if (status === 1) {
        if (getStore('isSinglePrice', 'session')) {
          dispatch(getOrderStatus(id))
        } else {
          // const productType = getStore('currentProduct', 'session') ? getStore('currentProduct', 'session').code : '14'
          // browserHistory.push(`/yongche/${ channel }/${ productType }`)
          window.history.back()
        }
      }
      if (status === 2) {       // 选择原因后跳转过来
        // 1s后跳转到订单取消详情页面，因为推送有时间差
        setTimeout(() => {
          window.history.back()
          // browserHistory.push(`/yongche/order/${ id }`)
          closeLoading()
        }, 1000)
        return
      }
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const placeEvaluate = (rating, comment, id) => dispatch => {
  const closeLoading = Loading()
  const channel = getStore('channel', 'session')
  const paras = { rating: Math.ceil(rating), comment, channel }
  send(`/yongche/v1/order/${ id }/rating`, paras, 'put').then(({ code, message }) => {
    if (code === 0) {
      dispatch(getOrderStatus(id))
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}

export const handleToPay = paras => {
  const closeLoading = Loading
  get('/yongche/v1/order/settlement', paras).then(({ code, data, message }) => {
    if (code === 0) {
      afterOrdering(data)
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 yongche/actions/product.js 
 
import { browserHistory } from 'react-router'
import { Toast, Modal } from 'antd-mobile'
import { getStore, setStore } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'
import { merge } from 'ramda'
import { afterOrdering } from 'business'
import coordtransform from 'coordtransform'

import { get, send } from './'

// 创建订单
export const createOrder = orderPara => dispatch => {
  const closeLoading = Loading()
  const userPhone = getStore('userPhone', 'session')
  const customerUserId = getStore('customerUserId', 'session')
  const channel = location.pathname.split('/')[2]
  // const imei = getStore('imei', 'session')
  const isSinglePrice = getStore('isSinglePrice', 'session')
  orderPara = merge(orderPara)({ userPhone, customerUserId, channel })
  // 如果productType是14，但是不是现在出发，就将productType换成13, 该表达式要放在改变departureTime之前
  if (orderPara.departureTime.length !== 2 && orderPara.productType === 14) orderPara.productType = 13
  if (orderPara.departureTime.length === 2) orderPara.departureTime = 'instant'
  // if (orderPara.departureTime.length === 2) orderPara.departureTime = moment('YYYY-MM-DD HH:mm')(new Date())
  if (!orderPara.contactPhone) {
    orderPara.contactPhone = userPhone
  }
  if (orderPara.flightNo && channel === 'shenzhou') orderPara.departureTime = ''
  const originPoint = coordtransform.gcj02tobd09(orderPara.origin.longitude, orderPara.origin.latitude)
  const destinationPoint = coordtransform.gcj02tobd09(orderPara.destination.longitude, orderPara.destination.latitude)
  orderPara.origin.longitude = originPoint[0]
  orderPara.origin.latitude = originPoint[1]
  orderPara.destination.longitude = destinationPoint[0]
  orderPara.destination.latitude = destinationPoint[1]
  orderPara.mapType = 'baidu'
  send('/yongche/v1/order', orderPara).then(({ code, data, message }) => {
    if (code === 0) {
      const { id } = data
      // 将下单成功的时间存到本地，不管是在首页下单，还是在详情页通过继续叫车下的单
      // setStore(`startTime_${ id }`, moment('YYYY-MM-DD HH:mm:ss')(new Date()))

      // 如果是一口价模式，不跳转页面，显示支付footer
      if (isSinglePrice) {
        afterOrdering(data)
        setTimeout(() => closeLoading(), 2000)
        return
      }
      // 如果是一口价模式，跳转到订单详情页
      browserHistory.push(`/yongche/order/${ id }`)
    } else if (code === 1000) {
      // 将已有的预估价格和时间清除
      if (orderPara.flightNo) {
        dispatch({ type: 'SET_FLIGHTNO_ERROR_INFO', flightNoError: true, flightNoErrorMessage: message })
        closeLoading()
        return
      }
      Toast.fail(message, 1)
    } else {
      Toast.fail(message, 1)
    }
    closeLoading()
  })
}

// 获取预估接驾时间
export const getEstimate = estimatePara => dispatch => {
  const closeLoading = Loading()
  const channel = location.pathname.split('/')[2]
  const { flightNo } = estimatePara
  let { departureTime, productType } = estimatePara
  // 如果productType是14，但是不是现在出发，就将productType换成13, 该表达式要放在改变departureTime之前
  if (departureTime.length !== 2 && departureTime !== 'instant' && productType === 14) productType = 13
  // 将productType保存到本地，供price-rules中，判断当前预估价的计价规则时使用
  setStore('productType', productType, 'session')
  // if (departureTime.length === 2) departureTime = moment('YYYY-MM-DD HH:mm')(new Date())
  if (departureTime.length === 2) departureTime = 'instant'
  if (flightNo && channel === 'shenzhou') departureTime = ''

  estimatePara = merge(estimatePara)({ channel, departureTime, productType })
  // 坐标转换：高德 -> 百度 (如果是切换类型请求的，这时保存的坐标就已经是转换之后的了)
  if (!estimatePara.mapType) {
    const startPoint = coordtransform.gcj02tobd09(estimatePara.startLongitude, estimatePara.startLatitude)
    const endPoint = coordtransform.gcj02tobd09(estimatePara.endLongitude, estimatePara.endLatitude)
    estimatePara.startLongitude = startPoint[0]
    estimatePara.startLatitude = startPoint[1]
    estimatePara.endLongitude = endPoint[0]
    estimatePara.endLatitude = endPoint[1]
    estimatePara.mapType = 'baidu'
  }
  get('/yongche/v1/estimate', estimatePara).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_ESTIMATA', estimate: data, [`estimatePara${ productType }`]: estimatePara })
      // 显示底部支付框
      dispatch({ type: 'SET_PAY_FOOTER_VISIBLE', payFooterShow: true })
    } else if (code === 1000) {
      // 将已有的预估价格和时间清除
      dispatch({ type: 'SET_ESTIMATA', estimate: '', [`estimatePara${ productType }`]: estimatePara })
      if (flightNo) {
        dispatch({ type: 'SET_FLIGHTNO_ERROR_INFO', flightNoError: true, flightNoErrorMessage: message })
      } else {
        Toast.fail(message, 1)
      }
    } else {
      Toast.fail(message, 1)
    }
    closeLoading()
  })
}


// 检查是否有带支付或行程中订单
export const checkOrder = () => dispatch => {
  const channel = getStore('channel', 'session')
  const phone = getStore('userPhone', 'session')
  const isSinglePrice = getStore('isSinglePrice', 'session')
  dispatch({ type: 'SET_ORDER_STATUE', hasUnpay: false, hasInStroke: false })
  get('/yongche/v1/order/ongoing', { channel, phone }).then(({ code, data, message }) => {
    if (code === 0) {
      // data = [{ status: 2, id: '898' }]        // mock
      if (data.length > 0) {
        const { status, id } = data.pop()
        if (status === 2 && !isSinglePrice) {
          const hasUnpay = true
          dispatch({ type: 'SET_ORDER_STATUE', hasUnpay, orderId: id })
        }
        if (status === 2 && isSinglePrice) {
          // 如果有行程中的订单，弹出确认框
          Modal.alert('您有一个待支付的订单，是否进入？', '', [
            { text: '否', onPress: () => console.log('cancel') },
            { text: '是', onPress: () => browserHistory.push(`/yongche/order/${ id }`) },
          ])
        }
        if (status === 9 && isSinglePrice) {
          // 如果有行程中的订单，弹出确认框
          Modal.alert('您有一个行程中的订单，是否进入？', '', [
            { text: '否', onPress: () => console.log('cancel') },
            { text: '是', onPress: () => browserHistory.push(`/yongche/order/${ id }`) },
          ])
        }
        if (status === 9 && !isSinglePrice) {
          dispatch({ type: 'SET_ORDER_STATUE', hasInStroke: true, orderId: id })
        }
      }
    } else {
      Toast.fail(message, 1)
    }
  })
}


// 获取附近车型（接口版）    (只有在选择起、始地和切换类型至送机模式时默认已有起始地的情况下)
export const getNearbyCar = estimatePara => dispatch => {
  const channel = location.pathname.split('/')[2]
  const closeLoading = Loading()
  const { startLatitude, startLongitude, productType } = estimatePara
  const paras = {
    channel,
    productType,
    latitude:  startLatitude,
    longitude: startLongitude,
  }
  get('/yongche/v1/ride/types', paras).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'SET_NEARBY_CAR', [`nearbyCarInfo${ productType }`]: data, [`currentCarInfo${ productType }`]: data[0] })
      estimatePara.rideType = data[0].rideType
      dispatch(getEstimate(estimatePara))
    } else {
      Toast.fail(message, 1)
    }
    closeLoading()
  })
}

// // 获取附近车型（写死版）
// export const getNearbyCar = () => dispatch => {
//   const channel = location.pathname.split('/')[2]
//   let nearbyCarInfo = [
//     { name: '舒适型', rideType: 'compact' },
//     { name: '商务型', rideType: 'premium' },
//     { name: '豪华型', rideType: 'luxury' },
//   ]
//   // 如果channel等于shenzhou，将将附近车型写死为神州对应的车型
//   if (channel === 'shenzhou') {
//     nearbyCarInfo = [
//       { rideType: 2, name: '公务轿车' },
//       { rideType: 3, name: '商务7座' },
//       { rideType: 4, name: '豪华轿车' },
//     ]
//   }
//   dispatch({ type: 'SET_NEARBY_CAR', nearbyCarInfo })
// }

// 根据城市信息获取经纬度
const cityDataToPoint = (address, cityName, callBack) => {
  const geocoder = new window.AMap.Geocoder()
  geocoder.getLocation(address, callBack)
  // geocoder.getPoint(address, callBack, cityName)
}

// 根据经纬度获取城市信息
const pointToCityData = (point, callBack) => {
  window.AMap.service('AMap.Geocoder', () => {
    const geocoder = new window.AMap.Geocoder({
      radius:     1000,
      extensions: 'all',
    })
    geocoder.getAddress(point, callBack)
  })
}

// 根据城市名获取经纬度，再根据经纬度去获取当前城市的信息, cityData: 当前城市的名称和id，type设置出发点还是到达点，productType设置产品类型
export const setDefaultPoint = cityData => dispatch => {
  const cTpCallback = (status, res) => {
    if (status === 'complete') {
      // 获得了有效的地址信息:
      const longitude = res.geocodes[0].location.lng
      const latitude = res.geocodes[0].location.lat

      const pTcCallback = (sta, data) => {
        if (sta === 'complete') {
          const { regeocode } = data
          const title = regeocode.pois.length > 0 ? regeocode.pois[0].name : '附近无可选上车地点'
          const detail = regeocode.pois.length > 0 ? regeocode.pois[0].address : '附近无可选上车地点'
          const pointData = merge(cityData)({ title, detail, latitude, longitude })
          // 需求：选择接、送机时，终、起点默认为当前城市的中心，所以有此操作
          setStore('defaultCityCenterObj', pointData, 'session')
          setStore('defaultPointObj', pointData, 'session')
          dispatch({ type: 'SET_START_POINT_OBJ', defaultCityCenterObj: pointData, defaultPointObj: pointData })
        } else {
          // 获取地址失败
          console.log('经纬度转化城市名失败')
        }
      }

      pointToCityData([longitude, latitude], pTcCallback)
    } else {
      // 获取地址失败
      console.log('城市名转化经纬度失败')
    }
  }
  cityDataToPoint(cityData.name, cityData.name, cTpCallback)
}


// 根据经纬度，解析出对应地址，作为默认的地址
export const setStartPointInLocation = (point, productType, cityData) => dispatch => {
  const closeLoading = Loading()
  // 获取附近地标，作为上车地点
  const callback = (status, reply) => {
    if (status === 'complete') {
      const title = reply.regeocode.pois.length > 0 ? reply.regeocode.pois[0].name : '附近无可选上车地点'
      const detail = reply.regeocode.pois.length > 0 ? reply.regeocode.pois[0].address : '附近无可选上车地点'
      const startPointObj = merge(cityData)({ title, detail, ...point })
      setStore('defaultPointObj', startPointObj, 'session')
      setStore(`startPointObj${ productType }`, startPointObj, 'session')
      setStore(`start_selectedCity${ productType }`, startPointObj, 'session')
      dispatch({ type: 'SET_START_POINT_OBJ', [`startPointObj${ productType }`]: startPointObj, defaultPointObj: startPointObj })
      dispatch({ type: 'SET_START_POINT_STR', [`startPointStr${ productType }`]: title })
      closeLoading()
      if (window.closeLoading) {
        window.closeLoading()
        delete window.closeLoading
      }
    } else {
      // 获取地址失败
      console.log('经纬度转化城市名失败')
    }
  }
  pointToCityData([Number(point.longitude), Number(point.latitude)], callback)
}

// 获取机场列表, type: 当前是起点还是终点
export const setStartPointInAirport = (type, productType, cityData) => dispatch => {
  const closeLoading = Loading()
  const channel = getStore('channel', 'session')
  // 如果session中保存有选中的地址，就使用地址里的id，如果没有，就使用start_selecctedCity的id，因为初始化时肯定保存了start_selecctedCity，不然会重新选择城市
  let cityId = cityData.id
  if (channel === 'didi') cityId = cityData.name

  get('/yongche/v1/city/airport', { channel, cityId }).then(({ code, data, message }) => {
    if (code === 0) {
      const { name, terminalCode } = data[0]
      const longitude = coordtransform.bd09togcj02(data[0].longitude, data[0].latitude)[0]
      const latitude = coordtransform.bd09togcj02(data[0].longitude, data[0].latitude)[1]
      let { address = '' } = data[0]
      if (!address) address = name
      // 将机场坐标获取详细地址，用于地图时，搜索驾车路径
      const airportCallback = (status, res) => {
        const title = res.regeocode.pois.length > 0 ? res.regeocode.pois[0].name : '附近无可选上车地点'
        const detail = res.regeocode.pois.length > 0 ? res.regeocode.pois[0].address : '附近无可选上车地点'
        const startPointObj = merge(cityData)({ latitude, longitude, title, detail, code: data[0].code, terminalCode })
        setStore(`${ type }PointObj${ productType }`, startPointObj, 'session')
        setStore(`${ type }_selectedCity${ productType }`, startPointObj, 'session')
        dispatch({ type: `SET_${ type.toUpperCase() }_POINT_OBJ`, [`${ type }PointObj${ productType }`]: startPointObj })
        dispatch({ type: `SET_${ type.toUpperCase() }_POINT_STR`, [`${ type }PointStr${ productType }`]: name })
        if (type === 'end') {
          // 因为默认起点是defaultPointObj，终点也默认了，这时就需要获取预估价格了,又因为这个只会在初始化时才会执行，所有所有参数都是默认
          const defaultPointObj = getStore('defaultPointObj', 'session')
          setStore(`startPointObj${ productType }`, defaultPointObj, 'session')
          setStore(`start_selectedCity${ productType }`, defaultPointObj, 'session')
          dispatch({ type: 'SET_START_POINT_OBJ', [`startPointObj${ productType }`]: defaultPointObj })
          dispatch({ type: 'SET_START_POINT_STR', [`startPointStr${ productType }`]: defaultPointObj.title })
          const estimatePara = {
            startLatitude:  defaultPointObj.latitude,
            startLongitude: defaultPointObj.longitude,
            startAddress:   defaultPointObj.detail,
            endLatitude:    latitude,
            endLongitude:   longitude,
            endAddress:     address,
            rideType:       channel === 'shenzhou' ? 2 : 'compact',
            departureTime:  channel === 'didi' && getStore('isSinglePrice', 'session') ? getStore('firstReverseTime', 'session') : ['今天', '现在'],
            airCode:        data[0].code,
            productType,
          }
          dispatch(getNearbyCar(estimatePara))
        }
      }
      pointToCityData([Number(longitude), Number(latitude)], airportCallback)
    } else {
      Toast.fail(message, 1)
    }
    closeLoading()
    if (window.closeLoading) {
      window.closeLoading()
      delete window.closeLoading
    }
  })
}

// 根据当前productType，来设置startPoint相关信息
export const setStartPoint = (point, productType, cityData) => dispatch => {
  if (productType === 'jieji' || productType === 7) {
    dispatch(setStartPointInAirport('start', productType, cityData))
    dispatch(setDefaultPoint(cityData))
  } else {
    dispatch(setStartPointInLocation(point, productType, cityData))
  }
}

// 检查当前城市，是否存在与城市列表中, 并根据productType来设置startPointObj
export const checkSupportThisCity = (point, city, productType) => dispatch => {
  let supportThisCity = false
  const channel = getStore('channel', 'session')
  const api = '/yongche/v1/cities'
  const body = { channel, type: 'start', productType }
  // 先获取定位城市对应的id
  get(api, body).then(({ code, data, message }) => {
    if (code === 0) {
      let cityData = data.filter(item => item.name === city)
      if (cityData.length === 1) {
        supportThisCity = true
        // 将找到的城市信息保存到本地
        cityData = cityData[0]
        // 如果当前是didi接口返回的城市列表，那么字段中就没有id，而是channelCityId，这就要进行一个转换
        if (!cityData.id) cityData.id = cityData.channelCityId
      }
      // 设置该城市的支持信息
      dispatch({ type: 'SET_PRODUCT_SUPPORT_THIS_CITY', supportThisCity })
      dispatch(setStartPoint(point, productType, cityData))
    } else {
      Toast.fail(message, 1)
    }
  })
}

// 获取附近支持产品类型
export const getNearbyProduct = (city, point) => dispatch => {
  const channel = location.pathname.split('/')[2]
  const transformPoint = coordtransform.gcj02tobd09(point.longitude, point.latitude)
  const paras = merge({ longitude: transformPoint[0], latitude: transformPoint[1] })({ channel })
  paras.mapType = 'baidu'
  get('/yongche/v1/product/types', paras).then(({ code, data, message }) => {
    if (code === 0) {
      const currentProductCode = getStore('currentProduct', 'session') ? getStore('currentProduct', 'session').code : ''
      let products = data
      if (products.length >= 0) {
        // 如果是神州，13和14合并成一个专车，默认使用的是14立即叫车，后期如果不是立即叫车，再把code改成13
        if (channel === 'shenzhou') {
          products = []
          data.forEach(item => {
            if (item.code === 7 || item.code === 8) {
              products.push(item)
            }
            if (item.code === 14) {
              item.name = '专车'
              products.unshift(item)
            }
          })
        }
        // 当当前链接中的product在列表中时，不改变currenProduct
        let currentProduct = products[0]
        products.forEach(item => {
          if (currentProductCode === item.code) {
            currentProduct = item
            return true
          }
        })
        dispatch({ type: 'SET_CURRENT_PRODUCT', currentProduct, products })
        setStore('currentProduct', currentProduct, 'session')
        dispatch(checkSupportThisCity(point, city, currentProduct.code))
      }
      // 如果附近没有服务，使用默认值
      // if (data.length === 0) {
      //   return
      // }
      // 如果附近有服务，默认使用第一个服务，然后去获取附近对应的车型
      // const nearCarPara = merge(point)({ productType: data[0].code })
      // dispatch(getNearbyCar(nearCarPara))
    } else {
      Toast.fail(message, 1)
    }
  })
}


// 获取首页初始化配置
export const getIndexInit = (name, point) => dispatch => {
  window.closeLoading = Loading()
  dispatch(getNearbyProduct(name, point))
  // dispatch(getNearbyCar())
}
         
 
 
 
 yongche/actions/stroke.js 
 
import { getStore } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get } from './'

// 获取订单列表
export const getOrderList = () => dispatch => {
  const userId = getStore('customerUserId', 'session')
  const channel = location.pathname.split('/')[2]
  const closeLoading = Loading()
  get('/yongche/v1/trip/list', { userId, channel }).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'GET_ORDER_LIST', orderList: data })
    } else {
      Toast.fail(message)
    }
    closeLoading()
  })
}
         
 
 
 
 yongche/common-components-self/address-left-component.js 
 
import React from 'react'
import { getStore, setStore } from '@boluome/common-lib'
import { Mask, SlidePage, CitySearch } from '@boluome/oto_saas_web_app_component'
import { Icon } from 'antd-mobile'

export default class LeftComponent extends React.Component {
  constructor(props) {
    super(props)
    this.localCity = getStore('localCity', 'session')
    this.channel = getStore('channel', 'session')
    const { selectedAddress } = props
    const currentCity = selectedAddress ? selectedAddress.name : this.localCity
    this.state = {
      currentCity,
    }
    this.handleCityData = this.handleCityData.bind(this)
    // 如果没有缓存中没有当前品类的城市列表，那就再请求一次，并将对应城市列表和初始当前城市信息缓存到本地
  }
  handleCityData(res) {
    const productType = getStore('currentProduct', 'session').code
    const { handleChangeCurrentCity, myAttribute } = this.props
    this.setState({
      currentCity: res.name,
    })
    setStore(`${ myAttribute }_selectedCity${ productType }`, res, 'session')
    handleChangeCurrentCity(res)
  }
  render() {
    const { currentCity } = this.state
    const { myAttribute } = this.props
    const productType = getStore('currentProduct', 'session').code
    const api = `/yongche/v1/cities/?channel=${ this.channel }&type=${ myAttribute }&productType=${ productType }&`
    const pStyle = {
      lineHeight:   '.52rem',
      height:       '.52rem',
      fontSize:     '.28rem',
      color:        '#888',
      background:   '#fff',
      paddingLeft:  '.05rem',
      paddingRight: '.05rem',
      textAlign:    'center',
      overflow:     'hidden',
      borderRadius: '.08rem',
      position:     'relative',
      marginTop:    '1px',
      border:       '1px solid #e4e4e5',
    }
    const spanStyle = {
      width:        'calc(100% - .3rem)',
      textOverflow: 'ellipsis',
      overflow:     'hidden',
      whiteSpace:   'nowrap',
      display:      'inline-block',
      float:        'left',
    }
    const svgStyle = {
      position:        'absolute',
      top:             '50%',
      transform:       'translateY(-50%)',
      WebkitTransform: 'translateY(-50%)',
      right:           '3px',
    }
    return (
      <p style={ pStyle } onClick={ () =>
        Mask(
          <SlidePage target='right' showClose={ false } >
            <CitySearch localCity={ this.localCity } categoryCode={ this.channel } showCancel='true' handleCityData={ this.handleCityData } api={ api } />
          </SlidePage>
          , { mask: false, style: { position: 'absolute' } })
        }
      >
        <span style={ spanStyle }>{ currentCity }</span>
        <Icon style={ svgStyle } type='down' size='xs' />
      </p>
    )
  }
}
         
 
 
 
 yongche/common-components-self/detail-list.js 
 
import React from 'react'

import '../styles/detail-list.scss'

const DetailList = ({ title, price = '', textStyle = {}, detailText, containerStyle = {}, titleBg = '#fff' }) => {
  return (
    <div className='detail-list-item' style={ containerStyle }>
      <div className='detail-list-title'>
        <p />
        <h5 style={{ background: titleBg }}>{ title }</h5>
      </div>
      {
        price !== '' &&
        <div className='total-price'>
          ¥ <span>{ price }</span>
        </div>
      }
      <ul className='detail'>
        {
          detailText.map(item => {
            return (
              <li key={ item.left }>
                <p style={ textStyle } className='left'>{ item.left }</p>
                <p className='right' style={ String(item.right).indexOf('-') >= 0 ? { color: '#ff4848' } : {} }>{ String(item.right).indexOf('-') >= 0 ? `${ item.right }` : `¥${ item.right }` }</p>
              </li>
            )
          })
        }
      </ul>
    </div>
  )
}

export default DetailList
         
 
 
 
 yongche/common-components-self/estimate-price.js 
 
import React from 'react'
import { Icon } from 'antd-mobile'

import '../styles/estimate-price.scss'
import DetailList from './detail-list'

const EstimatePrice = ({ handleContainerClose, handelRulesClick, estimate }) => {
  const { charges, price } = estimate
  const detailText = charges.map(o => ({ left: o.name, right: o.amount }))
  return (
    <div className='estimate-price-component'>
      <DetailList title='价格预估' price={ price } detailText={ detailText } titleBg='#f8f8f8' />
      <Icon className='close-icon' type={ require('svg/yongche/close.svg') } size='lg' onClick={ handleContainerClose } />
      <div className='price-rules'>
        <p onClick={ handelRulesClick }>
          <span>计价规则</span>
          <Icon type={ require('svg/yongche/problem.svg') } size='md' />
        </p>
      </div>
    </div>
  )
}

export default EstimatePrice
         
 
 
 
 yongche/common-components-self/evaluate.js 
 
import React, { Component } from 'react'
import { Evaluation } from '@boluome/oto_saas_web_app_component'
import { TextareaItem, Flex, Popup, Icon } from 'antd-mobile'
import { createForm } from 'rc-form'


class Evaluate extends Component {
  constructor(props) {
    super(props)
    const { rate } = props
    let currentValue = '100%'
    let currentText = '非常满意，无可挑剔'
    let textareaValue = ''
    if (rate) {
      currentValue = `${ rate.score / 0.05 }%`
      currentText = this.getCurrentText(String(rate.score), '')
      textareaValue = rate.comment
    }
    this.state = {
      currentValue,
      currentText,
      textareaValue,
    }
  }
  getCurrentText(value, currentText) {
    switch (value) {
      case '1':
        currentText = '非常不满意，各方面都很差'
        break
      case '2':
        currentText = '不满意，比较差'
        break
      case '3':
        currentText = '一般，还需改善'
        break
      case '4':
        currentText = '比较满意，仍可改善'
        break
      case '5':
        currentText = '非常满意，无可挑剔'
        break
      default:
        break
    }
    return currentText
  }
  handleSelectStar(currentValue) {
    const value = (currentValue.split('%')[0] / 20).toFixed(0)
    let { currentText } = this.state
    currentText = this.getCurrentText(value, currentText)
    this.setState({ currentValue, currentText })
  }
  handleTextareaChange(textareaValue) {
    this.setState({ textareaValue })
  }
  render() {
    const { currentText, currentValue, textareaValue } = this.state
    const { form, handlePlaceEvaluate, currentOrderInfo, rate } = this.props
    const { getFieldProps } = form
    const { id } = currentOrderInfo
    const rating = (currentValue.split('%')[0] / 20).toFixed(0)
    const FlexItem = Flex.Item
    return (
      <div className='evaluate'>
        <Flex className='header'>
          <FlexItem className='left' onClick={ () => Popup.hide() }><Icon type={ require('svg/yongche/my_cross.svg') } size='md' color='#f00' /></FlexItem>
          <FlexItem className='center'>评价</FlexItem>
          {
            !rate &&
            <FlexItem className='right' onClick={ () => { Popup.hide(); handlePlaceEvaluate(rating, textareaValue, id) } }>提交</FlexItem>
          }
          {
            rate &&
            <FlexItem className='right' />
          }
        </Flex>
        <div className='s-evaluation'>
          <Evaluation defaultValue={ currentValue } width={ '300px' } handleSelectStar={ rate ? '' : value => this.handleSelectStar(value) } />
        </div>
        <p className='evaluate-text'>{ currentText }</p>
        <TextareaItem
          { ...getFieldProps('count', {}) }
          placeholder='其他想说的（将匿名并延迟告知司机）'
          rows={ 5 }
          count={ 60 }
          disabled={ rate }
          value={ textareaValue }
          onChange={ val => this.handleTextareaChange(val) }
        />
      </div>
    )
  }
}

export default createForm()(Evaluate)
         
 
 
 
 yongche/common-components-self/no-support-city.js 
 
import React from 'react'
import { Mask, SlidePage, CitySearch } from '@boluome/oto_saas_web_app_component'
import { getStore } from '@boluome/common-lib'
import { Icon } from 'antd-mobile'

import '../styles/no-support-city.scss'

const NoSupportCity = ({ handleReloadCity, handleChangeCity, currentname, getLocationErr }) => {
  const uls = [
    {
      icon: require('svg/yongche/location.svg'),
      text: '重新定位',
    },
    {
      icon: require('svg/yongche/city.svg'),
      text: '切换城市',
    },
  ]
  const handleChangeCityClick = () => {
    const channel = location.pathname.split('/')[2]
    const localCity = getStore('localCity', 'session')
    Mask(
      <SlidePage showClose={ false }>
        <CitySearch localCity={ localCity } categoryCode='yongche' handleCityData={ handleChangeCity } api={ `/basis/v1/zhuanche/${ channel }/cities` } />
      </SlidePage>
    )
  }
  return (
    <div className='no-support-city'>
      <img src={ require('../img/no-support-city.png') } alt='没有支持的的城市' />
      <p className='text'>{ getLocationErr ? '定位失败，请确认定位授权与位置信息是否开启' : `抱歉，您所在的城市「${ currentname }」暂未开通该服务` }</p>
      <ul>
        {
          uls.map((item, index) => (
            <li key={ item.icon } onClick={ index === 0 ? handleReloadCity : handleChangeCityClick }>
              <h1>
                <Icon type={ item.icon } size='md' />
              </h1>
              <p>{ item.text }</p>
            </li>
          ))
        }
      </ul>
    </div>
  )
}
export default NoSupportCity
         
 
 
 
 yongche/common-components-self/order-item.js 
 
import React from 'react'
import { Icon, Flex } from 'antd-mobile'

import '../styles/order-item.scss'

const OrderItem = ({
  date, start = '没有传入起点', end = '没有传入终点',
  index, invoiceInfoArr, handleinvoiceInfoClick, hasLeft = false,
}) => {
  const FlexItem = Flex.Item
  return (
    <div className='order-item'>
      <Flex className='order-item-header'>
        {
          hasLeft &&
          <h1 className='order-item-left'>
            <Icon onClick={ () => handleinvoiceInfoClick(index, invoiceInfoArr) } type={ invoiceInfoArr[index] ? require('svg/yongche/circle.svg') : require('svg/yongche/no-select.svg') } size='md' />
          </h1>
        }
        <FlexItem className='order-item-right'>
          {
            date &&
            <div className='order-item-top'>
              <Icon type={ require('svg/yongche/time.svg') } size='xxs' />
              <span>{ date }</span>
            </div>
          }
          <div className='order-item-middle'>
            <p />
            <span>{ start }</span>
          </div>
          <div className='order-item-bottom'>
            <p />
            <span>{ end }</span>
          </div>
        </FlexItem>
      </Flex>
    </div>
  )
}

export default OrderItem
         
 
 
 
 yongche/common-components-self/pay-footer.js 
 
/*
  该组件是orderId页面，下方支付，评价所用的公共组件
*/

import React from 'react'
import { getStore } from '@boluome/common-lib'
import { ExchangeActivePopup } from '@boluome/oto_saas_web_app_component'
import { Popup, Icon } from 'antd-mobile'

import DetailList from './detail-list'
import Evaluate from './evaluate'

import '../styles/pay-footer.scss'

export default class PayFooter extends React.Component {
  constructor(props) {
    super(props)
    const { currentOrderInfo } = props
    console.log('currentOrderInfo', currentOrderInfo)
    this.state = {
      showEvaluate:   false,
      showDetail:     false,
      showBottomMask: '',
      promotionData:  {},
    }
    this.handleToEvaluate = this.handleToEvaluate.bind(this)
    this.handleDetails = this.handleDetails.bind(this)
    this.handleMaskClick = this.handleMaskClick.bind(this)
    this.closeActivityPopup = this.closeActivityPopup.bind(this)
    this.openActivityPopup = this.openActivityPopup.bind(this)
    this.handlePromotionCallback = this.handlePromotionCallback.bind(this)
  }

  // 显示评价的弹出框
  handleToEvaluate(showEvaluate, rate) {
    const { handlePlaceEvaluate, currentOrderInfo } = this.props
    this.setState({ showEvaluate: !showEvaluate })
    Popup.show(<Evaluate { ...{ handlePlaceEvaluate, currentOrderInfo, rate } } />, { animationType: 'slide-up', maskClosable: false })
  }

  handleDetails(e) {
    // if (this.closeSlide) {
    //   this.closeSlide()
    //   this.closeSlide = undefined
    // } else {
    //   const { handelRulesClick, currentOrderInfo } = this.props
    //   this.closeSlide = Mask(<SlidePage showClose={ false } style={{ background: 'none' }} target='down'><MyDetailList { ...{ handelRulesClick, currentOrderInfo } } /></SlidePage>, { style: { zIndex: '9' } })
    // }
    e.stopPropagation()
    const { showDetail, showBottomMask } = this.state
    if (showBottomMask) return
    this.setState({ showDetail: !showDetail })
  }
  handleMaskClick() {
    this.setState({ showDetail: false })
  }
  closeActivityPopup() {
    this.setState({ showBottomMask: false })
  }
  openActivityPopup() {
    this.setState({ showBottomMask: true })
  }
  handlePromotionCallback(promotionData) {
    this.setState({ promotionData })
  }

  render() {
    const { showEvaluate, showDetail, promotionData } = this.state
    const { handleToPay, currentStatus, currentOrderInfo, handelRulesClick } = this.props
    const { id, price, rate } = currentOrderInfo
    const { discount = 0, coupon, activities } = promotionData
    const couponId = coupon ? coupon.id : ''
    const activityId = activities ? activities.id : ''
    let { showBottomMask } = this.state
    if (showBottomMask === '' && currentOrderInfo.status === 2 && discount) {
      showBottomMask = true
    }
    const channel = getStore('channel', 'session')
    const isSinglePrice = getStore('isSinglePrice', 'session')
    return (
      <div style={ showDetail ? { height: '100%', width: '100%', background: 'rgba(0, 0, 0, .3)', position: 'fixed', bottom: '0', zIndex: '1' } : {} } onClick={ this.handleMaskClick }>
        <div className='pay-footer'>
          {
            showDetail &&
            <MyDetailList { ...{ handelRulesClick, currentOrderInfo } } />
          }
          <p className='pay-footer-left'>
            <span>{ `¥ ${ price - discount }` }</span>
          </p>
          {
            currentStatus === 4 && !isSinglePrice &&
            <p className='pay-footer-right' onClick={ () => handleToPay({ id, activityId, couponId }) }>立即支付</p>
          }
          {
            currentStatus === 5 &&
            <p className='pay-footer-right' onClick={ () => this.handleToEvaluate(showEvaluate, rate) }>
              { rate ? '已评价' : '评价本次服务' }
            </p>
          }
          <div className='pay-footer-middle'>
            <p className='details' onClick={ e => this.handleDetails(e) }>明细</p>
            {
              currentStatus === 4 && !isSinglePrice &&
              <ExchangeActivePopup selfClass='pay-footer-active-popup' orderType='yongche' channel={ channel } amount={ price } promotionCallback={ this.handlePromotionCallback } popupStyle={{ top: '-1.23rem' }} handleCloseCallback={ this.closeActivityPopup } handleOpenCallback={ this.openActivityPopup } />
            }
          </div>
        </div>
        {
          Boolean(showBottomMask) &&
          <div style={{ height: '1.23rem', width: '100%', background: 'rgba(0, 0, 0, .3)', position: 'fixed', bottom: '0', zIndex: '1' }} />
        }
      </div>
    )
  }
}


// 订单详情demo
const MyDetailList = ({ handelRulesClick, currentOrderInfo }) => {
  const { price, charges = [] } = currentOrderInfo
  const detailText = charges.map(o => ({ left: o.name, right: o.amount }))
  return (
    <div className='details-list-container'>
      <DetailList { ...{ title: '费用明细', price, detailText } } />
      <p onClick={ handelRulesClick } className='price-detail'>
        <span>计价规则</span>
        <Icon type={ require('svg/yongche/problem.svg') } size='md' />
      </p>
    </div>
  )
}
         
 
 
 
 yongche/common-components-self/select-airport.js 
 
import React from 'react'
import { Search, Empty, Loading } from '@boluome/oto_saas_web_app_component'
import { getStore } from '@boluome/common-lib'
import { Toast } from 'antd-mobile'
import coordtransform from 'coordtransform'

import { get } from '../actions'

import LeftComponent from './address-left-component'
import '../styles/select-airport.scss'

export default class SelectAirport extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      resultArr: '',
    }
    this.handleSearch = this.handleSearch.bind(this)
    this.handleAirportClick = this.handleAirportClick.bind(this)
    this.getAirports = this.getAirports.bind(this)
    this.handleChangeCurrentCity = this.handleChangeCurrentCity.bind(this)
    this.getAirports()
  }
  getAirports() {
    const closeLoading = Loading()
    const { myAttribute } = this.props
    const channel = getStore('channel', 'session')
    const productType = getStore('currentProduct', 'session').code
    // 如果session中保存有选中的地址，就使用地址里的id，如果没有，就使用start_selecctedCity的id，因为初始化时肯定保存了start_selecctedCity，不然会重新选择城市
    let cityId = getStore(`${ myAttribute }_selectedCity${ productType }`, 'session') ? getStore(`${ myAttribute }_selectedCity${ productType }`, 'session').id : getStore('defaultPointObj', 'session').id
    if (channel === 'didi') cityId = getStore(`${ myAttribute }_selectedCity${ productType }`, 'session') ? getStore(`${ myAttribute }_selectedCity${ productType }`, 'session').name : getStore('defaultPointObj', 'session').name
    get('/yongche/v1/city/airport', { channel, cityId }).then(({ code, data, message }) => {
      if (code === 0) {
        this.setState({ resultArr: data })
      } else {
        Toast.fail(message, 1)
      }
      closeLoading()
    })
  }
  handleSearch(keyWord) {
    let { resultArr } = this.state
    resultArr = resultArr.filter(item => item.name.indexOf(keyWord) >= 0)
    this.setState({ resultArr })
    return resultArr
  }
  handleAirportClick(res) {
    const { handleContainerClose, myAttribute, handleChangePoint } = this.props
    const productType = getStore('currentProduct', 'session').code
    const city = getStore(`${ myAttribute }_selectedCity${ productType }`, 'session') ? getStore(`${ myAttribute }_selectedCity${ productType }`, 'session').name : getStore('defaultPointObj', 'session').name
    const { code, name, terminalCode } = res
    const longitude = coordtransform.bd09togcj02(res.longitude, res.latitude)[0]
    const latitude = coordtransform.bd09togcj02(res.longitude, res.latitude)[1]
    let { address = '' } = res
    if (!address) address = name
    // 将参数转化成和地址选择时handleChangeStartPointObj所需的返回数据格式相同的
    handleChangePoint({ city, name, location: { lat: latitude, lng: longitude }, address, code, terminalCode })
    handleContainerClose()
  }
  handleChangeCurrentCity() {
    // const { myAttribute } = this.props
    // setStore(`${ myAttribute }_selectedCity`, res, 'session')
    this.getAirports()
  }
  render() {
    const { handleContainerClose, myAttribute } = this.props
    const productType = getStore('currentProduct', 'session').code
    const { resultArr } = this.state
    if (!resultArr) {
      return <div />
    }
    if (resultArr.length <= 0) {
      return <Empty message='没有搜索结果，换个关键词试试～' imgUrl={ require('../img/nofound.png') } />
    }
    let selectedAddress = ''
    if (getStore(`${ myAttribute }_selectedCity${ productType }`, 'session')) {
      selectedAddress = { name: getStore(`${ myAttribute }_selectedCity${ productType }`, 'session').name }
    }
    return (
      <Search
        selfClass='airport-search'
        inputPlaceholder='请您选择机场'
        content={ <AirportContent datas={ resultArr } handleAirportClick={ this.handleAirportClick } /> }
        noResult={ <Empty message='没有找到机场信息~' imgUrl={ require('../img/nofound.png') } /> }
        onFeach={ keyWord => this.handleSearch(keyWord) }
        handleResult={ result => { console.log('result:', result) } }
        rightComponent={ <Cancel { ...{ handleContainerClose } } /> }
        leftComponent={ <LeftComponent { ...{ myAttribute, selectedAddress, handleChangeCurrentCity: this.handleChangeCurrentCity } } /> }
        delayTime={ 500 }
        disabled={ 'true' }
      />
    )
  }
}


const Cancel = props => {
  const { handleContainerClose } = props
  return (
    <span className='cancel' onClick={ () => handleContainerClose() }>取消</span>
  )
}

const AirportContent = ({ datas, handleAirportClick }) => {
  return (
    <ul className='airport-container'>
      {
        datas.map(item => (
          <li className='airport-item' key={ item.name } onClick={ () => handleAirportClick(item) }>
            <h1>{ item.name }</h1>
            {
              item.address &&
              <p>{ item.address }</p>
            }
          </li>
        ))
      }
    </ul>
  )
}
         
 
 
 
 yongche/common-components-self/wait-animation.js 
 
/*
  bug：计时只能提供60min
*/

import React from 'react'
import { moment, setStore, getStore } from '@boluome/common-lib'

export default class WaitAnimation extends React.Component {
  constructor(props) {
    super(props)
    const { waitTimerName, noDriverResponse } = props
    this.setTimer = this.setTimer.bind(this)
    this.closeTimes = this.closeTimes.bind(this)
    this.getGapMS = this.getGapMS.bind(this)
    const gapMS = this.getGapMS()
    this.state = { waitTime: `${ gapMS[0] }:${ gapMS[1] }` }
    if (!noDriverResponse) {
      this.setTimer(waitTimerName, gapMS[0], gapMS[1])
    }
  }
  getGapMS() {
    const { createdAt } = this.props
    // const id = location.pathname.split('/')[3]
    // 计算出开始的分和秒
    const currentDate = moment('YYYY-MM-DD HH:mm:ss')(new Date())
    const currentH = currentDate.split(' ')[1].split(':')[0]
    const currentM = currentDate.split(':')[1]
    const currentS = currentDate.split(':')[2]
    // const startTime = getStore(`startTime_${ id }`) ? getStore(`startTime_${ id }`) : moment('YYYY-MM-DD HH:mm:ss')(createdAt)
    const startTime = moment('YYYY-MM-DD HH:mm:ss')(createdAt)
    const startH = startTime.split(' ')[1].split(':')[0]
    const startM = startTime.split(':')[1]
    const startS = startTime.split(':')[2]
    let h = currentH - startH
    let m = currentM - startM
    let s = currentS - startS
    // 当h差值小于0时，说明当前时间已进入下一天，此时需要给h加上24
    if (h < 0) {
      h += 24
    }
    m += 60 * h
    // 当s小于0时，说明分钟已进入下一分钟，此时给s加60， m减 1
    if (s < 0) {
      m--
      s += 60
    }
    // console.log('m', m, currentM, startM, currentS, startS)
    if (m < 10) m = `0${ Math.round(m) }`
    if (s < 10) s = `0${ Math.round(s) }`
    // 刚下单进入倒计时时，有几率出现下单时间在当前时间之前的情况，这时m为-1math.around之后就是nan报错, 因为这种情况只会在一开始时出现，所以默认给00:00
    if (isNaN(m)) {
      m = '00'
      s = '00'
    }
    return [m, s]
  }
  componentWillReceiveProps(nextprops) {
    const { waitTimerName, noDriverResponse } = nextprops
    if (noDriverResponse) {
      this.closeTimes(waitTimerName)
      // 设置一个满圆
      this.createCircle(3.5, '#ffab00')
      return
    }

    const PreWaitTimerName = this.props.waitTimerName
    const preTimer = getStore('preTimer', 'session')
    // 仅当 当前订单计时器不存在 当前订单和上一个订单是同一个订单，且当前订单的状态发生改变时，才去重新新建一个定时器（对应取消订单后在进入时只有一个定时器，页面切换之后，定时器的值会发生变化）
    if (!this[waitTimerName] && this[waitTimerName] !== preTimer && waitTimerName === PreWaitTimerName) {
      console.log('PreWaitTimerName', PreWaitTimerName, waitTimerName)
      // 清除上一个props的定时器
      clearInterval(this[PreWaitTimerName])
      // 开启另一个定时器
      const gapMS = this.getGapMS()
      this.state = { waitTime: `${ gapMS[0] }:${ gapMS[1] }` }
      this.setTimer(waitTimerName, gapMS[0], gapMS[1])
      setStore('preTimer', this[waitTimerName], 'session')
    }
  }
  componentDidMount() {
    if (this.canvas) {
      this.cxt = this.canvas.getContext('2d')
      // 设置一个底色圆
      this.createCircle(3.5, '#e5e5e5')

      const { noDriverResponse } = this.props
      if (noDriverResponse) { // 设置一个满圆
        this.createCircle(3.5, '#ffab00')
        return
      }
      // 设置一个动态圆
      let endDeg = 1.5
      this.circleTimer = setInterval(() => {
        endDeg += 0.01
        if (endDeg.toFixed(2) === '3.51') {
          endDeg = 1.51
          this.cxt.clearRect(0, 0, 1600, 1600)
          // 设置一个底色圆
          this.createCircle(3.5, '#e5e5e5')
        }
        this.createCircle(endDeg, '#ffab00')
      }, 10)
      return true
    }
    return false
  }
  setTimer(waitTimerName, m = 0, s = 0) {  // 设置一个定时器，进行计时
    let waitSec = s
    let waitMin = m
    let waitTime = '00:00'
    this[waitTimerName] = setInterval(() => {
      waitSec++
      if (waitSec === 60) {
        waitMin = Number(waitMin)
        waitMin += 1
        waitSec = 0
      }
      if (waitSec < 10) waitSec = `0${ Math.round(waitSec) }`
      if (waitMin < 10) waitMin = `0${ Math.round(waitMin) }`
      waitTime = `${ waitMin }:${ waitSec }`
      this.setState({ waitTime })
      // if (waitTime === '30:00') this.closeTimes(waitTimerName)
    }, 1000)
  }
  // 只有当请求会的订单状态变成无司机接单时，才关闭定时器
  closeTimes(waitTimerName) {
    clearInterval(this[waitTimerName])
    this[waitTimerName] = null
    clearInterval(this.circleTimer)
    // 清除原有图案，画出一个整圆
    this.cxt.clearRect(0, 0, 1600, 1600)
    this.createCircle(3.5, '#ffab00')
  }
  createCircle(deg, color) {
    this.cxt.beginPath()
    this.cxt.arc(300, 300, 180, Math.PI * 1.5, Math.PI * deg, false)
    this.cxt.lineWidth = 2
    this.cxt.strokeStyle = color
    this.cxt.stroke()
  }
  componentWillUnmount() {
    const { waitTimerName } = this.props
    clearInterval(this[waitTimerName])
    this[waitTimerName] = null
    clearInterval(this.circleTimer)
    console.log(898989898989)
  }
  render() {
    const titleStyle = {
      marginTop: '-245px',
    }
    const { waitTime } = this.state
    const { noDriverResponse } = this.props
    return (
      <div className='wait-animation'>
        <h1 className='wait-title' style={ titleStyle }>{ noDriverResponse ? '未找到车辆，订单已自动取消' : '正在为您寻找车辆' }</h1>
        <canvas id='canvas' width='600' height='600' ref={ node => this.canvas = node } />
        <div className='wait-status'>
          <p className='wait-name'>已等待</p>
          <p className='wait-time'>{ waitTime }</p>
        </div>
      </div>
    )
  }
}
// 旋转的点，但是不容易同步上
// const pStyle = {
//   transformOrigin: '6px 185px',
//   height:          '10px',
//   width:           '10px',
//   marginTop:       '-185px',
//   marginLeft:      '-5px',
// }
// <p className='fill-point' style={ pStyle } />
         
 
 
 
 yongche/components/cancel-info.js 
 
/*
  待支付、取消、异常的订单都会跳到该页面
*/


import React from 'react'
import { moment } from '@boluome/common-lib'
import { Icon } from 'antd-mobile'
import { afterOrdering } from 'business'

import OrderItem from '../common-components-self/order-item'
import '../styles/cancel-info.scss'

const CancelInfo = ({ handleToIndex, currentOrderInfo, isSinglePrice, handleCancelClick }) => {
  if (currentOrderInfo) {
    const { orderPrice, price, createdAt, channel, id, displayStatus, origin, destination, status, flightNo, flightDelayTime, contactPhone, userPhone, paidList, productType } = currentOrderInfo
    const start = origin.name
    const end = destination.name
    const time = moment('YYYY-MM-DD HH:mm')(createdAt)
    // 是不是待支付订单，因为引用该组件时，已经判断过是一口价了
    const isNoPay = status === 2

    // 支付处理中，需显示价格，所以将其改成paidList
    const isPaying = status === 12

    let { departureTime } = currentOrderInfo
    if (departureTime === 'instant') departureTime = time
    if (flightDelayTime) departureTime = `航班到达后${ flightDelayTime }分钟上车`
    return (
      <div className='cancel-info'>
        <div className='cancel-info-header'>
          <div className='order-number'>
            <div className='left'>
              <p>
                <span className='left'>订单编号</span>
                <span className='left'>{ id }</span>
              </p>
              {
                isNoPay &&
                <p>订单将于15分钟后自动取消</p>
              }
            </div>
            { isSinglePrice && <span className={ isNoPay ? 'right active' : 'right' }>{ displayStatus }</span> }
          </div>
          {
            isNoPay && flightNo &&
            <div className='common-item'>
              <Icon type={ require('svg/yongche/plane.svg') } size='xxs' />
              <span>航班号</span>
              <span>{ flightNo }</span>
            </div>
          }
          <OrderItem { ...{ start, end } } />
          {
            isNoPay &&
            <div className='common-item'>
              <Icon type={ require('svg/yongche/time.svg') } size='xxs' />
              <span>出发时间</span>
              <span>{ departureTime }</span>
            </div>
          }
          {
            isNoPay &&
            <div className='common-item'>
              <Icon type={ require('svg/yongche/passenger.svg') } size='xxs' />
              <span>乘车人</span>
              <span>{ contactPhone === userPhone ? '换乘车人' : contactPhone }</span>
            </div>
          }
          <div className='cancel-info-bottom'>
            <div className='top'>
              <p className='price'>{ isNoPay ? '车费：' : '已支付：' }<span>{`￥${ (!isNoPay && !paidList && !isPaying) ? '0' : price }`}</span></p>
              <p className='time'>{ time }</p>
              {
                Boolean(orderPrice - price) && price !== 0 &&
                <p className='discount'>{ `已优惠：¥${ (orderPrice - price).toFixed(2) }` }</p>
              }
            </div>
            {
              !isNoPay && !isPaying &&
              <Icon type={ require('svg/yongche/exclamation.svg') } size='lg' />
            }
            {
              isPaying &&
              <Icon type={ require('svg/yongche/paying.svg') } size='lg' />
            }
            {
              !isNoPay &&
              <p className='order-status'>
                {
                  isPaying ? '支付处理中' : '订单已取消'
                }
              </p>
            }
          </div>
        </div>
        <div className='cancel-info-footer'>
          {
            isNoPay &&
            <p className='footer-item left' onClick={ () => handleCancelClick(1, channel) }>取消订单</p>
          }
          {
            !isNoPay &&
            <a className='footer-item left' href='tel:4000000999'>联系客服</a>
          }
          <p className='footer-item right' onClick={ isNoPay ? () => afterOrdering(currentOrderInfo) : () => handleToIndex(channel, productType) }>{ isNoPay ? '立即支付' : '返回首页'}</p>
        </div>
      </div>
    )
  }
  return (<div />)
}

export default CancelInfo
         
 
 
 
 yongche/components/channel.js 
 
import React from 'react'

export default ({ children }) => (
  <div>{ children }</div>
)
         
 
 
 
 yongche/components/demo.js 
 
import React from 'react'

const Demo = ({ mock }) => {
  return (
    <div>{ mock }</div>
  )
}

export default Demo
         
 
 
 
 yongche/components/flight.js 
 
import React from 'react'
import { removeStore, moment, getStore, setStore } from '@boluome/common-lib'
import { List, Icon, Picker } from 'antd-mobile'

import '../styles/flight.scss'

export default class Flight extends React.Component {
  constructor(props) {
    super(props)
    const { flightNo, estimatePara } = props
    console.log('estimatePara', estimatePara)
    let flightHistorys = getStore('flightHistorys') ? getStore('flightHistorys') : []
    flightHistorys = flightHistorys.slice(0, 2)
    const currentDate = estimatePara.flightDate
    this.state = {
      currentDate,
      flightNo,
      flightHistorys,
    }
    this.handleChangeDate = this.handleChangeDate.bind(this)
    this.handleHistoryClick = this.handleHistoryClick.bind(this)
    this.handleIptChange = this.handleIptChange.bind(this)
    this.handleClearHistorys = this.handleClearHistorys.bind(this)
    this.handleConfirm = this.handleConfirm.bind(this)
  }

  handleChangeDate(currentDate) {
    this.setState({ currentDate })
  }

  handleChangePoint(currentDate) {
    this.setState({ currentDate })
  }

  handleHistoryClick(flightNo) {
    this.setState({ flightNo })
  }

  handleIptChange(e) {
    const flightNo = e.target.value.trim()
    this.setState({ flightNo })
  }

  handleClearHistorys() {
    this.setState({ flightHistorys: [] })
    removeStore('flightHistorys')
  }

  handleConfirm(flightNo, flightDate) {
    const { handleContainerClose, handleSeletedFlightNo, canPlace, estimatePara, currentProduct } = this.props
    let { flightHistorys } = this.state
    console.log('flightHistorys111', flightHistorys)
    flightHistorys = flightHistorys.filter(res => res !== flightNo)
    console.log('flightHistorys222', flightHistorys)
    if (flightNo) flightHistorys.unshift(flightNo)
    setStore('flightHistorys', flightHistorys)
    this.setState({ flightHistorys })
    handleSeletedFlightNo(flightNo, flightDate, canPlace, estimatePara, currentProduct)
    handleContainerClose()
  }
  handleTimeClick(pickerVisible) {
    this.setState({ pickerVisible })
  }

  render() {
    const { flightNo, currentDate, multipleFlight = false, flightHistorys, pickerVisible } = this.state
    const { dates } = this.props
    const ListItem = List.Item
    const canPlace = flightNo !== '' && currentDate
    console.log('flightHistorys', flightHistorys, currentDate)
    return (
      <div className='flight'>
        <h1 className='flight-title'>请您输入航班号和起飞时间</h1>
        <List>
          <ListItem className='plane-come'>
            <span className='left'>航班号：</span>
            <input placeholder='请输入航班号，如MU1898' value={ flightNo } onChange={ this.handleIptChange } />
          </ListItem>
          <ListItem className='flight-time' onClick={ () => this.handleTimeClick(!pickerVisible) }>
            <p>
              起飞时间：
              {
                currentDate ?
                  <span className='selected'>{ currentDate }</span> :
                  <span>请选择航班起飞时间(当地时间)</span>
              }
            </p>
          </ListItem>
        </List>

        <Picker
          visible={ pickerVisible }
          data={ dates }
          title='当地起飞时间'
          value={ currentDate }
          cols={ 1 }
          onChange={ this.handleChangeDate }
          onOk={ () => this.handleTimeClick(false) }
          onDismiss={ () => this.handleTimeClick(false) }
        />
        {
          Array.isArray(flightHistorys) && flightHistorys.length > 0 &&
          <div className='flight-historys'>
            <h1>历史记录</h1>
            <ul>
              {
                flightHistorys.map(item => <li key={ item } onClick={ () => this.handleHistoryClick(item) }>{ item }</li>)
              }
            </ul>
            <div className='clear-historys' onClick={ this.handleClearHistorys }>
              <Icon type={ require('svg/yongche/del.svg') } size='xxs' />
              <span>清除历史记录</span>
            </div>
          </div>
        }
        {
          multipleFlight &&
          <Picker
            data={ dates }
            title='请选择起终点'
            value={ currentDate }
            cols={ 1 }
            onChange={ canPlace ? this.handleChangeDate : '' }
          >
            <div className='s-button bottom'>
              <p className={ canPlace ? 'active' : '' }>确定</p>
            </div>
          </Picker>
        }
        {
          !multipleFlight &&
          <div className='s-button bottom' onClick={ canPlace ? () => this.handleConfirm(flightNo, currentDate) : '' }>
            <p className={ canPlace ? 'active' : '' }>确定</p>
          </div>
        }
      </div>
    )
  }
}

let dates = [
  { name: '昨天', date: `${ moment('YYYY-MM-DD')(new Date((new Date()).getTime() - (1000 * 60 * 60 * 24))) }` },
  { name: '今天', date: `${ moment('YYYY-MM-DD')(new Date()) }` },
  { name: '明天', date: `${ moment('YYYY-MM-DD')(new Date((new Date()).getTime() + (1000 * 60 * 60 * 24))) }` },
  { name: '后天', date: `${ moment('YYYY-MM-DD')(new Date((new Date()).getTime() + (1000 * 60 * 60 * 24 * 2))) }` },
]
dates = dates.map(item => ({ label: `${ item.name } ${ item.date }`, value: `${ item.date }` }))

Flight.defaultProps = {
  dates,
  flightNo: 'uu',
}
         
 
 
 
 yongche/components/invoice-history.js 
 
import React from 'react'

const Stroke = ({ mock }) => {
  return (
    <div>{ mock }</div>
  )
}

export default Stroke
         
 
 
 
 yongche/components/invoice-info.js 
 
import React from 'react'
import { Icon } from 'antd-mobile'

import OrderItem from '../common-components-self/order-item'
import '../styles/invoice-info.scss'

const InvoiceInfo = ({ handleinvoiceInfoClick, invoiceInfoArr = [1, 0, 0], handleAllSelect, isAllSelect = false }) => {
  return (
    <div className='invoiceInfo'>
      <div className='invoiceInfo-header'>
        {
          [0, 1, 2].map((item, index) => (
            <div key={ item } className='invoiceInfo-item'>
              <OrderItem key={ item } { ...{ index, invoiceInfoArr, handleinvoiceInfoClick, hasLeft: true } } />
              <div className='footer'>付款金额：<span>￥245.00</span></div>
            </div>
          ))
        }
      </div>
      <div className='invoiceInfo-footer'>
        <Icon onClick={ () => { handleAllSelect(isAllSelect, invoiceInfoArr) } } type={ isAllSelect ? require('svg/yongche/circle.svg') : require('svg/yongche/no-select.svg') } size='md' />
        <h1>全选</h1>
        <span>（金额少于￥200不能开票）</span>
        <p>下一步</p>
      </div>
    </div>)
}

export default InvoiceInfo


// const InvoiceInfoItem = ({ index, invoiceInfoArr, handleinvoiceInfoClick }) => {
//   const FlexItem = Flex.Item
//   return (
//     <div className='invoiceInfo-item'>
//       <Flex className='header'>
//         <h1 className='left'>
//           <Icon onClick={ () => handleinvoiceInfoClick(index, invoiceInfoArr) } type={ invoiceInfoArr[index] ? require('svg/yongche/circle.svg') : require('svg/yongche/no-select.svg') } size='md' />
//         </h1>
//         <FlexItem className='right'>
//           <div className='top'>
//             <Icon type={ require('svg/yongche/time.svg') } size='xxs' />
//             <span>2017.05.06  15:37</span>
//           </div>
//           <div className='middle'>
//             <p />
//             <span>花园路运动花园路/镜像路（路口）阿娇华盛顿附近哈数据库的复活节阿斯顿会返回</span>
//           </div>
//           <div className='bottom'>
//             <p />
//             <span>出发时间</span>
//           </div>
//         </FlexItem>
//       </Flex>
//       <div className='footer'>付款金额：￥245.00</div>
//     </div>
//   )
// }
         
 
 
 
 yongche/components/invoice.js 
 
import React from 'react'

export default ({ children }) => (
  <div>{ children }</div>
)
         
 
 
 
 yongche/components/order-cancel.js 
 
import React from 'react'

import '../styles/order-cancel.scss'

const OrderCancel = ({ handlePlaceCancel, handelReasonClick, currentReason }) => {
  const reasons = ['我的行程改变了，暂时不需要用车', '我需要等待的时间太长了', '司机要求我取消', '无法与司机取得联系']
  return (
    <ul className='order-cancel'>
      {
        reasons.map(item => <li onClick={ () => { handelReasonClick(item) } } key={ item } className={ currentReason === item ? 'active' : '' }>{ item }</li>)
      }
      <div className='s-button'>
        <p className={ currentReason ? 'active' : '' } onClick={ () => currentReason && handlePlaceCancel(currentReason) }>提交</p>
      </div>
    </ul>
  )
}
export default OrderCancel
         
 
 
 
 yongche/components/order-id.js 
 
import React from 'react'
import { Icon } from 'antd-mobile'
import { Evaluation } from '@boluome/oto_saas_web_app_component'

import '../styles/order-id.scss'
import WaitAnimation from '../common-components-self/wait-animation'
import PayFooter from '../common-components-self/pay-footer'
import CancelInfo from '../components/cancel-info'
import driverImg from '../img/driver-info.png'

export default class OrderId extends React.Component {
  constructor(props) {
    super(props)
    const { noDriverResponse, currentStatus } = props
    this.state = {
      noDriverResponse,
      currentStatus,
    }
    this.mapNode = this.mapNode
  }
  componentWillReceiveProps(nextprops) {
    // 因为从其他页面过来，有可能不会从新初始化orderId组件，所以将noDriverResponse，currentStatus放到state中，方便自动更新
    const preNoDriverResponse = this.state.noDriverResponse
    const { noDriverResponse = false } = nextprops
    if (preNoDriverResponse !== noDriverResponse) this.setState({ noDriverResponse })

    const { currentStatus, currentOrderInfo = {} } = nextprops
    const { driver = {} } = currentOrderInfo
    this.setState({ currentStatus, driver })
  }
  componentDidUpdate() {
    const { currentStatus, driver } = this.state
    const { currentOrderInfo } = this.props
    if (!currentOrderInfo) return
    const { origin, destination } = currentOrderInfo

    const { Map, Marker, Size, Pixel } = window.AMap
    const AMapIcon = window.AMap.Icon

    // 清除上一个覆盖物
    if (this.driverMark) this.driverMark.setMap()
    // 获取司机经纬度
    // console.log(driver)
    const driverPoint = [driver.longitude, driver.latitude]
    // 设置司机图片
    const myIcon = new AMapIcon({
      image: require('../img/driver-point.png'),
      size:  new Size(45, 75),
    })
    this.driverMark = new Marker({
      position:    driverPoint,
      icon:        myIcon,
      zoom:        1,
      autoFitView: true,
      offset:      new Pixel(-24, -60),
    })
    this.driverMark.setMap(this.map)
    // 当没有当前信息返回时，就不运行下面的代码，防止地图找不到绑定的dom报错(this.map,是确保当页state更新再次刷新地图，同时避免返回在进入，不再渲染地图的原因，比使用preState判断多了后一个作用)
    if (!currentStatus || currentStatus === 0 || currentStatus === 1 || currentStatus === 8 || currentStatus === 11 || currentStatus === 12 || this.map) return true


    // 获取两地经纬度的中点
    const centerlatitude = (parseFloat(origin.latitude) + parseFloat(destination.latitude)) / 2
    const centerlongitude = (parseFloat(origin.longitude) + parseFloat(destination.longitude)) / 2
    // 初始化地图
    this.map = new Map(this.mapNode, {
      center: [centerlongitude, centerlatitude],
    })

    // 获取起、终点经纬度
    const startPoint = [origin.longitude, origin.latitude]
    const endPoint = [destination.longitude, destination.latitude]
    const startIcon = new AMapIcon({
      image: require('../img/start-point.png'),
      size:  new Size(66, 75),
    })
    const endIcon = new AMapIcon({
      image: require('../img/end-point.png'),
      size:  new Size(66, 75),
    })
    const startMark = new Marker({
      position:    startPoint,
      icon:        startIcon,
      zoom:        1,
      autoFitView: true,
      offset:      new Pixel(-32, -70),
    })
    const endMark = new Marker({
      position:    endPoint,
      icon:        endIcon,
      zoom:        1,
      autoFitView: true,
      offset:      new Pixel(-32, -70),
    })
    startMark.setMap(this.map)
    endMark.setMap(this.map)

    // 根据经纬度查询路线
    this.map.plugin('AMap.Driving', () => {
      // 我的路线规划
      const myDriving = new window.AMap.Driving({
        map:         this.map,
        hideMarkers: true,
      })
      myDriving.search(startPoint, endPoint, (status, result) => {
        // 解析返回结果，自己生成操作界面和地图展示界面
        console.log('驾车路线111', status, result)
      })

      // 司机接驾路线规划
      // const driverDriving = new window.AMap.Driving({
      //   map:         this.map,
      //   hideMarkers: true,
      //   isOutline:   false,
      //   showTraffic: false,
      // })
      // driverDriving.search([driverLongitude, driverLatitude], [origin.longitude, origin.latitude], (status, result) => {
      //   // 解析返回结果，自己生成操作界面和地图展示界面
      //   console.log('驾车路线222', status, result)
      // })
    })
  }

  render() {
    const {
      handleCancelClick, handleToPay, handleRecallClick, currentOrderInfo,
      handelRulesClick,
      handleToIndex,
      flag,
      handlePlaceEvaluate,
    } = this.props
    const { noDriverResponse = false } = this.state
    let { currentStatus } = this.state
    // 根据返回值判断加载哪个页面
    if (!currentOrderInfo) {
      return (<div />)
    }
    // 当订单已取消或是无应答状态且从stroke页面跳转而来时，显示订单取消页
    // 是否是一口价
    const { OTO_SAAS = {} } = window
    const { customer = {} } = OTO_SAAS
    const { isSinglePrice = false } = customer
    // 退款状态，看下面解释
    // 客户订单列表跳转进入时，没有带flag，但是带了联合登陆的参数，所以通过location.search.length > 1来判断是不是当前页面等待直到无司机应答和退款状态，仅当前页面等待直到无司机应答和退款状态是不显示订单取消页面
    if (currentStatus === 8 || currentStatus === 12 || (currentStatus === 4 && isSinglePrice) || (flag === '1' && (currentStatus === 0 || currentStatus === 11)) || (currentStatus === 11 && flag !== '1' && !noDriverResponse)) {
      return (
        <CancelInfo { ...{ currentOrderInfo, isSinglePrice, handleToIndex, handleCancelClick } } />
      )
    }
    // 实时计价，且在当前页面中时，退款状态要显示不转圈的样子，其他从订单列表跳进来都是订单详情页
    // 如果不是从订单列表跳转过来，说明是无司机应答时取消，并变成退款状态的，所以要显示无司机应答的页面，将currentStatus = 0
    if (currentStatus === 11 && flag !== '1' && noDriverResponse) {
      currentStatus = 0
    }

    let { waitTimerName } = this.props
    const { channel, createdAt, id, displayStatus, driver = { name: '', phone: '', score: '0', carColor: '', carType: '', plateNum: '' } } = currentOrderInfo
    if (!waitTimerName) waitTimerName = id
    let currentCircleSvg = require('svg/yongche/grey_circle.svg')
    let currentStatusText = '正在寻找车辆'
    if (currentStatus === 3) {
      currentCircleSvg = require('svg/yongche/yellow_circle.svg')
      currentStatusText = displayStatus
    }
    if (currentStatus === 4) {
      currentCircleSvg = require('svg/yongche/green_circle.svg')
      currentStatusText = '行程已结束，请您支付车费'
    }
    if (currentStatus === 5) {
      currentCircleSvg = require('svg/yongche/green_circle.svg')
      currentStatusText = '服务已完成，感谢您的选择和信赖'
    }
    const { name, phone, carColor, carType, plateNum } = driver
    let { score } = driver
    score = Number(score)
    return (
      <div className='order-id'>
        <div className='header'>
          {
            (currentStatus === 2 || currentStatus === 3 || currentStatus === 4 || currentStatus === 5) &&
            <div className='driver-info'>
              <p className='driver-img' style={{ background: `url(${ driverImg })`, backgroundSize: 'cover' }} />
              <ul className='driver-id'>
                <li className='top'>{ `${ name } ${ plateNum }` }</li>
                <li className='bottom'>
                  {
                    carColor &&
                    <p>{ `${ carColor }-${ carType }` }</p>
                  }
                  {
                    !carColor &&
                    <p>{ carType }</p>
                  }
                  <Evaluation defaultValue={ `${ score / 0.05 }%` } width={ '120px' } />
                  <span>{ score.toFixed(1) }</span>
                </li>
              </ul>
              <a href={ `tel:+86${ phone }` } className='driver-phone'><Icon type={ require('svg/yongche/phone.svg') } size='lg' /></a>
            </div>
          }
          {
            currentStatus !== 0 && currentStatus !== 1 && currentStatus !== 2 &&
            <div className='header-bottom'>
              <Icon type={ currentCircleSvg } size='xxs' />
              <p className='left'>{ currentStatusText }</p>
            </div>
          }
          {
            currentStatus === 2 &&
            <p className='driver-tips'>{ displayStatus }</p>
          }
        </div>
        {
          ((currentStatus === 0 && flag !== '1') || currentStatus === 1) && <WaitAnimation { ...{ noDriverResponse, waitTimerName: id, createdAt } } />
        }
        {
          currentStatus === 0 && noDriverResponse && <p className='footer1' onClick={ () => handleRecallClick(currentOrderInfo, isSinglePrice) }>{ isSinglePrice ? '查看退款进度' : '重新叫车' }</p>
        }
        {
          (currentStatus === 1 || currentStatus === 2) && <p className='footer1' onClick={ () => !noDriverResponse && handleCancelClick(currentStatus, channel) }>取消订单</p>
        }

        {
          ((currentStatus === 4 && !isSinglePrice) || currentStatus === 5) &&
          <PayFooter { ...{ handelRulesClick, handleToPay, currentStatus, currentOrderInfo, handlePlaceEvaluate } } />
        }

        {
          (currentStatus !== 0 && currentStatus !== 1 && currentStatus !== 8) && <div ref={ node => this.mapNode = node } className='my-map' />
        }
        <a href='tel:4000000999' style={{ position: 'absolute', bottom: '2rem', right: '.4rem', width: '1.05rem', height: '1.05rem' }}><img src={ require('../img/contact.png') } alt='contact' style={{ width: '100%', height: '100%' }} /></a>
      </div>)
  }
}

// {
//   currentStatus === 3 && <p className='footer3'>当前计费： <span>¥ 41.30</span></p>
// }
         
 
 
 
 yongche/components/order.js 
 
import React from 'react'

export default ({ children }) => (
  <div>{ children }</div>
)
         
 
 
 
 yongche/components/plane.js 
 
/*
  问题：
  1, 暂时没有取消nearbyCarInfo判断附近是否有对应车型，然后决定界面显示的状态

  tips：
  1，该页面会按需显示三种组件：
    a：用于优化页面的判断，没有supportThisCity数据返回时，显示空白页
    b：当supportThisCity为false时，表示不支持当前城市，显示NosupportCity组件
    c：当supportThisCity为true时，显示正常页面
*/

import React from 'react'
import { List, Picker, Icon, Flex, Modal, InputItem } from 'antd-mobile'
import { SlidePage, Mask, AddressSearchGaode, ExchangeActivePopup } from '@boluome/oto_saas_web_app_component'
// import { vconsole } from 'vconsole'

import NosupportCity from '../common-components-self/no-support-city'
import Flight from './flight'
import EstimatePrice from '../common-components-self/estimate-price'
import LeftComponent from '../common-components-self/address-left-component'
import SelectAirport from '../common-components-self/select-airport'
import '../styles/product.scss'

const Plane = props => {
  const {
    supportThisCity, getLocationErr,
    handleSeletedFlightNo, handleClearFlightNo,
    showChannel, currentname, handleTabClick, handleReloadCity, handleChangeCity,
    handleChangeCar, handleChangePassenger, handleChangeDate, startTimes, defaultCurrentDate, isStartTimes2,
    handleChangeStartPointObj, handleChangeEndPointObj,
    estimate,
    handleCreateOrder,
    hasUnpay, hasInStroke, handleChangeUnpay, orderId,
    handleChangeProduct, currentProduct = { code: '' }, products,
    handelRulesClick, isSinglePrice, channel,
    handleSingleBackPromotion, promotionData = { discount: '', promotionBackData: '' }, handleCloseCallback, payFooterShow = true,
    flightNoErrorMessage, flightNoError, handleChangeFlightNoError,
    defaultCityCenterObj = {},
    pickerVisible, handlePickerClick,
  } = props
  if ((!supportThisCity && supportThisCity !== undefined) || getLocationErr) {
    return (
      <div>
        <NosupportCity { ...{ currentname, handleReloadCity, handleChangeCity, getLocationErr } } />
      </div>
    )
  }

  let { defaultPointObj = {} } = props
  const productType = currentProduct.code
  // 设置当前productType对应的起点对象
  if (productType !== 'private-car' && productType !== 13 && productType !== 14) defaultPointObj = defaultCityCenterObj
  const startPointObj = props[`startPointObj${ productType }`] ? props[`startPointObj${ productType }`] : defaultPointObj
  const startPointStr = props[`startPointStr${ productType }`] ? props[`startPointStr${ productType }`] : defaultPointObj.title
  if (!defaultPointObj || !products || supportThisCity === undefined) {
    return (<div />)
  }
  const ListItem = List.Item

  // 设置当前productType对应的终点对象
  let endPointObj = props[`endPointObj${ productType }`]
  const endPointStr = props[`endPointStr${ productType }`]
  // 设置当前productType对应的出发时间, 乘车人
  let currentDate =  props[`currentDate${ productType }`] ? props[`currentDate${ productType }`] : ''
  const currentPassenger = props[`currentPassenger${ productType }`] ? props[`currentPassenger${ productType }`] : '换乘车人'
  // 设置当前productType对应的航班号，航班时间
  const flightNo = props[`flightNo${ productType }`] ? props[`flightNo${ productType }`] : ''
  const flightDate = props[`flightDate${ productType }`] ? props[`flightDate${ productType }`] : ['']

  const hasstartPointStr = Boolean(startPointStr)
  const hasendPointStr = Boolean(endPointStr)
  const canPlace = hasstartPointStr && hasendPointStr && startPointStr !== '附近无可选上车地点' && endPointStr !== '附近无可选上车地点'
  // 设置默认值
  // 默认当前车信息
  // 默认起终点
  if (!endPointObj || !endPointObj.latitude) endPointObj = defaultPointObj
  const [startLatitude, startLongitude, startAddress, endAddress, endLatitude, endLongitude] =
  [startPointObj.latitude, startPointObj.longitude, startPointStr, endPointStr, endPointObj.latitude, endPointObj.longitude]
  // 定义预约时间
  let departureTime = defaultCurrentDate
  if ((currentDate === '' || currentDate.length === 2) && channel === 'didi' && isSinglePrice) currentDate = [startTimes[0].value, startTimes[0].children[0].value, startTimes[0].children[0].children[0].value]
  if (currentDate !== '' && currentDate.length !== 2) departureTime = `${ currentDate[0] } ${ currentDate[1] }:${ currentDate[2] }`
  // 获取附近车型
  const nearbyCarInfo = props[`nearbyCarInfo${ productType }`]
  const currentCarInfo = props[`currentCarInfo${ productType }`]
  let rideType = ''
  if (currentCarInfo) rideType = currentCarInfo.rideType
  // 定义乘车人手机号码
  const contactPhone = currentPassenger === '换乘车人' ? '' : currentPassenger
  let airCode = ''
  // 因为机场选择只会出现一次，所以startPointObj和endPointObj中，只会包含一个code
  if (startPointObj.code) airCode = startPointObj.code
  if (endPointObj.code) airCode = endPointObj.code
  // 定义查询附近运力时的参数
  const estimatePara = {
    startLatitude,
    startLongitude,
    startAddress,
    endLatitude,
    endLongitude,
    endAddress,
    rideType,
    departureTime,
    productType,
    flightNo,
    flightDate: flightDate[0],
    airCode,
  }
  // 定义呼叫专车时的参数
  const origin = { name: startPointStr, latitude: startPointObj.latitude, longitude: startPointObj.longitude, detail: startPointObj.detail }
  const destination = { name: endPointStr, latitude: endPointObj.latitude, longitude: endPointObj.longitude, detail: endPointObj.detail }

  const { discount, coupon, activities } = promotionData
  const couponId = coupon ? coupon.id : ''
  const activityId = activities ? activities.id : ''
  const orderPara = {
    rideType,
    origin,
    destination,
    departureTime,
    contactPhone,
    productType,
    flightNo,
    flightDate: flightDate[0],
    airCode,
    activityId,
    couponId,
  }
  // 下面三个函数，作用是：使用组件，会有一个默认参数，但是我们还需要传入另一个参数，所以使用一个过度函数，去承接这个默认的和想要的参数
  const handleStartAddress = res => {
    // hasendPointStr && endPointStr !== '附近无可选上车地点'  不能用canPlace代替，因为选择锅底之后，对应的startPointStr并没有更新，所以会仍是false，下面同理
    handleChangeStartPointObj(res, hasendPointStr && endPointStr !== '附近无可选上车地点', estimatePara, currentProduct)
  }
  const handleEndAddress = res => {
    handleChangeEndPointObj(res, hasstartPointStr && startPointStr !== '附近无可选上车地点', estimatePara, currentProduct)
  }
  const handleStartTime = res => {
    handleChangeDate(res, canPlace, estimatePara, isStartTimes2)
  }

  const ulS = {
    overflow:     'hidden',
    height:       '100px',
    borderBottom: '1px solid #e5e5e5',
  }
  const liS = {
    float:      'left',
    width:      '50%',
    height:     '100px',
    lineHeight: '100px0',
    fontSize:   '36px',
    listStyle:  'none',
    textAlign:  'center',
  }
  const suppliers = ['didi', 'shenzhou']

  let datePickerExtra = '现在出发'
  if (currentDate.length >= 3 && !isStartTimes2) {
    // datePickerExtra = `${ currentDate[0] } ${ currentDate[1] }:${ currentDate[2] }`
    switch (currentDate[0]) {
      case startTimes[0].value:
        datePickerExtra = `${ startTimes[0].label } ${ currentDate[1] }:${ currentDate[2] }`
        break
      case startTimes[1].value:
        datePickerExtra = `${ startTimes[1].label } ${ currentDate[1] }:${ currentDate[2] }`
        break
      case startTimes[2].value:
        datePickerExtra = `${ startTimes[2].label } ${ currentDate[1] }:${ currentDate[2] }`
        break
      default:
        datePickerExtra = `${ currentDate[0] } ${ currentDate[1] }:${ currentDate[2] }`
        break
    }
  }
  if (isStartTimes2) {
    if (currentDate) {
      datePickerExtra = currentDate[1]
      estimatePara.flightDelayTime = Number(currentDate[1])
      orderPara.flightDelayTime = Number(currentDate[1])
      orderPara.departureTime = ''
    } else {
      datePickerExtra = defaultCurrentDate[1]
      estimatePara.flightDelayTime = Number(defaultCurrentDate[1])
      orderPara.flightDelayTime = Number(defaultCurrentDate[1])
      orderPara.departureTime = ''
    }
  }
  const doThis = true
  return (
    <List className='product plane'>
      <div className='header'>
        {
          Boolean(estimate) && Boolean(estimate.time) &&
          <h1 className='meet-time'>{ `“最快${ estimate.time }分钟接驾”`} </h1>
        }
        {
          showChannel &&
          <ul style={ ulS }>
            {
              suppliers.map(item => (<li style={ liS } onClick={ () => handleTabClick(item) } key={ item }>{ item }</li>))
            }
          </ul>
        }
        {
          products && products.length > 1 &&
          <ul className='my-tab'>
            {
              products.map(item => item.code !== 'zhuanche' && item.code !== 14 && <li className={ item.code === productType ? 'active' : '' } key={ item.code } onClick={ () => handleChangeProduct(item, canPlace, props) }>{ item.name }</li>)
            }
          </ul>
        }
        {
          doThis && currentProduct && productType === 7 && !isSinglePrice &&
          <ListItem
            className='plane-come'
            onClick={ () => {
              Mask(
                <SlidePage showClose={ false }>
                  <Flight { ...{ handleSeletedFlightNo, flightNo, canPlace, estimatePara, currentProduct } } />
                </SlidePage>, { mask: false })
            } }
          >
            <h1 className='icon-container'><Icon type={ require('svg/yongche/plane.svg') } size='xxs' /></h1>
            {
              flightNo && <p className='has-number'><span className='left'>{ flightNo }</span><span className='right' /></p>
            }
            {
              flightNo &&
              <Icon className='clear-flightNo' type='cross-circle-o' size='xs' style={{ color: '#ccc' }} onClick={ e => handleClearFlightNo(e, estimatePara, canPlace, productType) } />
            }
            {
              !flightNo &&
              <p className='no-number'><span>请输入航班号（延误免费等）</span></p>
            }
          </ListItem>
        }
        <ListItem className='start-point' onClick={ () => {
          if (productType !== 7 && productType !== 'jieji') {
            Mask(
              <SlidePage showClose={ false }>
                <AddressSearchGaode noFocus={ 1 } selectedAddress={ startPointObj } onSuccess={ handleStartAddress } LeftComponent={ LeftComponent } myAttribute='start' inputPlaceholder='您在哪儿上车' />
              </SlidePage>
            )
            return
          }
          Mask(
            <SlidePage showClose={ false }>
              <SelectAirport myAttribute='start' handleChangePoint={ handleStartAddress } />
            </SlidePage>
          )
        } }
        >
          <h1 className='icon-container'><span /></h1>
          <p className={ hasstartPointStr ? 'active' : '' }>{ hasstartPointStr ? startPointStr : '请选择您的上车地点' }</p>
        </ListItem>
        <ListItem className='end-point' onClick={ () => {
          if (productType !== 8 && productType !== 'songji') {
            Mask(
              <SlidePage showClose={ false }>
                <AddressSearchGaode noFocus={ 1 } selectedAddress={ endPointObj } onSuccess={ handleEndAddress } LeftComponent={ LeftComponent } myAttribute='end' inputPlaceholder='您要去哪儿' />
              </SlidePage>
            )
            return
          }
          Mask(
            <SlidePage showClose={ false }>
              <SelectAirport myAttribute='end' handleChangePoint={ handleEndAddress } />
            </SlidePage>
          )
        } }
        >
          <h1 className='icon-container'><span /></h1>
          <p className={ hasendPointStr ? 'active' : '' }>{ hasendPointStr ? endPointStr : '您在哪下车' }</p>
        </ListItem>
        <div className='select-time-contact'>
          <div className='select-time-contact-item' onClick={ () => handlePickerClick(!pickerVisible) }>
            <Icon type={ require('svg/yongche/time.svg') } size='xxs' />
            {
              isStartTimes2 ?
                <p>到达后<span>{ `${ datePickerExtra }分钟` }</span>上车</p> :
                datePickerExtra
            }
          </div>
          <div
            className='select-time-contact-item'
            onClick={
              () => Modal.alert('', <InputItem className='passenger-input' defaultValue={ currentPassenger === '换乘车人' ? '' : currentPassenger } placeholder='请输入乘车人手机号' type='number' maxLength={ 11 } />, [
                { text: '取消' },
                { text: '确定', onPress: () => handleChangePassenger(document.querySelector('.passenger-input input').value, productType) },
              ], '', '')
            }
          >
            <Icon type={ require('svg/yongche/passenger.svg') } size='xxs' />
            <span>{ currentPassenger }</span>
          </div>
        </div>
        {
          nearbyCarInfo &&
          <Flex className='car-style'>
            {
              nearbyCarInfo.map(item => {
                const isSelected = item.rideType === rideType
                if (item.rideType === '') {
                  return (
                    <Flex.Item className='car-item' key={ item.name }>
                      <Icon className='car-icon' type={ require('svg/yongche/no-support-car.svg') } size='lg' />
                      <div className='bottom'>
                        <span className='no-support-font'>{ item.name }</span>
                      </div>
                    </Flex.Item>
                  )
                }
                return (
                  <Flex.Item className='car-item' key={ item.name } onClick={ () => handleChangeCar(item, canPlace, estimatePara) }>
                    <Icon className='car-icon' type={ isSelected ? require('svg/yongche/car.svg') : require('svg/yongche/no-select-car.svg') } size='lg' />
                    <span className={ isSelected ? 'active' : '' }>{ item.name }</span>
                  </Flex.Item>
                )
              })
            }
          </Flex >
        }

        {
          estimate &&
          <p className='estimate-price' onClick={ isSinglePrice ? '' : () => Mask(<SlidePage showClose={ false } target='down'><EstimatePrice { ...{ handelRulesClick, estimate } } /></SlidePage>, { mask: false, style: { background: 'rgba(255, 255, 255, .9)' } }) }>
            约 <span>{ estimate.price }</span> 元
          </p>
        }

        {
          isSinglePrice && canPlace && estimate && estimate.price &&
          <SinglePay { ...{ estimatePrice: estimate.price, discount, payFooterShow, handleSingleBackPromotion, handleCloseCallback, channel, handlePay: () => handleCreateOrder(orderPara) } } />
        }
        <div className='s-button'>
          <p className={ canPlace ? 'active' : '' } onClick={ () => {
            if (canPlace) {
              handleCreateOrder(orderPara, isSinglePrice, discount)
            }
          } }
          >
            呼叫专车
          </p>
        </div>
      </div>

      <Modal
        title={ hasInStroke ? <p>您有一个行程中的订单</p> : <p>您有一个订单尚未支付，<br />赶紧去支付吧</p> }
        transparent
        maskClosable={ false }
        visible={ hasUnpay || hasInStroke }
        onClose={ handleChangeUnpay }
        footer={ [{ text: hasInStroke ? '知道了' : '去支付', onPress: () => handleChangeUnpay(orderId) }] }
        style={{ color: '#f00' }}
        className='has-unpay'
      />
      <Modal
        title={ <p>{ flightNoErrorMessage }</p> }
        transparent
        maskClosable={ false }
        visible={ flightNoError }
        onClose={ handleChangeFlightNoError }
        footer={
        [
          {
            text:    '确定',
            onPress: () => {
              handleChangeFlightNoError()
            },
          },
        ] }
        style={{ color: '#f00' }}
        className='has-unpay'
      />
      <Picker
        visible={ pickerVisible }
        data={ startTimes }
        title={ isStartTimes2 ? '若航班延误，我们也会免费等候' : '选择出发时间' }
        cols={ 3 }
        onChange={ handleStartTime }
        onOk={ () => handlePickerClick(false) }
        onDismiss={ () => handlePickerClick(false) }
      >
        <ListItem arrow='horizontal' style={{ display: 'none' }}>
          <Icon type={ require('svg/yongche/time.svg') } size='xxs' />
          <span>出发时间</span>
        </ListItem>
      </Picker>
    </List>
  )
}

export default Plane


const SinglePay = ({ handlePay, discount, estimatePrice, payFooterShow, channel, handleSingleBackPromotion, handleCloseCallback }) => {
  const payPrice = Number(estimatePrice - discount).toFixed(2)
  const priceL = payPrice.split('.')[0]
  const priceR = payPrice.split('.')[1]
  return (
    <div className='single-pay' onTouchMove={ e => e.preventDefault() } style={{ display: payFooterShow && discount ? 'block' : 'none' }}>
      <ExchangeActivePopup orderType='yongche' channel={ channel } amount={ estimatePrice } popupStyle={{ marginTop: '-1.00rem' }} promotionCallback={ handleSingleBackPromotion } handleCloseCallback={ handleCloseCallback } />
      <div className='body'>
        <p className='real-price'>实付：¥<span>{ priceL }</span>{ `.${ priceR }` }</p>
        <p className='disc-price'>{`优惠：¥${ discount }`}</p>
        <p className='pay-button' onClick={ handlePay }>立即支付</p>
      </div>
    </div>
  )
}
         
 
 
 
 yongche/components/price-rules.js 
 
import React, { Component } from 'react'
import { getStore } from '@boluome/common-lib'
import { Carousel } from 'antd-mobile'

import '../styles/price-rules.scss'

const szPriceList = {
  ljjc: [
    ['公务轿车', 15, 0.5, 2.8, 1.4, 15, 3],
    ['商务7座', 20, 0.7, 4.5, 1.5, 15, 4.2],
    ['豪华轿车', 23, 0.8, 4.6, 1.8, 15, 4.8],
  ],
  yyjc: [
    ['公务轿车', 50, 0.5, 4.2, 3],
    ['商务7座', 70, 0.7, 6, 4.2],
    ['豪华轿车', 78, 0.8, 6.4, 4.8],
  ],
}

const ljjc = szPriceList.ljjc.map(item => (
  {
    name:      item[0],
    basePrice: [
      {
        name:  '*起租价',
        price: `¥${ item[1] }`,
      },
      {
        name:  '*时长费',
        price: `¥${ item[2] }/分钟`,
      },
      {
        name:  '*里程费',
        price: `¥${ item[3] }/公里`,
      },
      {
        name:  '*远途费',
        price: `¥${ item[4] }/公里`,
        title: '超过15公里时，超出部分按里程收取',
      },
      {
        name:  '出城费',
        price: `¥${ item[5] }/公里`,
      },
    ],
  }
))
// 只有预约叫车时，神州的计价规则才不一样
const yyjc = szPriceList.ljjc.map(item => (
  {
    name:      item[0],
    basePrice: [
      {
        name:  '*套餐价',
        price: `¥${ item[1] }`,
        title: '含8公里20分钟',
      },
      {
        name:  '*超时费',
        price: `¥${ item[2] }/分钟`,
        title: '超出套餐包含的时长后，超出部分按分钟收取',
      },
      {
        name:  '*超里程费',
        price: `¥${ item[3] }/公里`,
        title: '超出套餐包含的里程后，超出部分按里程收取',
      },
      {
        name:  '出城费',
        price: `¥${ item[4] }/公里`,
      },
    ],
  }
))

const shenzhouListData = [ljjc, yyjc]

const priceListData = [
  {
    name:      '舒适型',
    basePrice: [
      {
        name:  '起步价',
        price: '17元',
      },
      {
        name:  '里程费',
        price: '3.2元／公里',
        title: '每0.1公里结算',
        data:  [
          { left: '07:00 - 10:00', right: '3.4 元／公里' },
          { left: '23:00 - 00:00', right: '3.9 元／公里' },
          { left: '00:00 - 05:00', right: '3.9 元／公里' },
        ],
      },
      {
        name:  '低速费',
        price: '0.5元／分钟',
        title: '速度<12公里/小时为低速；',
        data:  [
          { left: '07:00 - 10:00', right: '1.4 元／分钟' },
          { left: '17:00 - 20:00', right: '3.9 元／分钟' },
        ],
      },
      {
        name:  '远途费',
        price: '1.3元／公里',
        title: '超过10公里后加收远途费；',
      },
    ],
    moreServer: [
      {
        name:  '儿童座椅服务',
        price: '0元／次',
      },
    ],
    minConsumption: '60元',
  },
  {
    name:      '商务型',
    basePrice: [
      {
        name:  '起步价',
        price: '19元',
      },
      {
        name:  '里程费',
        price: '4.5元／公里',
        title: '每0.1公里结算',
        data:  [
          { left: '23:00 - 00:00', right: '6.8 元／公里' },
          { left: '00:00 - 05:00', right: '6.8 元／公里' },
        ],
      },
      {
        name:  '低速费',
        price: '1.5元／分钟',
        title: '速度<12公里/小时为低速；',
        data:  [
          { left: '07:00 - 10:00', right: '1.5 元／分钟' },
          { left: '17:00 - 20:00', right: '1.5 元／分钟' },
        ],
      },
      {
        name:  '远途费',
        price: '2.3元／公里',
        title: '超过10公里后加收远途费；',
      },
    ],
    moreServer: [
      {
        name:  '儿童座椅服务',
        price: '0元／次',
      },
    ],
    minConsumption: '70元',
  },
  {
    name:      '豪华型',
    basePrice: [
      {
        name:  '起步价',
        price: '25元',
      },
      {
        name:  '里程费',
        price: '5元／公里',
      },
      {
        name:  '最低消费',
        price: '48元',
        title: '里程费、时长费合计不足最低消费时，直接按最低消费额计费',
      },
      {
        name:  '低速费',
        price: '2元／分钟',
        title: '速度<12公里/小时为低速；',
        data:  [
          { left: '07:00 - 10:00', right: '2 元／分钟' },
          { left: '17:00 - 20:00', right: '2 元／分钟' },
        ],
      },
      {
        name:  '远途费',
        price: '2.5元／公里',
        title: '超过15公里后加收远途费；',
      },
      {
        name:  '夜间费',
        price: '2.3元／公里',
        title: '夜间（23:00 - 05:00次日）行驶时，加收夜间服务费',
      },
    ],
    minConsumption: '108元',
  },
]

export default class PriceRules extends Component {
  static defaultProps = {
    imgsArr: [
      require('../img/ridetype1.png'),
      require('../img/ridetype2.png'),
      require('../img/ridetype3.png'),
    ],
  }

  constructor(props) {
    super(props)
    this.channel = getStore('channel', 'session')
    this.state = {
      priceList:    priceListData,
      currentIndex: 0,
    }
    this.handleChangeCarousel = this.handleChangeCarousel.bind(this)
  }

  handleChangeCarousel(currentIndex) {
    this.setState({ currentIndex })
  }

  render() {
    const { priceList, currentIndex } = this.state
    const productType = getStore('productType', 'session')
    const { imgsArr } = this.props
    let currentPriceDetail = priceList[currentIndex]
    if (this.channel === 'shenzhou') {
      currentPriceDetail = shenzhouListData[0][currentIndex]
      // 神州只有预约叫车和立即叫车计价规则不一样，其他都和立即叫车计价规则一样
      if (productType === '13') currentPriceDetail = shenzhouListData[1][currentIndex]
    }
    const { name, basePrice, moreServer, minConsumption } = currentPriceDetail

    return (
      <div className='price-rules'>
        <Carousel
          className='my-carousel rules-carousel'
          autoplay={ false }
          infinite
          selectedIndex={ 1 }
          swipeSpeed={ 35 }
          beforeChange={ (from, to) => console.log(`slide from ${ from } to ${ to }`) }
          afterChange={ this.handleChangeCarousel }
          style={{ height: '3.1rem', position: 'absolute', top: '.3rem' }}
          dotStyle={{ background: '#d8d8d8', width: '.07rem', height: '.08rem' }}
          dotActiveStyle={{ background: '#c7c7c7', width: '.07rem', height: '.08rem' }}
        >
          {
            imgsArr.map(ii => (
              <a href={ ii } key={ ii } className='my-carousel'>
                <img
                  src={ ii }
                  className='carousel-img'
                  alt='icon'
                />
              </a>
            ))
          }
        </Carousel>

        <div className='header'>
          <p className='bg-grey' />
          <p className='car-name'>{ name }</p>
        </div>
        {
          this.channel === 'shenzhou' &&
          <div className='bottom'>
            <div className='description'>
              <div className='title'>
                <p />
                <h5>收费标准</h5>
              </div>
              {
                basePrice && basePrice.map(item => (
                  <ul className='description-item' key={ item.name }>
                    <li className='description-header'>
                      { item.name && <p className='name'>{ item.name }</p> }
                      { item.price && <p className='price'>{ item.price }</p> }
                    </li>
                    { item.title && <li className='description-title'><p>{ item.title }</p></li> }
                    {
                      item.data && item.data.map(o => (
                        <li className='base-price' key={ o.left }>
                          <p className='base-left'>{ o.left }</p>
                          <p className='base-right'>{ o.right }</p>
                        </li>
                      ))
                    }
                  </ul>
                ))
              }
              <ol className='description-item top-style'>
                收费说明：
                <li className='description-title'>
                  <p>1、带*收费项目为基础收费项目，实际价格需要在此表基础上乘以当时、当地动态加价系数；</p>
                </li>
                <li className='description-title'>
                  <p>2、立即叫车的其他时间段计价规则同预约用车现有规则；</p>
                </li>
                <li className='description-title'>
                  <p>3、起步价：起步价为最低消费额。若起租价(或套餐价)、时长相关费用、里程相关费用、远途费、出城费等基础费用合计不足起步价时，按起步价计费；</p>
                </li>
                <li className='description-title'>
                  <p>4、出城费：客户上下车地点不在同一地级市时，按照两城市市中心坐标间的直线距离乘以出城费单价收取出城费；（注：城市市中心坐标由高德地图提供）</p>
                </li>
                <li className='description-title'>
                  <p>5、清洁费：如客户在用车时发生呕吐、踩蹬等情况造成车辆脏乱的，客户需额外支付清洁费：100元/次；</p>
                </li>
                <li className='description-title'>
                  <p>6、差旅费：连续多日订单，驾驶员需要陪同在异地过夜的情况下，客户需要按300元/晚的标准支付食宿费；连续多日订单但在同城内，驾驶员可回家休息的情况下，该费用用户不需要支付；</p>
                </li>
                <li className='description-title'>
                  <p>7、路桥费，停车费：用车过程中产生的路桥费（含高速费）、停车费等费用，由客户自行支付，客户要求驾驶员垫付的，按照实际发生金额的1.5倍收取；</p>
                </li>
                <li className='description-title'>
                  <p>
                    8、取消费：<br />
                    以下情况时，客户需支付取消费<br />
                    &nbsp;&nbsp;a、客户在驾驶员到达后取消或修改订单的；<br />
                    &nbsp;&nbsp;b、未在预订上车时间后15分钟内上车，且无法取得联系的。<br />
                    取消费标准：<br />
                    &nbsp;&nbsp;a、立即叫车、接机、送机：该产品起租价；<br />
                    &nbsp;&nbsp;b、预约用车：该产品套餐价；<br />
                    &nbsp;&nbsp;c、包车：100元/次；
                  </p>
                </li>
                <li className='description-title'>
                  <p>9、其他：预估费用仅供参考，实际费用可能因交通、天气或其他因素而不同。预估价不包含行程中产生的任何第三方费用（如路桥费、停车费等）。第三方费用需要您另行现金支付，如您选择线上支付（如账户余额、信用卡等），则支付金额为实际产生的第三方费用1.5倍。</p>
                </li>
              </ol>
            </div>
          </div>
        }

        {
          this.channel === 'didi' &&
          <div className='bottom'>
            <div className='description'>
              <div className='title'>
                <p />
                <h5>收费标准</h5>
              </div>
              {
                basePrice && basePrice.map(item => (
                  <ul className='description-item' key={ item.name }>
                    <li className='description-header'>
                      { item.name && <p className='name'>{ item.name }</p> }
                      { item.price && <p className='price'>{ item.price }</p> }
                    </li>
                    { item.title && <li className='description-title'><p>{ item.title }</p></li> }
                    {
                      item.data && item.data.map(o => (
                        <li className='base-price' key={ o.left }>
                          <p className='base-left'>{ o.left }</p>
                          <p className='base-right'>{ o.right }</p>
                        </li>
                      ))
                    }
                  </ul>
                ))
              }
              <ul className='description-item top-style'>
                <li className='description-header'>
                  <p className='name'>动态加价</p>
                </li>
                <li className='description-title'><p>当处于高峰时段、周围司机较少，或司机距离您较远的情况下，为了促进成交，鼓励司机更快接单，平台会对订单适当加价，加价金额全部给到司机。为保障乘客的利益与出行体验，加价会封顶不会无限制增加</p></li>
              </ul>
              {
                moreServer &&
                <ul className='description-item top-style'>
                  <li className='description-header'>
                    <p className='name'>更多服务</p>
                  </li>
                  {
                    moreServer.map(item => (
                      <li className='base-price' key={ item.name }>
                        <p className='base-left'>{ item.name }</p>
                        <p className='base-right'>{ item.price }</p>
                      </li>
                    ))
                  }
                </ul>
              }
              <ul className='description-item top-style'>
                <li className='description-title'><p>注：高速费、路桥费、停车费、其他费用按行驶过程中司机实际垫付的费用收取</p></li>
              </ul>
            </div>

            <div className='description description-b'>
              <div className='title'>
                <p />
                <h5>预约用车</h5>
              </div>
              <ul className='description-item'>
                <li className='description-header'>
                  <p className='name'>基础计价规则与实时计价保持一致</p>
                </li>
                <li className='base-price'>
                  <p className='base-left'>最低消费</p>
                  <p className='base-right'>{ minConsumption }</p>
                </li>
                <li className='description-title'><p>里程费、时长费合计不足最低消费时，直接按最低消费额计费</p></li>
              </ul>
              <ul className='description-item top-style'>
                <li className='description-title'><p>注：因司机接驾预约订单有更长的接驾和等待成本，为了保证服务质量，预约用车有最低消费限制</p></li>
              </ul>
            </div>
          </div>
        }
      </div>
    )
  }
}
         
 
 
 
 yongche/components/product.js 
 
/*
  问题：
  1, 暂时没有取消nearbyCarInfo判断附近是否有对应车型，然后决定界面显示的状态

  tips：
  1，该页面会按需显示三种组件：
    a：用于优化页面的判断，没有supportThisCity数据返回时，显示空白页
    b：当supportThisCity为false时，表示不支持当前城市，显示NosupportCity组件
    c：当supportThisCity为true时，显示正常页面
*/

import React from 'react'
import { List, Picker, Icon, Flex, Modal, InputItem } from 'antd-mobile'
import { SlidePage, Mask, AddressSearchGaode, ExchangeActivePopup } from '@boluome/oto_saas_web_app_component'
// import { vconsole } from 'vconsole'

import NosupportCity from '../common-components-self/no-support-city'
import EstimatePrice from '../common-components-self/estimate-price'
import LeftComponent from '../common-components-self/address-left-component'
import SelectAirport from '../common-components-self/select-airport'
import '../styles/product.scss'

const Product = props => {
  const {
    supportThisCity, getLocationErr,
    handleTabClick, currentname, handleReloadCity, handleChangeCity,
    showChannel, handleChangeCar, handleChangePassenger, handleChangeDate, startTimes, defaultCurrentDate, isStartTimes2,
    handleChangeStartPointObj, handleChangeEndPointObj,
    estimate,
    handleToinvoiceInfo, handleToStroke,
    handleCreateOrder,
    hasUnpay, hasInStroke, handleChangeUnpay, orderId,
    currentProduct = { code: '' }, products,
    handelRulesClick, isSinglePrice, channel,
    handleSingleBackPromotion, promotionData = { discount: '', promotionBackData: '' }, handleCloseCallback, payFooterShow = true,
    flightNoErrorMessage, flightNoError, handleChangeFlightNoError,
    defaultCityCenterObj = {},
    handleToPlane, pickerVisible, handlePickerClick,
  } = props
  if ((!supportThisCity && supportThisCity !== undefined) || getLocationErr) {
    return (
      <div>
        <NosupportCity { ...{ currentname, handleReloadCity, handleChangeCity, getLocationErr } } />
      </div>
    )
  }

  let { defaultPointObj = {} } = props
  const productType = currentProduct.code
  // 设置当前productType对应的起点对象
  if (productType !== 'private-car' && productType !== 13 && productType !== 14) defaultPointObj = defaultCityCenterObj
  const startPointObj = props[`startPointObj${ productType }`] ? props[`startPointObj${ productType }`] : defaultPointObj
  const startPointStr = props[`startPointStr${ productType }`] ? props[`startPointStr${ productType }`] : defaultPointObj.title
  if (!defaultPointObj || !products || supportThisCity === undefined) {
    return (<div />)
  }
  const ListItem = List.Item

  // 设置当前productType对应的终点对象
  let endPointObj = props[`endPointObj${ productType }`]
  const endPointStr = props[`endPointStr${ productType }`]
  // 设置当前productType对应的出发时间, 乘车人
  let currentDate =  props[`currentDate${ productType }`] ? props[`currentDate${ productType }`] : ''
  const currentPassenger = props[`currentPassenger${ productType }`] ? props[`currentPassenger${ productType }`] : '换乘车人'
  // 设置当前productType对应的航班号，航班时间
  const flightNo = props[`flightNo${ productType }`] ? props[`flightNo${ productType }`] : ''
  const flightDate = props[`flightDate${ productType }`] ? props[`flightDate${ productType }`] : ['']

  const hasstartPointStr = Boolean(startPointStr)
  const hasendPointStr = Boolean(endPointStr)
  const canPlace = hasstartPointStr && hasendPointStr && startPointStr !== '附近无可选上车地点' && endPointStr !== '附近无可选上车地点'
  // 设置默认值
  // 默认当前车信息
  // 默认起终点
  if (!endPointObj || !endPointObj.latitude) endPointObj = defaultPointObj
  const [startLatitude, startLongitude, startAddress, endAddress, endLatitude, endLongitude] =
  [startPointObj.latitude, startPointObj.longitude, startPointStr, endPointStr, endPointObj.latitude, endPointObj.longitude]
  // 定义预约时间
  let departureTime = defaultCurrentDate
  if ((currentDate === '' || currentDate.length === 2) && channel === 'didi' && isSinglePrice) currentDate = [startTimes[0].value, startTimes[0].children[0].value, startTimes[0].children[0].children[0].value]
  if (currentDate !== '' && currentDate.length !== 2) departureTime = `${ currentDate[0] } ${ currentDate[1] }:${ currentDate[2] }`
  // 获取附近车型
  const nearbyCarInfo = props[`nearbyCarInfo${ productType }`]
  const currentCarInfo = props[`currentCarInfo${ productType }`]
  let rideType = ''
  if (currentCarInfo) rideType = currentCarInfo.rideType
  // 定义乘车人手机号码
  const contactPhone = currentPassenger === '换乘车人' ? '' : currentPassenger
  let airCode = ''
  // 因为机场选择只会出现一次，所以startPointObj和endPointObj中，只会包含一个code
  if (startPointObj.code) airCode = startPointObj.code
  if (endPointObj.code) airCode = endPointObj.code
  // 定义查询附近运力时的参数
  const estimatePara = {
    startLatitude,
    startLongitude,
    startAddress,
    endLatitude,
    endLongitude,
    endAddress,
    rideType,
    departureTime,
    productType,
    flightNo,
    flightDate: flightDate[0],
    airCode,
  }
  // 定义呼叫专车时的参数
  const origin = { name: startPointStr, latitude: startPointObj.latitude, longitude: startPointObj.longitude, detail: startPointObj.detail }
  const destination = { name: endPointStr, latitude: endPointObj.latitude, longitude: endPointObj.longitude, detail: endPointObj.detail }

  const { discount, coupon, activities } = promotionData
  const couponId = coupon ? coupon.id : ''
  const activityId = activities ? activities.id : ''
  const orderPara = {
    rideType,
    origin,
    destination,
    departureTime,
    contactPhone,
    productType,
    flightNo,
    flightDate: flightDate[0],
    airCode,
    activityId,
    couponId,
  }
  // 下面三个函数，作用是：使用组件，会有一个默认参数，但是我们还需要传入另一个参数，所以使用一个过度函数，去承接这个默认的和想要的参数
  const handleStartAddress = res => {
    // hasendPointStr && endPointStr !== '附近无可选上车地点'  不能用canPlace代替，因为选择锅底之后，对应的startPointStr并没有更新，所以会仍是false，下面同理
    handleChangeStartPointObj(res, hasendPointStr && endPointStr !== '附近无可选上车地点', estimatePara, currentProduct)
  }
  const handleEndAddress = res => {
    handleChangeEndPointObj(res, hasstartPointStr && startPointStr !== '附近无可选上车地点', estimatePara, currentProduct)
  }
  const handleStartTime = res => {
    handleChangeDate(res, canPlace, estimatePara, isStartTimes2)
  }

  const ulS = {
    overflow:     'hidden',
    height:       '100px',
    borderBottom: '1px solid #e5e5e5',
  }
  const liS = {
    float:      'left',
    width:      '50%',
    height:     '100px',
    lineHeight: '100px0',
    fontSize:   '36px',
    listStyle:  'none',
    textAlign:  'center',
  }
  const suppliers = ['didi', 'shenzhou']

  let datePickerExtra = '现在出发'
  if (currentDate.length >= 3 && !isStartTimes2) {
    // datePickerExtra = `${ currentDate[0] } ${ currentDate[1] }:${ currentDate[2] }`
    switch (currentDate[0]) {
      case startTimes[0].value:
        datePickerExtra = `${ startTimes[0].label } ${ currentDate[1] }:${ currentDate[2] }`
        break
      case startTimes[1].value:
        datePickerExtra = `${ startTimes[1].label } ${ currentDate[1] }:${ currentDate[2] }`
        break
      case startTimes[2].value:
        datePickerExtra = `${ startTimes[2].label } ${ currentDate[1] }:${ currentDate[2] }`
        break
      default:
        datePickerExtra = `${ currentDate[0] } ${ currentDate[1] }:${ currentDate[2] }`
        break
    }
  }
  if (isStartTimes2) {
    if (currentDate) {
      datePickerExtra = currentDate[1]
      estimatePara.flightDelayTime = Number(currentDate[1])
      orderPara.flightDelayTime = Number(currentDate[1])
      orderPara.departureTime = ''
    } else {
      datePickerExtra = defaultCurrentDate[1]
      estimatePara.flightDelayTime = Number(defaultCurrentDate[1])
      orderPara.flightDelayTime = Number(defaultCurrentDate[1])
      orderPara.departureTime = ''
    }
  }
  return (
    <List className='product'>
      <div className='header'>
        {
          Boolean(estimate) && Boolean(estimate.time) &&
          <h1 className='meet-time'>{ `“最快${ estimate.time }分钟接驾”`} </h1>
        }
        {
          showChannel &&
          <ul style={ ulS }>
            {
              suppliers.map(item => (<li style={ liS } onClick={ () => handleTabClick(item) } key={ item }>{ item }</li>))
            }
          </ul>
        }
        <ListItem className='start-point' onClick={ () => {
          if (productType !== 7 && productType !== 'jieji') {
            Mask(
              <SlidePage showClose={ false }>
                <AddressSearchGaode noFocus={ 1 } selectedAddress={ startPointObj } onSuccess={ handleStartAddress } LeftComponent={ LeftComponent } myAttribute='start' inputPlaceholder='您在哪儿上车' />
              </SlidePage>
            )
            return
          }
          Mask(
            <SlidePage showClose={ false }>
              <SelectAirport myAttribute='start' handleChangePoint={ handleStartAddress } />
            </SlidePage>
          )
        } }
        >
          <span />
          <p className={ hasstartPointStr ? 'active' : '' }>{ hasstartPointStr ? startPointStr : '请选择您的上车地点' }</p>
        </ListItem>
        <ListItem className='end-point' onClick={ () => {
          if (productType !== 8 && productType !== 'songji') {
            Mask(
              <SlidePage showClose={ false }>
                <AddressSearchGaode noFocus={ 1 } selectedAddress={ endPointObj } onSuccess={ handleEndAddress } LeftComponent={ LeftComponent } myAttribute='end' inputPlaceholder='您要去哪儿' />
              </SlidePage>
            )
            return
          }
          Mask(
            <SlidePage showClose={ false }>
              <SelectAirport myAttribute='end' handleChangePoint={ handleEndAddress } />
            </SlidePage>
          )
        } }
        >
          <span />
          <p className={ hasendPointStr ? 'active' : '' }>{ hasendPointStr ? endPointStr : '您在哪下车' }</p>
        </ListItem>
        <div className='select-time-contact'>
          <div className='select-time-contact-item' onClick={ () => handlePickerClick(!pickerVisible) }>
            <Icon type={ require('svg/yongche/time.svg') } size='xxs' />
            <span>{ datePickerExtra }</span>
          </div>
          <div
            className='select-time-contact-item'
            onClick={
              () => Modal.alert('', <InputItem className='passenger-input' defaultValue={ currentPassenger === '换乘车人' ? '' : currentPassenger } placeholder='请输入乘车人手机号' type='number' maxLength={ 11 } />, [
                { text: '取消' },
                { text: '确定', onPress: () => handleChangePassenger(document.querySelector('.passenger-input input').value, productType) },
              ], '', '')
            }
          >
            <Icon type={ require('svg/yongche/passenger.svg') } size='xxs' />
            <span>{ currentPassenger }</span>
          </div>
        </div>
        {
          nearbyCarInfo &&
          <Flex className='car-style'>
            {
              nearbyCarInfo.map(item => {
                const isSelected = item.rideType === rideType
                if (item.rideType === '') {
                  return (
                    <Flex.Item className='car-item' key={ item.name }>
                      <Icon className='car-icon' type={ require('svg/yongche/no-support-car.svg') } size='lg' />
                      <div className='bottom'>
                        <span className='no-support-font'>{ item.name }</span>
                      </div>
                    </Flex.Item>
                  )
                }
                return (
                  <Flex.Item className='car-item' key={ item.name } onClick={ () => handleChangeCar(item, canPlace, estimatePara) }>
                    <Icon className='car-icon' type={ isSelected ? require('svg/yongche/car.svg') : require('svg/yongche/no-select-car.svg') } size='lg' />
                    <span className={ isSelected ? 'active' : '' }>{ item.name }</span>
                  </Flex.Item>
                )
              })
            }
          </Flex >
        }
        {
          estimate &&
          <p className='estimate-price' onClick={ isSinglePrice ? '' : () => Mask(<SlidePage showClose={ false } target='down'><EstimatePrice { ...{ handelRulesClick, estimate } } /></SlidePage>, { mask: false, style: { background: 'rgba(255, 255, 255, .9)' } }) }>
            约 <span>{ estimate.price }</span> 元
          </p>
        }
        {
          isSinglePrice && canPlace && estimate && estimate.price &&
          <SinglePay { ...{ estimatePrice: estimate.price, discount, payFooterShow, handleSingleBackPromotion, handleCloseCallback, channel, handlePay: () => handleCreateOrder(orderPara) } } />
        }
        <div className='s-button'>
          <p className={ canPlace ? 'active' : '' } onClick={ () => {
            if (canPlace) {
              handleCreateOrder(orderPara, isSinglePrice, discount)
            }
          } }
          >
            呼叫专车
          </p>
        </div>
        {
          products.length >= 2 &&
          <div className='plane-button'>
            <ul>
              <li onClick={ () => handleToPlane(products[1].code) }>
                <h1>
                  <Icon type={ require('svg/yongche/jieji.svg') } size='md' />
                </h1>
                <p>接机</p>
              </li>
              {
                products.length >= 3 &&
                <li onClick={ () => handleToPlane(products[2].code) }>
                  <h1>
                    <Icon type={ require('svg/yongche/songji.svg') } size='sm' />
                  </h1>
                  <p>送机</p>
                </li>
              }
            </ul>
          </div>
        }
      </div>
      <div className='footer'>
        <ListItem className='footer-item' arrow='horizontal' extra='' onClick={ handleToStroke } >
          <p className='footer-item-title'>
            <Icon type={ require('svg/yongche/stroke.svg') } size='md' />
            <span>我的行程</span>
          </p>
        </ListItem>
        <ListItem className='footer-item' arrow='horizontal' extra='' onClick={ handleToinvoiceInfo } >
          <p className='footer-item-title'>
            <Icon type={ require('svg/yongche/invoice.svg') } size='md' />
            <span>发票</span>
          </p>
        </ListItem>
      </div>

      <Modal
        title={ hasInStroke ? <p>您有一个行程中的订单</p> : <p>您有一个订单尚未支付，<br />赶紧去支付吧</p> }
        transparent
        maskClosable={ false }
        visible={ hasUnpay || hasInStroke }
        onClose={ handleChangeUnpay }
        footer={ [{ text: hasInStroke ? '知道了' : '去支付', onPress: () => handleChangeUnpay(orderId) }] }
        style={{ color: '#f00' }}
        className='has-unpay'
      />
      <Modal
        title={ <p>{ flightNoErrorMessage }</p> }
        transparent
        maskClosable={ false }
        visible={ flightNoError }
        onClose={ handleChangeFlightNoError }
        footer={
        [
          {
            text:    '确定',
            onPress: () => {
              handleChangeFlightNoError()
            },
          },
        ] }
        style={{ color: '#f00' }}
        className='has-unpay'
      />
      <Picker
        visible={ pickerVisible }
        data={ startTimes }
        title={ isStartTimes2 ? '若航班延误，我们也会免费等候' : '选择出发时间' }
        cols={ 3 }
        extra={ isStartTimes2 ? <p>航班到达后 <span>{ `${ datePickerExtra }分钟` }</span> 上车</p> : datePickerExtra }
        onChange={ handleStartTime }
        onOk={ () => handlePickerClick(false) }
        onDismiss={ () => handlePickerClick(false) }
      >
        <ListItem arrow='horizontal' style={{ display: 'none' }}>
          <Icon type={ require('svg/yongche/time.svg') } size='xxs' />
          <span>出发时间</span>
        </ListItem>
      </Picker>
      <img className='grey-logo' src={ channel === 'shenzhou' ? require('../img/shenzhou_grey.png') : require('../img/didi_grey.png') } alt='logo' />
    </List>
  )
}

export default Product


const SinglePay = ({ handlePay, discount, estimatePrice, payFooterShow, channel, handleSingleBackPromotion, handleCloseCallback }) => {
  const payPrice = Number(estimatePrice - discount).toFixed(2)
  const priceL = payPrice.split('.')[0]
  const priceR = payPrice.split('.')[1]
  return (
    <div className='single-pay' onTouchMove={ e => e.preventDefault() } style={{ display: payFooterShow && discount ? 'block' : 'none' }}>
      <ExchangeActivePopup orderType='yongche' channel={ channel } amount={ estimatePrice } popupStyle={{ marginTop: '-1.00rem' }} promotionCallback={ handleSingleBackPromotion } handleCloseCallback={ handleCloseCallback } />
      <div className='body'>
        <p className='real-price'>实付：¥<span>{ priceL }</span>{ `.${ priceR }` }</p>
        <p className='disc-price'>{`优惠：¥${ discount }`}</p>
        <p className='pay-button' onClick={ handlePay }>立即支付</p>
      </div>
    </div>
  )
}
         
 
 
 
 yongche/components/root.js 
 
import React from 'react'
import customize from 'customize'

export default customize(
  ({ children }) => (
    <div style={{ overflow: 'auto', height: '100%' }}>{ children }</div>
  )
)
         
 
 
 
 yongche/components/stroke.js 
 
import React from 'react'
import { List } from 'antd-mobile'
import { Empty } from '@boluome/oto_saas_web_app_component'

import OrderItem from '../common-components-self/order-item'
import '../styles/stroke.scss'

const Stroke = ({ orderList, handleOrderClick, channel }) => {
  if (orderList) {
    if (orderList.length <= 0) {
      return (
        <Empty imgUrl={ require('../img/noStroke.png') } message='目前您还没有订单哦～' />
      )
    }
    return (
      <div className='stroke'>
        {
          orderList.map(item => {
            const { id, date, price, status, start, end } = item
            let { displayStatus } = item
            if (displayStatus === '无司机应答') displayStatus = '已取消'
            return (
              <div className='stroke-item' key={ id } onClick={ () => handleOrderClick(id) }>
                <List.Item className={ status === 2 ? 'stroke-header active' : 'stroke-header' } extra={ displayStatus } arrow='horizontal'>
                  <img src={ channel === 'didi' ? require('../img/didi.png') : require('../img/shenzhou.png') } alt={ channel } />
                </List.Item>
                <OrderItem { ...{ date, start, end } } />
                <p className='price'>{ status === 8 ? '预估' : '付款' }金额：<span>{ `￥${ price }` }</span></p>
              </div>
            )
          })
        }
      </div>
    )
  }
  return (
    <div />
  )
}

export default Stroke
         
 
 
 
 yongche/containers/channel.js 
 
/*
  页面编写注意事项：
  1， 先存经纬度对象，在存地址，因为每一次dispatch都会刷新一次组件，在component中，是先判断地址，如果地址存在，直接用经纬度，所以为了避免报错，要先存经纬度

*/

import { connect } from 'react-redux'
import { wrap }    from '@boluome/oto_saas_web_app_component'
import { setStore, getStore } from '@boluome/common-lib'

import Channel from '../components/channel'
import { getNearbyProduct, getNearbyCar } from '../actions/product.js'

const mapStateToProps = ({ channel }) => {
  return {
    ...channel,
  }
}


// 清空已选择地址等信息
const clearInfo = dispatch => {
  // dispatch({ type: 'SET_START_POINT_OBJ', startPointObj: {} })
  // dispatch({ type: 'SET_START_POINT_STR', startPointStr: '' })
  dispatch({ type: 'SET_END_POINT_OBJ', endPointObj: {} })
  dispatch({ type: 'SET_END_POINT_STR', endPointStr: '' })
  // dispatch({ type: 'SET_CURRENT_DATE', currentDate: '' })
  // dispatch({ type: 'SET_CURRENT_PASSENGER', currentPassenger: '换乘车人' })
  dispatch({ type: 'SET_NEARBY_CAR', currentCarInfo: '' })
  dispatch({ type: 'SET_ESTIMATA', estimate: '' })
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleTabClick(channel) {
      setStore('channel', channel, 'session')
      const { latitude, longitude } = getStore('defaultPointObj', 'session')
      // 获取附近可用产品类型
      const productPara = {
        channel,
        latitude,
        longitude,
      }
      dispatch(getNearbyProduct(productPara))
      dispatch(getNearbyCar())
      clearInfo(dispatch)
    },
  }
}


const mapFunToComponent  = () => ({
  componentDidMount() {
    // 将默认的channel存在session中
    setStore('channel', 'didi', 'session')
    // getLocation(() => {
    //   // 将默认地址设为北京的         mockdata
    //   setStore('geopoint', { latitude: '39.910873', longitude: '116.413677' }, 'session')
    //   setStore('currentPosition', { streetNumber: '2号-10号楼-403号', street: '正义路', district: '东城区', city: '北京市', province: '北京市' }, 'session')
    //
    //   const geopoint = getStore('geopoint', 'session')
    //   const currentname = getStore('currentPosition', 'session').city
    //   dispatch({ type: 'SET_CURRENT_CITY', currentname })
    //   // 获取附近可用产品类型，选择第一个添加到路径中
    //   const productPara = {
    //     latitude:  geopoint.latitude,
    //     longitude: geopoint.longitude,
    //   }
    //   dispatch(getNearbyProduct(productPara))
    // })
  },
})


export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(Channel)
)
         
 
 
 
 yongche/containers/demo.js 
 
import { connect } from 'react-redux'
import { wrap } from '@boluome/oto_saas_web_app_component'

import Demo from '../components/demo'

const mapStateToProps = () => {
  const mock = 'demo'
  return {
    mock,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
  }
}

const mapFunToComponent = () => {
  return {
    componentWillMount() {
      console.log('demo componentWillMount')
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(wrap(mapFunToComponent)(Demo))
         
 
 
 
 yongche/containers/invoice-history.js 
 
import { connect } from 'react-redux'
import { wrap } from '@boluome/oto_saas_web_app_component'

import InvoiceHistory from '../components/invoice-history'

const mapStateToProps = () => {
  const mock = 'invoice-history'
  return {
    mock,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
  }
}

const mapFunToComponent = () => {
  return {
    componentWillMount() {
      console.log('invoice-history componentWillMount')
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(wrap(mapFunToComponent)(InvoiceHistory))
         
 
 
 
 yongche/containers/invoice-info.js 
 
import { connect } from 'react-redux'
import { wrap } from '@boluome/oto_saas_web_app_component'
import { contains } from 'ramda'

import InvoiceInfo from '../components/invoice-info'

const mapStateToProps = ({ invoiceInfo }) => {
  // let totalinvoiceInfoPrice = 0
  return {
    ...invoiceInfo,
  }
}
const mapDispatchToProps = dispatch => ({
  dispatch,
  handleinvoiceInfoClick(index, invoiceInfoArr) {
    invoiceInfoArr.splice(index, 1, !invoiceInfoArr[index])
    dispatch({ type: 'SET_invoiceInfo_SELECTE', invoiceInfoArr })
    // 判断全选是否应该选中
    if (invoiceInfoArr && !contains(false)(invoiceInfoArr) && !contains(0)(invoiceInfoArr)) {
      dispatch({ type: 'SET_invoiceInfo_ALL_SELECTE', isAllSelect: true })
    } else {
      dispatch({ type: 'SET_invoiceInfo_ALL_SELECTE', isAllSelect: false })
    }
  },
  handleAllSelect(isAllSelect, invoiceInfoArr) {
    if (isAllSelect) {
      invoiceInfoArr = invoiceInfoArr.map(() => false)
    } else {
      invoiceInfoArr = invoiceInfoArr.map(() => true)
    }
    isAllSelect = !isAllSelect
    dispatch({ type: 'SET_invoiceInfo_ALL_SELECTE', isAllSelect })
    dispatch({ type: 'SET_invoiceInfo_SELECTE', invoiceInfoArr })
  },
})

const mapFunToComponent = () => ({
  componentDidMount: () => {
    console.log('invoice-info')
  },
})

export default
  connect(mapStateToProps, mapDispatchToProps)(
    wrap(mapFunToComponent)(InvoiceInfo)
  )
         
 
 
 
 yongche/containers/order-cancel.js 
 
import { connect } from 'react-redux'
import { setStore } from '@boluome/common-lib'
import { wrap } from '@boluome/oto_saas_web_app_component'

import OrderCancel from '../components/order-cancel'
import { putCancleReason } from '../actions/order-cancel'

const mapStateToProps = ({ cancelReason }) => {
  return {
    ...cancelReason,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handelReasonClick(currentReason) {
      dispatch({ type: 'SET_CURRENT_CANCEL_REASON', currentReason })
    },
    handlePlaceCancel(currentReason) {
      // 将flage设为1，表示是从取消原因页面返回的
      setStore('cancelReasonReturn', true, 'session')
      dispatch(putCancleReason(currentReason))
    },
  }
}

const mapFunToComponent = () => {
  return {
    componentWillMount() {
      console.log('order-cancel componentWillMount')
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(wrap(mapFunToComponent)(OrderCancel))
         
 
 
 
 yongche/containers/order-id.js 
 
/*
    定时轮询在action中开启
*/

import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { wrap, Mask } from '@boluome/oto_saas_web_app_component'
import { Modal } from 'antd-mobile'
import { getStore, setStore } from '@boluome/common-lib'

import OrderId from '../components/order-id'
import { cancelOrder, getOrderStatus, placeEvaluate, handleToPay } from '../actions/order-id'

const mapStateToProps = ({ orderId }) => {
  return {
    ...orderId,
  }
}
const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleCancelClick(status, channel) {
      // 定义一个点击是之后的根据status判断接下来操作的函数
      const yesFunc = () => {
        if (status === 1) {
          dispatch(cancelOrder(status, channel))
        } else {
          const id = location.pathname.split('/')[3]
          // 如果是已接单取消，先去取消原因页面填写取消原因
          browserHistory.push(`/yongche/order/${ id }/cancel`)
        }
      }
      // 如果有行程中的订单，弹出确认框
      Modal.alert('您是否要取消用车', '', [
        { text: '否', onPress: () => console.log('cancel') },
        { text: '是', onPress: yesFunc },
      ])
    },
    handleToPay(paras) {
      dispatch(handleToPay(paras))
    },
    handleRecallClick(currentOrderInfo, isSinglePrice) {
      const { channel, id } = currentOrderInfo
      if (isSinglePrice) {
        // flag等于1表示，是从行程页或是无应答页，点击跳转而来的
        dispatch({ type: 'SET_CURRENT_FLAG', flag: '1' })
        browserHistory.push(`/yongche/order/${ id }?flag=1`)
        return
      }
      const productType = getStore('currentProduct', 'session') ? getStore('currentProduct', 'session').code : '14'
      browserHistory.push(`/yongche/${ channel }/${ productType }`)
      // 提供当页重新叫车服务
      // const { channel, contactPhone, customerUserId, destination, imei, origin, productType, rideType, userPhoen } = currentOrderInfo
      // dispatch(createOrder({ channel, contactPhone, customerUserId, departureTime: ['2017-07-11', '现在'], destination, imei, origin, productType, rideType, userPhoen }, getOrderStatus))
    },
    handelRulesClick() {
      browserHistory.push('/yongche/rules')
    },
    handleToIndex(channel, productType) {
      browserHistory.push(`/yongche/${ channel }/${ productType }`)
    },
    handlePlaceEvaluate(rating, content, id) {
      dispatch(placeEvaluate(rating, content, id))
    },
  }
}

const mapFunToComponent = dispatch => ({
  componentWillMount() {
    const id = location.pathname.split('/')[3]
    // 清除
    if (window[id]) {
      clearInterval(window[id])
      window[id] = null
    }
    if (window[`${ id }_charging`]) {
      clearInterval(window[`${ id }_charging`])
      window[`${ id }_charging`] = null
    }
    // 只会在componentWillUnmount中从session中获取，因为componentWillUnmount时，url已经变了
    setStore('id', id, 'session')
    dispatch(getOrderStatus(id, 'isFirst'))
    // flag等于1表示，是从行程页或是无应答页，点击跳转而来的
    // 如果是取消原因页面返回的，cancelReasonReturn为true，或是从其他页面进入（一般是客户的订单列表，flag不一定为1），这时都算订单列表返回，要和当前页面中无司机接单取消和带退款的状态区分开
    const flag = (getStore('cancelReasonReturn', 'session') || location.search.length > 1) ? '1' : ''
    dispatch({ type: 'SET_CURRENT_FLAG', flag })
  },
  // 当离开此页面时
  componentWillUnmount() {
    // 关闭所有弹窗
    Mask.closeAll()
    // 清空当前的订单信息
    dispatch({ type: 'SET_CURRENT_STATUS', currentStatus: '', currentOrderInfo: '' })

    // 关闭所有派单、行程中的订单轮询
    const id = getStore('id', 'session')
    if (window[id]) {
      clearInterval(window[id])
      window[id] = null
    }
    if (window[`${ id }_charging`]) {
      clearInterval(window[`${ id }_charging`])
      window[`${ id }_charging`] = null
    }
  },
})

export default
  connect(mapStateToProps, mapDispatchToProps)(
    wrap(mapFunToComponent)(OrderId)
  )
         
 
 
 
 yongche/containers/plane.js 
 
/*
  页面编写注意事项：
  1， 先存经纬度对象，在存地址，因为每一次dispatch都会刷新一次组件，在component中，是先判断地址，如果地址存在，直接用经纬度，所以为了避免报错，要先存经纬度

  2,  页面起终点保存时，加上productType，这样，当切换product时，就可以直接使用对应保存的起终点对象，不会出现变量使用混乱的情况
  起终点对象的保存格式: startPointObj${ productType }
  当前选中的地址对象的保存格式：start_selectedCity${ productType }

  接口中用到经纬度的；
    1，获取附近产品类型
    2，预估价
    3，下单
*/

import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { wrap, Loading, Mask }    from '@boluome/oto_saas_web_app_component'
import { getStore, setStore, removeStore, moment, week } from '@boluome/common-lib'
import { Toast } from 'antd-mobile'
import { merge } from 'ramda'
import { getLocation, login } from 'business'

import Plane from '../components/plane'
import { getIndexInit, getEstimate, getNearbyCar, checkOrder, createOrder, setStartPoint, setStartPointInAirport } from '../actions/product'

// const day = ['今天', '明天', '后天']
// getMins用户获取传入分钟 - 50之间所有的10的倍数的分钟数
const getMins = m => {
  const mins = []
  m = Math.ceil(m / 10)
  for (let i = m; i < 6; i++) {
    let mItem = i * 10
    if (i === 0) mItem = '00'
    mins.push(mItem)
  }
  return mins
}
// getHours用户获取传入时间 - 23之间所有的小时
const getHours = (hour, isToday = false) => {
  const h = parseFloat(hour.split(':')[0])
  const m = parseFloat(hour.split(':')[1])

  // 是今天
  // 如果是今天，要区分出现在，和第一个时间的节点，是在20之前，还是之后，分别对应两种方式。
  if (isToday) {
    const hours = [[], { h: '现在', mins: [] }]
    let newM = '00'
    for (let i = h; i < 24; i++) {                // 31分钟是一个时间节点，因为31会进到40，40加20就会进入下一时段，所以只有当为当前时间点且在31分钟及以后时，该整点，不记在时间列表内，并不去获取分钟
      if (i === h && m < 31) {                    // 当为当前时间，且分钟在31以内时，将当前时针加入列表，并获取当前时间31分钟以后的整十时刻
        const curM = (Math.ceil(m / 10) * 10) + 20
        hours.push({ h: i, mins: getMins(curM) })
      }
      if (i === h && m >= 31) {                   // 如果是当前时间点且在31分钟及以后时，该整点，不记在时间列表内，且下一个整点的分钟，从该时间点+20-60，再取十整数得到
        newM = (Math.ceil(m / 10) * 10) - 40
      }
      if (i === h + 1) {                          // 当不是当前时间时，将时针加入列表，并获取00分钟以后的整十时刻
        hours.push({ h: i, mins: getMins(newM) })
      }
      if (i > h + 1) {                            // 当不是当前时间时，将时针加入列表，并获取00分钟以后的整十时刻
        hours.push({ h: i, mins: getMins('00') })
      }
    }
    return hours
  }

  // 不是今天
  const hours = [[]]
  for (let i = 0; i < 24; i++) {
    hours.push({ h: i, mins: getMins('00') })
  }
  return hours
}

// getCurrentHour ： 获取当前时间，并格式化成 hh:mm的形式
const getCurrentHour = () => {
  // 格式化日期
  const d = new Date()
  const hour = moment('HH:mm')(d)
  return getHours(hour, true)
}

// getDays：用于组装今天，明天，后天的时间节点
const getDays = () => {
  // 定义联动第一级需要使用的数据
  const date1 = moment('YYYY-MM-DD')(new Date())
  const date2 = moment('YYYY-MM-DD')(new Date((new Date()).getTime() + (1000 * 60 * 60 * 24)))
  const date3 = moment('YYYY-MM-DD')(new Date((new Date()).getTime() + (1000 * 60 * 60 * 24 * 2)))
  const date4 = moment('YYYY-MM-DD')(new Date((new Date()).getTime() + (1000 * 60 * 60 * 24 * 3)))
  const datas = [[]]
  datas.push({ d: '今天', dValue: date1, hours: getCurrentHour() })
  datas.push({ d: '明天', dValue: date2, hours: getHours('00:00') })
  datas.push({ d: '后天', dValue: date3, hours: getHours('00:00') })
  const channel = location.pathname.split('/')[2]
  // 如果是神州的，出发时间需要加上第四天的数据
  if (channel === 'shenzhou') datas.push({ d: week()(moment('day')(date4)), dValue: date4, hours: getHours('00:00') })
  return datas
}

const mapStateToProps = ({ product }) => {
  // 获取是否是一口价
  const isSinglePrice = getStore('isSinglePrice', 'session')
  // 获取channel
  const channel = getStore('channel', 'session')
  // isStartTimes2表示当前是否是神州接机且有航班号的情况，如果是，则改变isStartTimes2, defaultCurrentDate, datePickerExtra,
  const { isStartTimes2 } = product
  // 获取时间三级联动数据源
  const timeDatas = getDays()
  let startTimes = timeDatas.reduce((preValue1, { d, dValue, hours }) => {
    preValue1.push({
      label:    d,
      value:    dValue,
      children: hours.reduce((preValue2, { h, mins }) => {
        if (mins) {
          const mLabel = h === '现在' ? h : `${ h } 点`
          preValue2.push({
            label:    mLabel,
            value:    h,
            children: mins.map(item => ({
              label: `${ item } 分`,
              value: item,
            })),
          })
          return preValue2
        }
        return false
      }),
    })
    return preValue1
  })
  if (isStartTimes2) {
    const times = ['10', '20', '30', '40', '50', '60', '70', '80', '90']
    startTimes = [{
      label:    '到达后',
      value:    '到达后',
      children: times.map(item => ({ label: item, value: item, children: [{ label: '分钟', value: '分钟' }] })),
    }]
  }
  // 如果是滴滴，且是一口价，就删掉现在这个时间选项
  if (channel === 'didi' && isSinglePrice) {
    startTimes[0].children = startTimes[0].children.filter(o => o.label !== '现在')
    // 初始时，切换成送机，会直接去请求estimate接口，这时didi一口价不支持立即出发，所以要获取二十分钟后的时间
    const firstReverseTime = `${ startTimes[0].value } ${ startTimes[0].children[0].value }:${ startTimes[0].children[0].children[0].value }`
    setStore('firstReverseTime', firstReverseTime, 'session')
  }
  const startPointObj = getStore('defaultPointObj', 'session')

  return {
    ...product,
    showChannel: false,
    startTimes,
    isStartTimes2,
    isSinglePrice,
    channel,
    startPointObj,
  }
}

// 定义公用方法
// 清空已选择地址等信息
const clearInfo = dispatch => {
  // dispatch({ type: 'SET_START_POINT_OBJ', startPointObj: {} })
  // dispatch({ type: 'SET_START_POINT_STR', startPointStr: '' })
  dispatch({ type: 'SET_END_POINT_OBJ', endPointObj: {} })
  dispatch({ type: 'SET_END_POINT_STR', endPointStr: '' })
  dispatch({ type: 'SET_CURRENT_DATE', currentDate: '' })         // 避免接机时选中的是延误多少分钟，然后切换到非接机时也是延误多少分钟的现象
  // dispatch({ type: 'SET_CURRENT_PASSENGER', currentPassenger: '换乘车人' })
  dispatch({ type: 'SET_NEARBY_CAR', currentCarInfo: '' })
  dispatch({ type: 'SET_ESTIMATA', estimate: '' })
  dispatch({ type: 'SET_CURRENT_FLIGHT_NO', flightNo: '', flightDate: [''], defaultCurrentDate: ['今天', '现在'] })
  dispatch({ type: 'SET_IS_START_TIMES_2', isStartTimes2: false })
}


// 获取定位的一套默认配置
const geoLocationInit = () => dispatch => {
  // 开启一个loading
  const handleClose = Loading()
  const myGetLocation = () => getLocation(err => {
    if (err) {
      console.log('定位失败')
      setStore('localCity', '上海', 'session')
      dispatch({ type: 'SET_PRODUCT_SUPPORT_THIS_CITY', getLocationErr: true })
    } else {
      console.log('定位成功')
      // mockdata
      // 设置模拟的用户名，手机号
      // setStore('customerUserId', 'blm_test', 'session')
      // setStore('userPhone', '18255125485', 'session')
      // setStore('flightHistorys', ['MU7877', 'Mu1q3', 'Mu1q2223', 'Mu1q11', 'Mu1q13', 'Mu1q23', 'Mu1q33', 'Mu1q34'])

      // 测试环境模拟数据
      // if (location.orgin.indexOf('test') >= 0) {
      //   setStore('imei', '358565074359520', 'session')
      //   if (location.pathname.indexOf('didi') >= 0) {
      //     // 将默认地址设为北京的         mockdata
      //     setStore('geopoint', { latitude: '39.924455', longitude: '116.403438' }, 'session')
      //     setStore('currentPosition', { streetNumber: '2号-10号楼-403号', street: '正义路', district: '东城区', city: '北京市', province: '北京市' }, 'session')
      //   }
      // }

      // const geopoint = getStore('geopoint', 'session')
      let name = getStore('currentPosition', 'session').city
      name = name.replace('市', '')
      setStore('localCity', name, 'session')

      // 检查当前城市是否在支持的城市列表中，并获取当前城市对应的cityId，并将对象存入本地
      dispatch(getIndexInit(name, getStore('geopoint', 'session')))
      console.log('test', getStore('geopoint', 'session'))
      // 看是否有未支付和行程中的订单
      dispatch(checkOrder())
      // 定位失败的标记设为false
      dispatch({ type: 'SET_PRODUCT_SUPPORT_THIS_CITY', getLocationErr: false })
    }
    handleClose()
  })
  if (getStore('customerUserId', 'session')) {        // 别人订单页面，跳转到取消订单页面，在跳回到首页时，需要执行这一套
    myGetLocation()
  } else {
    login(error => {
      if (error) {
        console.log('login err')
      } else {
        myGetLocation()
      }
    })
  }
}

// 如果默认的startTimes改变，判断是否需要去请求一次getEstimate接口
const handleStartTimesChange = (canPlace, estimatePara, isStartTimes2, useDefaultDate = false) => dispatch => {
  // 该函数在改变产品类型，和输入航班号之后会调用
  // useDefaultDate: 当是通过改变产品类型，触发该函数时，对于选择到达多少分钟以后，使用用默认，通过航班号触发的时候，就使用已有的时间
  if (canPlace) {
    if (isStartTimes2) {
      if (useDefaultDate || !estimatePara.flightDelayTime) {
        estimatePara = merge(estimatePara)({ flightDelayTime: 30, departureTime: [''] })
      }
    } else {
      estimatePara = merge(estimatePara)({ flightDate: [''], flightNo: '', flightDelayTime: '', departureTime: ['今天', '现在'] })
    }
    dispatch(getEstimate(estimatePara))
  }
}

// 起、终点，运力类型，出发时间，航班号 等改变时，都需要重新请求一次预估价格接口
const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleTabClick(channel) {
      const preChannel = getStore('channel', 'session')
      if (preChannel !== channel) {
        setStore('channel', channel, 'session')     // 在order-cancel_action中用到
        const Reg = new RegExp(preChannel, 'g')
        browserHistory.push(location.pathname.replace(Reg, channel))
        const name = getStore('localCity', 'session')
        const geopoint = getStore('geopoint', 'session')
        // 获取首页初始化配置
        dispatch(getIndexInit(name, geopoint))
        clearInfo(dispatch)
      }
    },
    handleReloadCity() {
      dispatch(geoLocationInit())
    },
    handleChangeCity(cityData) {
      const { name } = cityData
      window.AMap.service('AMap.Geocoder', () => {
        const geocoder = new window.AMap.Geocoder({
          radius:     1000,
          extensions: 'all',
        })
        geocoder.getLocation(name, (status, res) => {
          if (status === 'complete') {
            const { location } = res.geocodes[0]
            const geopoint = { latitude: location.lat, longitude: location.lng }
            setStore('geopoint', geopoint, 'session')
            // 根据城市名和经纬度，获取首页的默认配置
            dispatch(getIndexInit(name, geopoint))
            dispatch({ type: 'SET_PRODUCT_SUPPORT_THIS_CITY', getLocationErr: false })
          } else {
            console.log('城市名转化经纬度失败')
          }
        })
      })
    },
    handleChangeProduct(currentProduct, canPlace, props) {
      const preCurrentProduct = getStore('currentProduct', 'session')
      if (preCurrentProduct.code !== currentProduct.code) {
        dispatch({ type: 'SET_ESTIMATA', estimate: '' })
        setStore('currentProduct', currentProduct, 'session')
        dispatch({ type: 'SET_CURRENT_PRODUCT', currentProduct })
        // 改变时间格式, 当productType为7且有航班号时
        const productType = currentProduct.code
        if (productType === 7 && props.flightNo7) {
          dispatch({ type: 'SET_IS_START_TIMES_2', isStartTimes2: true })
          dispatch({ type: 'SET_CURRENT_FLIGHT_NO', defaultCurrentDate: ['到达后', '30', '分钟'] })
        } else {
          dispatch({ type: 'SET_IS_START_TIMES_2', isStartTimes2: false })
          dispatch({ type: 'SET_CURRENT_FLIGHT_NO', defaultCurrentDate: ['今天', '现在'] })
        }

        // 如果当前是接机模式，且没有当前productType的起点信息，就执行一次setStartPoint的命令，point和cityData用startPoint里面的
        if ((productType === 'jieji' || productType === 7) && !props[`startPointObj${ productType }`]) {
          const startPointObj = getStore('defaultPointObj', 'session')
          const { latitude, longitude, id, name, title, detail } = startPointObj
          dispatch(setStartPoint({ latitude, longitude }, productType, { id, name, title, detail }))
        }

        // 如果当前是送机模式，且没有当前productType的终点信息，就执行一次setEndPoint命令，point和cityData用startPoint里面的
        if ((productType === 'songji' || productType === 8) && !props[`endPointObj${ productType }`]) {
          const startPointObj = getStore('defaultPointObj', 'session')
          const { id, name, title, detail } = startPointObj
          dispatch(setStartPointInAirport('end', productType, { id, name, title, detail }))
        }

        // 如果当前起终点信息完善，那么肯定请求过estimate接口，把上一次的拿过来用一下，重新请求一次, 这里不能用endPointObj来判断，因为默认的是给了endPointObj
        if (props[`startPointStr${ productType }`] && props[`endPointStr${ productType }`]) {
          if (props[`estimatePara${ productType }`].rideType) {
            dispatch(getEstimate(props[`estimatePara${ productType }`]))
          } else {
            dispatch(getNearbyCar(props[`estimatePara${ productType }`]))
          }
        }
      }
    },
    handleChangeCar(currentCarInfo, canPlace, estimatePara) {
      const { productType } = estimatePara
      dispatch({ type: 'SET_CURRENT_CAR_INFO', [`currentCarInfo${ productType }`]: currentCarInfo })
      // 如果可以提交订单，就重新计算一下预估价
      estimatePara = merge(estimatePara)({ rideType: currentCarInfo.rideType })
      if (canPlace) dispatch(getEstimate(estimatePara))
    },
    handleChangePassenger(currentPassenger, productType) {
      const userPhone = getStore('userPhone', 'session')
      if (userPhone === currentPassenger) currentPassenger = '换乘车人'
      dispatch({ type: 'SET_CURRENT_PASSENGER', [`currentPassenger${ productType }`]: currentPassenger })
    },
    handleChangeDate(currentDate, canPlace, estimatePara, isStartTimes2) {
      if (currentDate.length === 2) currentDate = ['2017-07-11', '现在']
      dispatch({ type: 'SET_CURRENT_DATE', [`currentDate${ estimatePara.productType }`]: currentDate })

      // 如果可以提交订单，就重新计算一下预估价
      if (canPlace) {
        if (isStartTimes2) {
          const flightDelayTime = Number(currentDate[1])
          const departureTime = ''
          estimatePara = merge(estimatePara)({ flightDelayTime, departureTime })
        } else {
          const departureTime = currentDate.length === 2 ? ['2017-07-11', '现在'] : `${ currentDate[0] } ${ currentDate[1] }:${ currentDate[2] }`
          estimatePara = merge(estimatePara)({ departureTime })
        }
        dispatch(getEstimate(estimatePara))
      }
    },
    handleChangeStartPointObj(res, canPlace, estimatePara, currentProduct) {
      const defaultCity = getStore(`startPointObj${ currentProduct.code }`, 'session') ? getStore(`startPointObj${ currentProduct.code }`, 'session').name : getStore('defaultPointObj', 'session').name
      const { address, city = defaultCity, code = '', terminalCode = '' } = res
      const title = res.name
      const point = res.location
      const startPointObj = { latitude: point.lat, longitude: point.lng, title, detail: address, name: city.replace('市', ''), code, terminalCode }
      setStore(`startPointObj${ currentProduct.code }`, startPointObj, 'session')
      dispatch({ type: 'SET_START_POINT_OBJ', [`startPointObj${ currentProduct.code }`]: startPointObj })
      dispatch({ type: 'SET_START_POINT_STR', [`startPointStr${ currentProduct.code }`]: title })

      // 如果可以提交订单，就重新计算一下预估价
      estimatePara = merge(estimatePara)({ startLatitude: point.lat, startLongitude: point.lng, startAddress: title })
      if (code) estimatePara.airCode = code
      if (canPlace) dispatch(getNearbyCar(estimatePara))
    },
    handleChangeEndPointObj(res, canPlace, estimatePara, currentProduct) {
      // 地址搜索浦东新区时，返回对象没有city，这时使用上一次的city或是默认的city
      const defaultCity = getStore(`endPointObj${ currentProduct.code }`, 'session') ? getStore(`endPointObj${ currentProduct.code }`, 'session').name : getStore('defaultPointObj', 'session').name
      const { address, city = defaultCity, code = '', terminalCode = '' } = res
      const title = res.name
      const point = res.location
      const endPointObj = { latitude: point.lat, longitude: point.lng, title, detail: address, name: city.replace('市', ''), code, terminalCode }
      setStore(`endPointObj${ currentProduct.code }`, endPointObj, 'session')
      dispatch({ type: 'SET_END_POINT_OBJ', [`endPointObj${ currentProduct.code }`]: endPointObj })
      dispatch({ type: 'SET_END_POINT_STR', [`endPointStr${ currentProduct.code }`]: title })
      estimatePara = merge(estimatePara)({ endLatitude: point.lat, endLongitude: point.lng, endAddress: title })
      if (code) estimatePara.airCode = code
      if (canPlace) dispatch(getNearbyCar(estimatePara))
    },
    handleChangeUnpay(orderId) {
      browserHistory.push(`/yongche/order/${ orderId }`)
    },
    handleToStroke() {
      const channel = location.pathname.split('/')[2]
      browserHistory.push(`/yongche/${ channel }/stroke`)
    },
    handleToinvoiceInfo() {
      Toast.info('暂未开通发票功能', 2)
      // browserHistory.push('/yongche/invoice')
    },
    handleCreateOrder(orderPara, isSinglePrice, discount) {
      const { contactPhone } = orderPara
      if (contactPhone !== '' && !/^(13[0-9]|15[012356789]|18[0-9]|14[57]|17[678])[0-9]{8}$/.test(contactPhone)) {
        Toast.info('乘车人号码不正确', 1)
      } else {
        if (isSinglePrice && discount) {
          dispatch({ type: 'SET_PAY_FOOTER_VISIBLE', payFooterShow: true })
          return
        }
        dispatch(createOrder(orderPara))
      }
    },
    handelRulesClick() {
      Mask.closeAll()
      browserHistory.push('/yongche/rules')
    },
    handleSingleBackPromotion(data) {
      dispatch({ type: 'SET_PROMOTION_DATA', promotionData: data })
    },
    handleSeletedFlightNo(flightNo, flightDate, canPlace, estimatePara, currentProduct) {           // 只有两个接机才会触发该函数
      const productType = currentProduct.code
      let defaultCurrentDate = ['今天', '现在']
      let isStartTimes2 = false
      if (productType === 7 && flightNo) {
        defaultCurrentDate = ['到达后', '30', '分钟']
        isStartTimes2 = true
      }
      dispatch({ type: 'SET_CURRENT_DATE', [`currentDate${ estimatePara.productType }`]: '' })
      dispatch({ type: 'SET_CURRENT_FLIGHT_NO', [`flightNo${ productType }`]: flightNo, [`flightDate${ productType }`]: flightDate, defaultCurrentDate })
      dispatch({ type: 'SET_IS_START_TIMES_2', isStartTimes2 })
      estimatePara = merge(estimatePara)({ flightNo, flightDate })
      if (productType === 7) {
        dispatch(handleStartTimesChange(canPlace, estimatePara, isStartTimes2))
      } else if (canPlace) {
        dispatch(getEstimate(estimatePara))
      }
    },
    handleChangeFlightNoError() {
      dispatch({ type: 'SET_FLIGHTNO_ERROR_INFO', flightNoError: false, flightNoErrorMessage: '' })
    },
    handleClearFlightNo(e, estimatePara, canPlace, productType) {
      e.stopPropagation()
      const defaultCurrentDate = ['今天', '现在']
      dispatch({ type: 'SET_CURRENT_DATE', [`currentDate${ estimatePara.productType }`]: '' })
      dispatch({ type: 'SET_CURRENT_FLIGHT_NO', [`flightNo${ productType }`]: '', [`flightDate${ productType }`]: [''], defaultCurrentDate })
      dispatch({ type: 'SET_IS_START_TIMES_2', isStartTimes2: false })
      delete estimatePara.flightNo
      delete estimatePara.flightDate
      dispatch(handleStartTimesChange(canPlace, estimatePara, false))
    },
    handleCloseCallback() {
      dispatch({ type: 'SET_PAY_FOOTER_VISIBLE', payFooterShow: false })
    },
    handleToPlane(productType) {
      browserHistory.push(`/yongche/shenzhou/${ productType }`)
    },
    handlePickerClick(pickerVisible) {
      dispatch({ type: 'SET_PICKER_VISIBLE', pickerVisible })
    },
  }
}


const mapFunToComponent  = dispatch => ({
  componentWillMount() {
    const channel = location.pathname.split('/')[2]
    // 设置默认channel
    setStore('channel', channel, 'session')
    // 定位初始化
    dispatch(geoLocationInit())
    // 是否是一口价
    const { OTO_SAAS = {} } = window
    const { customer = {} } = OTO_SAAS
    const { isSinglePrice = false } = customer
    setStore('isSinglePrice', isSinglePrice, 'session')
    // 将专车设为默认弹出优惠框的模式
    window.OTO_SAAS.customer.showActivePopup = true

    // 删除取消原因页面返回的标记
    removeStore('cancelReasonReturn', 'session')

    // setStore('isSinglePrice', true, 'session')
  },
})


export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(Plane)
)
         
 
 
 
 yongche/containers/product.js 
 
/*
  页面编写注意事项：
  1， 先存经纬度对象，在存地址，因为每一次dispatch都会刷新一次组件，在component中，是先判断地址，如果地址存在，直接用经纬度，所以为了避免报错，要先存经纬度

  2,  页面起终点保存时，加上productType，这样，当切换product时，就可以直接使用对应保存的起终点对象，不会出现变量使用混乱的情况
  起终点对象的保存格式: startPointObj${ productType }
  当前选中的地址对象的保存格式：start_selectedCity${ productType }

  接口中用到经纬度的；
    1，获取附近产品类型
    2，预估价
    3，下单
*/

import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { wrap, Loading, Mask }    from '@boluome/oto_saas_web_app_component'
import { getStore, setStore, removeStore, moment, week } from '@boluome/common-lib'
import { Toast } from 'antd-mobile'
import { merge } from 'ramda'
import { getLocationGaode, login } from 'business'

import Product from '../components/product'
import { getIndexInit, getEstimate, getNearbyCar, checkOrder, createOrder, setStartPoint, setStartPointInAirport } from '../actions/product'

// const day = ['今天', '明天', '后天']
// getMins用户获取传入分钟 - 50之间所有的10的倍数的分钟数
const getMins = m => {
  const mins = []
  m = Math.ceil(m / 10)
  for (let i = m; i < 6; i++) {
    let mItem = i * 10
    if (i === 0) mItem = '00'
    mins.push(mItem)
  }
  return mins
}
// getHours用户获取传入时间 - 23之间所有的小时
const getHours = (hour, isToday = false) => {
  const h = parseFloat(hour.split(':')[0])
  const m = parseFloat(hour.split(':')[1])

  // 是今天
  // 如果是今天，要区分出现在，和第一个时间的节点，是在20之前，还是之后，分别对应两种方式。
  if (isToday) {
    const hours = [[], { h: '现在', mins: [] }]
    let newM = '00'
    for (let i = h; i < 24; i++) {                // 31分钟是一个时间节点，因为31会进到40，40加20就会进入下一时段，所以只有当为当前时间点且在31分钟及以后时，该整点，不记在时间列表内，并不去获取分钟
      if (i === h && m < 31) {                    // 当为当前时间，且分钟在31以内时，将当前时针加入列表，并获取当前时间31分钟以后的整十时刻
        const curM = (Math.ceil(m / 10) * 10) + 20
        hours.push({ h: i, mins: getMins(curM) })
      }
      if (i === h && m >= 31) {                   // 如果是当前时间点且在31分钟及以后时，该整点，不记在时间列表内，且下一个整点的分钟，从该时间点+20-60，再取十整数得到
        newM = (Math.ceil(m / 10) * 10) - 40
      }
      if (i === h + 1) {                          // 当不是当前时间时，将时针加入列表，并获取00分钟以后的整十时刻
        hours.push({ h: i, mins: getMins(newM) })
      }
      if (i > h + 1) {                            // 当不是当前时间时，将时针加入列表，并获取00分钟以后的整十时刻
        hours.push({ h: i, mins: getMins('00') })
      }
    }
    return hours
  }

  // 不是今天
  const hours = [[]]
  for (let i = 0; i < 24; i++) {
    hours.push({ h: i, mins: getMins('00') })
  }
  return hours
}

// getCurrentHour ： 获取当前时间，并格式化成 hh:mm的形式
const getCurrentHour = () => {
  // 格式化日期
  const d = new Date()
  const hour = moment('HH:mm')(d)
  return getHours(hour, true)
}

// getDays：用于组装今天，明天，后天的时间节点
const getDays = () => {
  // 定义联动第一级需要使用的数据
  const date1 = moment('YYYY-MM-DD')(new Date())
  const date2 = moment('YYYY-MM-DD')(new Date((new Date()).getTime() + (1000 * 60 * 60 * 24)))
  const date3 = moment('YYYY-MM-DD')(new Date((new Date()).getTime() + (1000 * 60 * 60 * 24 * 2)))
  const date4 = moment('YYYY-MM-DD')(new Date((new Date()).getTime() + (1000 * 60 * 60 * 24 * 3)))
  const datas = [[]]
  datas.push({ d: '今天', dValue: date1, hours: getCurrentHour() })
  datas.push({ d: '明天', dValue: date2, hours: getHours('00:00') })
  datas.push({ d: '后天', dValue: date3, hours: getHours('00:00') })
  const channel = location.pathname.split('/')[2]
  // 如果是神州的，出发时间需要加上第四天的数据
  if (channel === 'shenzhou') datas.push({ d: week()(moment('day')(date4)), dValue: date4, hours: getHours('00:00') })
  return datas
}

const mapStateToProps = ({ product }) => {
  // 获取是否是一口价
  const isSinglePrice = getStore('isSinglePrice', 'session')
  // 获取channel
  const channel = getStore('channel', 'session')
  // isStartTimes2表示当前是否是神州接机且有航班号的情况，如果是，则改变isStartTimes2, defaultCurrentDate, datePickerExtra,
  const { isStartTimes2 } = product
  // 获取时间三级联动数据源
  const timeDatas = getDays()
  let startTimes = timeDatas.reduce((preValue1, { d, dValue, hours }) => {
    preValue1.push({
      label:    d,
      value:    dValue,
      children: hours.reduce((preValue2, { h, mins }) => {
        if (mins) {
          const mLabel = h === '现在' ? h : `${ h } 点`
          preValue2.push({
            label:    mLabel,
            value:    h,
            children: mins.map(item => ({
              label: `${ item } 分`,
              value: item,
            })),
          })
          return preValue2
        }
        return false
      }),
    })
    return preValue1
  })
  if (isStartTimes2) {
    const times = ['10', '20', '30', '40', '50', '60', '70', '80', '90']
    startTimes = [{
      label:    '到达后',
      value:    '到达后',
      children: times.map(item => ({ label: item, value: item, children: [{ label: '分钟', value: '分钟' }] })),
    }]
  }
  // 如果是滴滴，且是一口价，就删掉现在这个时间选项
  if (channel === 'didi' && isSinglePrice) {
    startTimes[0].children = startTimes[0].children.filter(o => o.label !== '现在')
    // 初始时，切换成送机，会直接去请求estimate接口，这时didi一口价不支持立即出发，所以要获取二十分钟后的时间
    const firstReverseTime = `${ startTimes[0].value } ${ startTimes[0].children[0].value }:${ startTimes[0].children[0].children[0].value }`
    setStore('firstReverseTime', firstReverseTime, 'session')
  }
  const startPointObj = getStore('defaultPointObj', 'session')
  return {
    ...product,
    showChannel: false,
    startTimes,
    isStartTimes2,
    isSinglePrice,
    channel,
    startPointObj,
  }
}

// 定义公用方法
// 清空已选择地址等信息
const clearInfo = dispatch => {
  // dispatch({ type: 'SET_START_POINT_OBJ', startPointObj: {} })
  // dispatch({ type: 'SET_START_POINT_STR', startPointStr: '' })
  dispatch({ type: 'SET_END_POINT_OBJ', endPointObj: {} })
  dispatch({ type: 'SET_END_POINT_STR', endPointStr: '' })
  dispatch({ type: 'SET_CURRENT_DATE', currentDate: '' })         // 避免接机时选中的是延误多少分钟，然后切换到非接机时也是延误多少分钟的现象
  // dispatch({ type: 'SET_CURRENT_PASSENGER', currentPassenger: '换乘车人' })
  dispatch({ type: 'SET_NEARBY_CAR', currentCarInfo: '' })
  dispatch({ type: 'SET_ESTIMATA', estimate: '' })
  dispatch({ type: 'SET_CURRENT_FLIGHT_NO', flightNo: '', flightDate: [''], defaultCurrentDate: ['今天', '现在'] })
  dispatch({ type: 'SET_IS_START_TIMES_2', isStartTimes2: false })
}


// 获取定位的一套默认配置
const geoLocationInit = () => dispatch => {
  // 开启一个loading
  const handleClose = Loading()
  const myGetLocation = () => getLocationGaode(err => {
    if (err) {
      console.log('定位失败')
      setStore('localCity', '上海', 'session')
      dispatch({ type: 'SET_PRODUCT_SUPPORT_THIS_CITY', getLocationErr: true })
    } else {
      console.log('定位成功')
      // mockdata
      // 设置模拟的用户名，手机号
      // setStore('customerUserId', 'blm_test', 'session')
      // setStore('userPhone', '18255125485', 'session')
      // setStore('flightHistorys', ['MU7877', 'Mu1q3', 'Mu1q2223', 'Mu1q11', 'Mu1q13', 'Mu1q23', 'Mu1q33', 'Mu1q34'])

      // 测试环境模拟数据
      // if (location.orgin.indexOf('test') >= 0) {
      //   setStore('imei', '358565074359520', 'session')
      //   if (location.pathname.indexOf('didi') >= 0) {
      //     // 将默认地址设为北京的         mockdata
      //     setStore('geopoint', { latitude: '39.924455', longitude: '116.403438' }, 'session')
      //     setStore('currentPosition', { streetNumber: '2号-10号楼-403号', street: '正义路', district: '东城区', city: '北京市', province: '北京市' }, 'session')
      //   }
      // }

      // const geopoint = getStore('geopoint', 'session')
      let name = getStore('currentPosition', 'session').city
      name = name.replace('市', '')
      setStore('localCity', name, 'session')

      // 检查当前城市是否在支持的城市列表中，并获取当前城市对应的cityId，并将对象存入本地
      dispatch(getIndexInit(name, getStore('geopoint', 'session')))
      console.log('test', getStore('geopoint', 'session'))
      // 看是否有未支付和行程中的订单
      dispatch(checkOrder())
      // 定位失败的标记设为false
      dispatch({ type: 'SET_PRODUCT_SUPPORT_THIS_CITY', getLocationErr: false })
    }
    handleClose()
  })
  if (getStore('customerUserId', 'session')) {        // 别人订单页面，跳转到取消订单页面，在跳回到首页时，需要执行这一套
    myGetLocation()
  } else {
    login(error => {
      if (error) {
        console.log('login err')
      } else {
        myGetLocation()
      }
    })
  }
}

// 如果默认的startTimes改变，判断是否需要去请求一次getEstimate接口
const handleStartTimesChange = (canPlace, estimatePara, isStartTimes2, useDefaultDate = false) => dispatch => {
  // 该函数在改变产品类型，和输入航班号之后会调用
  // useDefaultDate: 当是通过改变产品类型，触发该函数时，对于选择到达多少分钟以后，使用用默认，通过航班号触发的时候，就使用已有的时间
  if (canPlace) {
    if (isStartTimes2) {
      if (useDefaultDate || !estimatePara.flightDelayTime) {
        estimatePara = merge(estimatePara)({ flightDelayTime: 30, departureTime: [''] })
      }
    } else {
      estimatePara = merge(estimatePara)({ flightDate: [''], flightNo: '', flightDelayTime: '', departureTime: ['今天', '现在'] })
    }
    dispatch(getEstimate(estimatePara))
  }
}

// 起、终点，运力类型，出发时间，航班号 等改变时，都需要重新请求一次预估价格接口
const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleTabClick(channel) {
      const preChannel = getStore('channel', 'session')
      if (preChannel !== channel) {
        setStore('channel', channel, 'session')     // 在order-cancel_action中用到
        const Reg = new RegExp(preChannel, 'g')
        browserHistory.push(location.pathname.replace(Reg, channel))
        const name = getStore('localCity', 'session')
        const geopoint = getStore('geopoint', 'session')
        // 获取首页初始化配置
        dispatch(getIndexInit(name, geopoint))
        clearInfo(dispatch)
      }
    },
    handleReloadCity() {
      dispatch(geoLocationInit())
    },
    handleChangeCity(cityData) {
      const { name } = cityData
      window.AMap.service('AMap.Geocoder', () => {
        const geocoder = new window.AMap.Geocoder({
          radius:     1000,
          extensions: 'all',
        })
        geocoder.getLocation(name, (status, res) => {
          if (status === 'complete') {
            const { location } = res.geocodes[0]
            const geopoint = { latitude: location.lat, longitude: location.lng }
            setStore('geopoint', geopoint, 'session')
            // 根据城市名和经纬度，获取首页的默认配置
            dispatch(getIndexInit(name, geopoint))
            dispatch({ type: 'SET_PRODUCT_SUPPORT_THIS_CITY', getLocationErr: false })
          } else {
            console.log('城市名转化经纬度失败')
          }
        })
      })
    },
    handleChangeProduct(currentProduct, canPlace, props) {
      const preCurrentProduct = getStore('currentProduct', 'session')
      if (preCurrentProduct.code !== currentProduct.code) {
        dispatch({ type: 'SET_ESTIMATA', estimate: '' })
        setStore('currentProduct', currentProduct, 'session')
        dispatch({ type: 'SET_CURRENT_PRODUCT', currentProduct })
        // 改变时间格式, 当productType为7且有航班号时
        const productType = currentProduct.code
        if (productType === 7 && props.flightNo7) {
          dispatch({ type: 'SET_IS_START_TIMES_2', isStartTimes2: true })
          dispatch({ type: 'SET_CURRENT_FLIGHT_NO', defaultCurrentDate: ['到达后', '30', '分钟'] })
        } else {
          dispatch({ type: 'SET_IS_START_TIMES_2', isStartTimes2: false })
          dispatch({ type: 'SET_CURRENT_FLIGHT_NO', defaultCurrentDate: ['今天', '现在'] })
        }

        // 如果当前是接机模式，且没有当前productType的起点信息，就执行一次setStartPoint的命令，point和cityData用startPoint里面的
        if ((productType === 'jieji' || productType === 7) && !props[`startPointObj${ productType }`]) {
          const startPointObj = getStore('defaultPointObj', 'session')
          const { latitude, longitude, id, name, title, detail } = startPointObj
          dispatch(setStartPoint({ latitude, longitude }, productType, { id, name, title, detail }))
        }

        // 如果当前是送机模式，且没有当前productType的终点信息，就执行一次setEndPoint命令，point和cityData用startPoint里面的
        if ((productType === 'songji' || productType === 8) && !props[`endPointObj${ productType }`]) {
          const startPointObj = getStore('defaultPointObj', 'session')
          const { id, name, title, detail } = startPointObj
          dispatch(setStartPointInAirport('end', productType, { id, name, title, detail }))
        }

        // 如果当前起终点信息完善，那么肯定请求过estimate接口，把上一次的拿过来用一下，重新请求一次, 这里不能用endPointObj来判断，因为默认的是给了endPointObj
        if (props[`startPointStr${ productType }`] && props[`endPointStr${ productType }`]) {
          if (props[`estimatePara${ productType }`].rideType) {
            dispatch(getEstimate(props[`estimatePara${ productType }`]))
          } else {
            dispatch(getNearbyCar(props[`estimatePara${ productType }`]))
          }
        }
      }
    },
    handleChangeCar(currentCarInfo, canPlace, estimatePara) {
      const { productType } = estimatePara
      dispatch({ type: 'SET_CURRENT_CAR_INFO', [`currentCarInfo${ productType }`]: currentCarInfo })
      // 如果可以提交订单，就重新计算一下预估价
      estimatePara = merge(estimatePara)({ rideType: currentCarInfo.rideType })
      if (canPlace) dispatch(getEstimate(estimatePara))
    },
    handleChangePassenger(currentPassenger, productType) {
      const userPhone = getStore('userPhone', 'session')
      if (userPhone === currentPassenger) currentPassenger = '换乘车人'
      dispatch({ type: 'SET_CURRENT_PASSENGER', [`currentPassenger${ productType }`]: currentPassenger })
    },
    handleChangeDate(currentDate, canPlace, estimatePara, isStartTimes2) {
      if (currentDate.length === 2) currentDate = ['2017-07-11', '现在']
      dispatch({ type: 'SET_CURRENT_DATE', [`currentDate${ estimatePara.productType }`]: currentDate })

      // 如果可以提交订单，就重新计算一下预估价
      if (canPlace) {
        if (isStartTimes2) {
          const flightDelayTime = Number(currentDate[1])
          const departureTime = ''
          estimatePara = merge(estimatePara)({ flightDelayTime, departureTime })
        } else {
          const departureTime = currentDate.length === 2 ? ['2017-07-11', '现在'] : `${ currentDate[0] } ${ currentDate[1] }:${ currentDate[2] }`
          estimatePara = merge(estimatePara)({ departureTime })
        }
        dispatch(getEstimate(estimatePara))
      }
    },
    handleChangeStartPointObj(res, canPlace, estimatePara, currentProduct) {
      const defaultCity = getStore(`startPointObj${ currentProduct.code }`, 'session') ? getStore(`startPointObj${ currentProduct.code }`, 'session').name : getStore('defaultPointObj', 'session').name
      const { address, city = defaultCity, code = '', terminalCode = '' } = res
      const title = res.name
      const point = res.location
      const startPointObj = { latitude: point.lat, longitude: point.lng, title, detail: address, name: city.replace('市', ''), code, terminalCode }
      setStore(`startPointObj${ currentProduct.code }`, startPointObj, 'session')
      dispatch({ type: 'SET_START_POINT_OBJ', [`startPointObj${ currentProduct.code }`]: startPointObj })
      dispatch({ type: 'SET_START_POINT_STR', [`startPointStr${ currentProduct.code }`]: title })

      // 如果可以提交订单，就重新计算一下预估价
      estimatePara = merge(estimatePara)({ startLatitude: point.lat, startLongitude: point.lng, startAddress: title })
      if (code) estimatePara.airCode = code
      if (canPlace) dispatch(getNearbyCar(estimatePara))
    },
    handleChangeEndPointObj(res, canPlace, estimatePara, currentProduct) {
      // 地址搜索浦东新区时，返回对象没有city，这时使用上一次的city或是默认的city
      const defaultCity = getStore(`endPointObj${ currentProduct.code }`, 'session') ? getStore(`endPointObj${ currentProduct.code }`, 'session').name : getStore('defaultPointObj', 'session').name
      const { address, city = defaultCity, code = '', terminalCode = '' } = res
      const title = res.name
      const point = res.location
      const endPointObj = { latitude: point.lat, longitude: point.lng, title, detail: address, name: city.replace('市', ''), code, terminalCode }
      setStore(`endPointObj${ currentProduct.code }`, endPointObj, 'session')
      dispatch({ type: 'SET_END_POINT_OBJ', [`endPointObj${ currentProduct.code }`]: endPointObj })
      dispatch({ type: 'SET_END_POINT_STR', [`endPointStr${ currentProduct.code }`]: title })
      estimatePara = merge(estimatePara)({ endLatitude: point.lat, endLongitude: point.lng, endAddress: title })
      if (code) estimatePara.airCode = code
      if (canPlace) dispatch(getNearbyCar(estimatePara))
    },
    handleChangeUnpay(orderId) {
      browserHistory.push(`/yongche/order/${ orderId }`)
    },
    handleToStroke() {
      const channel = location.pathname.split('/')[2]
      browserHistory.push(`/yongche/${ channel }/stroke`)
    },
    handleToinvoiceInfo() {
      Toast.info('暂未开通发票功能', 2)
      // browserHistory.push('/yongche/invoice')
    },
    handleCreateOrder(orderPara, isSinglePrice, discount) {
      const { contactPhone } = orderPara
      if (contactPhone !== '' && !/^(13[0-9]|15[012356789]|18[0-9]|14[57]|17[678])[0-9]{8}$/.test(contactPhone)) {
        Toast.info('乘车人号码不正确', 1)
      } else {
        if (isSinglePrice && discount) {
          dispatch({ type: 'SET_PAY_FOOTER_VISIBLE', payFooterShow: true })
          return
        }
        dispatch(createOrder(orderPara))
      }
    },
    handelRulesClick() {
      Mask.closeAll()
      browserHistory.push('/yongche/rules')
    },
    handleSingleBackPromotion(data) {
      dispatch({ type: 'SET_PROMOTION_DATA', promotionData: data })
    },
    handleSeletedFlightNo(flightNo, flightDate, canPlace, estimatePara, currentProduct) {           // 只有两个接机才会触发该函数
      const productType = currentProduct.code
      let defaultCurrentDate = ['今天', '现在']
      let isStartTimes2 = false
      if (productType === 7 && flightNo) {
        defaultCurrentDate = ['到达后', '30', '分钟']
        isStartTimes2 = true
      }
      dispatch({ type: 'SET_CURRENT_DATE', [`currentDate${ estimatePara.productType }`]: '' })
      dispatch({ type: 'SET_CURRENT_FLIGHT_NO', [`flightNo${ productType }`]: flightNo, [`flightDate${ productType }`]: flightDate, defaultCurrentDate })
      dispatch({ type: 'SET_IS_START_TIMES_2', isStartTimes2 })
      estimatePara = merge(estimatePara)({ flightNo, flightDate })
      if (productType === 7) {
        dispatch(handleStartTimesChange(canPlace, estimatePara, isStartTimes2))
      } else if (canPlace) {
        dispatch(getEstimate(estimatePara))
      }
    },
    handleChangeFlightNoError() {
      dispatch({ type: 'SET_FLIGHTNO_ERROR_INFO', flightNoError: false, flightNoErrorMessage: '' })
    },
    handleClearFlightNo(e, estimatePara, canPlace, productType) {
      e.stopPropagation()
      const defaultCurrentDate = ['今天', '现在']
      dispatch({ type: 'SET_CURRENT_DATE', [`currentDate${ estimatePara.productType }`]: '' })
      dispatch({ type: 'SET_CURRENT_FLIGHT_NO', [`flightNo${ productType }`]: '', [`flightDate${ productType }`]: [''], defaultCurrentDate })
      dispatch({ type: 'SET_IS_START_TIMES_2', isStartTimes2: false })
      delete estimatePara.flightNo
      delete estimatePara.flightDate
      dispatch(handleStartTimesChange(canPlace, estimatePara, false))
    },
    handleCloseCallback() {
      dispatch({ type: 'SET_PAY_FOOTER_VISIBLE', payFooterShow: false })
    },
    handleToPlane(productType) {
      setStore('currentProduct', { code: productType }, 'session')
      browserHistory.push(`/yongche/shenzhou/${ productType }`)
    },
    handlePickerClick(pickerVisible) {
      dispatch({ type: 'SET_PICKER_VISIBLE', pickerVisible })
    },
  }
}


const mapFunToComponent  = dispatch => ({
  componentWillMount() {
    const channel = location.pathname.split('/')[2]
    // 设置默认channel
    setStore('channel', channel, 'session')
    // 定位初始化
    dispatch(geoLocationInit())
    // 是否是一口价
    const { OTO_SAAS = {} } = window
    const { customer = {} } = OTO_SAAS
    const { isSinglePrice = false } = customer
    setStore('isSinglePrice', isSinglePrice, 'session')
    // 将专车设为默认弹出优惠框的模式
    window.OTO_SAAS.customer.showActivePopup = true

    // 删除取消原因页面返回的标记
    removeStore('cancelReasonReturn', 'session')

    // mock
    // setStore('isSinglePrice', false, 'session')
  },
})


export default
connect(mapStateToProps, mapDispatchToProps)(
  wrap(mapFunToComponent)(Product)
)
         
 
 
 
 yongche/containers/stroke.js 
 
import { connect } from 'react-redux'
import { wrap } from '@boluome/oto_saas_web_app_component'
import { getStore } from '@boluome/common-lib'
import { browserHistory } from 'react-router'

import Stroke from '../components/stroke'
import { getOrderList } from '../actions/stroke'

const mapStateToProps = ({ stroke }) => {
  const channel = getStore('channel', 'session')
  return {
    ...stroke,
    channel,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleOrderClick(id) {
      browserHistory.push(`/yongche/order/${ id }?flag=1`)
    },
  }
}

const mapFunToComponent = dispatch => {
  return {
    componentWillMount() {
      dispatch(getOrderList())
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(wrap(mapFunToComponent)(Stroke))
         
 
 
 
 yongche/index.js 
 
import React        from 'react'
import { createStore, applyMiddleware } from 'redux'
import { render }   from 'react-dom'
import { Provider } from 'react-redux'
import thunk        from 'redux-thunk'
import reducers     from './reducers'
import Routes       from './routes'

// 定义根组件
const Root  = () => (
  <Provider store={ createStore(reducers, applyMiddleware(thunk)) }>
    <Routes />
  </Provider>
)
render(<Root />, document.querySelector('#root'))
         
 
 
 
 yongche/reducers/channel.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {
  currentPassenger: '换乘车人',
}

const channel = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_CURRENT_CITY':
    case 'SET_PRODUCT_SUPPORT_THIS_CITY':
      return mergeState(state, action)
    default: return state
  }
}

export default channel
         
 
 
 
 yongche/reducers/index.js 
 
import { combineReducers } from 'redux'
// 引入reducers
import channel  from './channel'
import product  from './product'
import invoiceInfo  from './invoice-info'
import orderId  from './orderId'
import cancelReason  from './order-cancel'
import stroke  from './stroke'
// 组合reducers
export default combineReducers({
  channel,
  product,
  invoiceInfo,
  orderId,
  cancelReason,
  stroke,
})
         
 
 
 
 yongche/reducers/invoice-info.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const invoiceInfo = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_invoiceInfo_SELECTE':
    case 'SET_invoiceInfo_ALL_SELECTE':
      return mergeState(state, action)
    default:
      return state
  }
}

export default invoiceInfo
         
 
 
 
 yongche/reducers/order-cancel.js 
 
import { mergeState } from '@boluome/common-lib'

const cancelReason = (state = {}, action) => {
  switch (action.type) {
    case 'SET_CURRENT_CANCEL_REASON':
      return mergeState(state, action)
    default:
      return state
  }
}

export default cancelReason
         
 
 
 
 yongche/reducers/orderId.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {}

const orderId = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_RECALL_VESIBLE':
    case 'SET_CURRENT_STATUS':
    case 'SET_NO_DRIVER_RESPONSE':
    case 'UPDATE_CURRENT_STATUS':
    case 'SET_CURRENT_FLAG':
      return mergeState(state, action)
    default:
      return state
  }
}

export default orderId
         
 
 
 
 yongche/reducers/product.js 
 
import { mergeState } from '@boluome/common-lib'

// const date = moment('YYYY-MM-DD HH:mm')(new Date())
const initialState = {
  hasUnpay:           false,
  currentDate:        '',
  flightNo:           '',
  flightDate:         [''],
  defaultCurrentDate: ['今天', '现在'],
  // currentDate: [date.split(' ')[0], date.split(' ')[1].split(':')[0], date.split(' ')[1].split(':')[1]],
}

const product = (state = initialState, action) => {
  switch (action.type) {
    case 'SET_CURRENT_CITY':
    case 'SET_PRODUCT_SUPPORT_THIS_CITY':
    case 'SET_NEARBY_CAR':
    case 'SET_CURRENT_PRODUCT':
    case 'SET_ORDER_STATUE':
    case 'SET_START_POINT_STR':
    case 'SET_START_POINT_OBJ':
    case 'SET_END_POINT_STR':
    case 'SET_END_POINT_OBJ':
    case 'SET_CURRENT_CAR_INFO':
    case 'SET_CURRENT_PASSENGER':
    case 'SET_CURRENT_DATE':
    case 'SET_ESTIMATA':
    case 'SET_SINGLE_PRICE_INDEX_ORDER':
    case 'SET_PROMOTION_DATA':
    case 'SET_SINGLE_PRICE_PAY_VISIABLE':
    case 'SET_CURRENT_FLIGHT_NO':
    case 'SET_IS_START_TIMES_2':
    case 'SET_FLIGHTNO_ERROR_INFO':
    case 'SET_PAY_FOOTER_VISIBLE':
    case 'SET_PICKER_VISIBLE':
      return mergeState(state, action)
    default:
      return state
  }
}

export default product
         
 
 
 
 yongche/reducers/stroke.js 
 
import { mergeState } from '@boluome/common-lib'

const stroke = (state = {}, action) => {
  switch (action.type) {
    case 'GET_ORDER_LIST':
      return mergeState(state, action)
    default:
      return state
  }
}

export default stroke
         
 
 
 
 yongche/routes.js 
 
import React from 'react'
import { Router, Route, browserHistory, IndexRoute } from 'react-router'
// 路由配置
const Routes = () => (
  <Router history={ browserHistory } >
    <Route path='/yongche' component={ require('react-router?name=root!./components/root') } >
      <Route path='invoice' component={ require('react-router?name=invoice!./components/invoice') }>
        <IndexRoute component={ require('react-router?name=invoiceInfo!./containers/invoice-info') } />
        <Route path='history' component={ require('react-router?name=history!./containers/invoice-history') } />
      </Route>
      <Route path='rules' component={ require('react-router?name=priceRules!./components/price-rules') } />
      <Route path='order/:orderId' component={ require('react-router?name=orderId!./components/order') }>
        <IndexRoute component={ require('react-router?name=order!./containers/order-id') } />
        <Route path='cancel' component={ require('react-router?name=cancel!./containers/order-cancel') } />
      </Route>
      <Route path=':channel/stroke' component={ require('react-router?name=stroke!./containers/stroke') } />
      <Route path=':channel' component={ require('react-router?name=channel!./components/channel') }>
        <IndexRoute component={ require('react-router?name=channel!./containers/product') } />
        <Route path=':productType' component={ require('react-router?name=channel!./containers/plane') } />
      </Route>
    </Route>
  </Router>
)
export default Routes
         
 
 
 
 yongche/styles/cancel-info.scss 
 
@import "../../../styles/s_common.scss";

.cancel-info {
  padding: 30px;
  .cancel-info-header {
    background: $bg-ff;
    padding: 0 30px;
    margin-bottom: 50px;
    border-radius: 4px;
    .order-number {
      padding-top: 20px;
      border-bottom: 1px dashed $border-e5;
      overflow: hidden;
      padding-bottom: 20px;
      position: relative;
      .left {
        float: left;
        p {
          &:first-of-type {
            span {
              @include s_fontDemo(28px, 40px, $font-33);
              margin-right: 25px;
            }
          }
          &:last-of-type {
            @include s_fontDemo(24px, 28px, $font-99);
          }
        }
      }
      .right {
        color: $font-f48;
        @include s_middle;
        right: 0;
        &.active {
          color: $theme;
        }
      }
    }
    .cancel-info-bottom {
      margin-bottom: 25px;
      .top {
        // height: 60px;
        border-bottom: 1px dashed $border-e5;
        @include s_fontDemo(24px, 40px, $font-66);
        margin-bottom: 30px;
        padding-top: 20px;
        padding-bottom: 20px;
        overflow: hidden;
        .price {
          float: left;
          font-size: 28px;
          color: $font-33;
          span {
            color: $font-f48;
          }
        }
        .time {
          float: right;
        }
        .discount {
          clear: both;
        }
      }
      .am-icon {
        display: block;
        margin: 0 auto;
        width: 110px;
        height: 110px;
      }
      .order-status {
        text-align: center;
        padding-bottom: 15px;
        @include s_fontDemo(28px, 58px, $font-66);
      }
    }
    .common-item {
      height: 80px;
      border-bottom: 1px dashed $border-e5;
      .am-icon {
        float: left;
        margin-right: 30px;
        margin-top: 25px;
      }
      span {
        @include s_fontDemo(28px, 80px, $font-66);
        &:first-of-type {
          float: left;

        }
        &:last-of-type {
          float: right;
        }
      }
    }
  }
  .cancel-info-footer {
    .footer-item {
      @include s_blockDemo(48%, 80px);
      @include s_fontDemo(38px, 80px, $font-66);
      text-align: center;
      border-radius: 4px;
    }
    .left {
      float: left;
      background: $bg-ff;
    }
    .right {
      float: right;
      background: $theme;
      color: $font-ff;
    }
  }
}
         
 
 
 
 yongche/styles/detail-list.scss 
 
@import "../../../styles/s_common.scss";

.detail-list-item {
  .detail-list-title {
    height: 33px;
    position: relative;
    margin-bottom: 80px;
    p {
      height: 15px;
      @include s_border_b;
    }
    h5 {
      @include s_blockDemo(140px, 33px);
      @include s_fontDemo(32px, 33px, $font-33);
      @include s_allCenter;
      font-weight: normal;
      text-align: center;
    }
  }
  .total-price {
    text-align: center;
    margin-bottom: 40px;
    @include s_fontDemo(32px, 32px, $font-f48);
    position: relative;
    span {
      font-size: 48px;
    }
    .price-rules {
      @include s_middle;
      position: absolute;
      right: 0;
      span {
        float: left;
        @include s_fontDemo(28px, 46px, $theme);
        height: 36px;
        text-align: center;
        margin-right: 5px;
      }
      .am-icon {
        float: left;
      }
    }
  }
  // .car-name {
  //   @include s_fontDemo(32px, 32px, $font-33);
  //   text-align: center;
  // }
  // .price-rules {
  //   @include s_fontDemo(30px, 70px, $font-33);
  //   text-align: center;
  //   margin-bottom: 50px;
  // }
  .detail {
    li {
      margin-bottom: 28px;
      overflow: hidden;
      width: 100%;
      .left {
        float: left;
        text-align: left;
        @include s_fontDemo(24px, 24px, $font-33);
      }
      .right {
        float: right;
        text-align: right;
        @include s_fontDemo(24px, 24px, $font-33);
        &.active {
          color: $font-f48;
        }
      }
    }
  }
}
         
 
 
 
 yongche/styles/estimate-price.scss 
 
@import "../../../styles/s_common.scss";


.estimate-price-component {
  padding: 11% 100px;
  .price-rules {
    overflow: hidden;
    p {
      @include s_center;
      span {
        float: left;
        @include s_fontDemo(28px, 46px, $font-66);
        height: 36px;
        text-align: center;
        margin-right: 5px;
      }
      .am-icon {
        float: left;
      }
    }
  }
  .detail {
    height: 45%;
    border-bottom: 1px solid #8f8f8f;
    margin-bottom: 12%;
  }
  .close-icon {
    display: block;
    margin: 0 auto 14%;
  }
}
         
 
 
 
 yongche/styles/flight.scss 
 
@import "../../../styles/s_common.scss";

.flight {
  height: 100%;
  background: $bg-ff;
  .flight-title {
    @include s_fontDemo(34px, 148px, $font-33);
    text-align: center;
    font-weight: normal;
  }
  .plane-come {
    // .am-list-line {
    //   border-bottom: 1px solid $border-e5;
    // }
    .left {
      @include s_fontDemo(28px, 28px, $font-66);
    }
    input {
      width: 60%;
      color: $font-66;
      font-size: 24px;
    }
  }
  .flight-time {
    p {
      @include s_fontDemo(28px, 28px, $font-66);
      span {
        font-size: 24px;
        color: $theme;
        &.selected {
          color: $font_66;
        }
      }
    }
    .am-list-line {
      @include s_border_b;
    }
  }
  /* 改变antd默认样式*/
  .am-list-body {
    border-top: none;
    padding-right: 30px;
    .am-list-item, .am-list-item .am-list-line {
      min-height: 100px;
      height: 100px;
    }
  }
  .flight-time.am-list-item .am-list-line {
    @include s_border_b;
    box-sizing: border-box;
  }
  .am-whitespace {
    background: $bg-f8;
  }
  .flight-historys {
    padding-left: 30px;
    padding-right: 30px;
    h1 {
      padding-top: 25px;
      @include s_fontDemo(24px, 50px, $font-99);
      font-weight: normal;
      @include s_border_b;
    }
    ul {
      max-height: calc(100% - 660px);
      overflow: auto;
      background: $font-ff;
      li {
        height: 100px;
        @include s_fontDemo(28px, 100px, $font-66);
        @include s_border_b;
      }
    }
    .clear-historys {
      width: 100%;
      height: 100px;
      @include s_fontDemo(28px, 100px, $font-66);
      display: flex;
      justify-content: center;
      align-items: center;
      .am-icon {
        margin-right: 10px;
        margin-top: -8px;
        vertical-align: middle;
      }
    }
  }
  .s-button {
    position: relative;
  }
}
         
 
 
 
 yongche/styles/invoice-info.scss 
 
@import "../../../styles/s_common.scss";

.invoiceInfo {
  .invoiceInfo-header {
    padding: 30px 30px 100px;
    .invoiceInfo-item {
      background: $bg-ff;
      padding-left: 30px;
      padding-right: 30px;
      margin-bottom: 10px;
      .footer {
        height: 65px;
        line-height: 65px;
        font-size:24px;
        color:$font-66;
        text-align: right;
        background: $bg-ff;
        span {
          color: $font-f48;
        }
      }
    }
  }

  .invoiceInfo-footer {
    position: absolute;
    bottom: 0;
    height: 100px;
    width: 100%;
    padding-left: 30px;
    background: $bg-ff;
    border-top: 1px solid $border-e5;
    box-sizing: border-box;
    .am-icon, h1, span, p {
      display: inline-block;
      line-height: 100px;
    }
    .am-icon {
      margin-right: 20px;
      transform: translateY(10px);
    }
    h1 {
      font-size:28px;
      color:$font-33;
      font-weight: normal;
    }
    span {
      font-size:24px;
      color:$font-99;
    }
    p {
      background:$border-eb;
      width:180px;
      font-size:36px;
      color: $font-ff;
      text-align:center;
      float: right;
    }

  }
}
         
 
 
 
 yongche/styles/no-support-city.scss 
 
@import "../../../styles/s_common.scss";

.no-support-city {
  overflow: hidden;
  width: 100%;
  height: 550px;
  @include s_middle;
  img {
    width: 260px;
    display: block;
    margin: 0 auto 30px;
  }
  .text {
    @include s_fontDemo(28px, 36px, $font-66);
    margin-bottom: 75px;
    text-align: center;
  }
  ul {
    overflow: hidden;
    @include s_center;
    li {
      overflow: hidden;
      width: 120px;
      float: left;
      margin-right: 50px;
      &:last-child {
        margin-right: 0;
      }
      h1 {
        @include s_blockDemo(80px, 80px);
        border: 1px solid $theme;
        border-radius: 100%;
        margin: 0 auto 20px;
        position: relative;
        .am-icon {
          @include s_allCenter;
        }
      }
      p {
        @include s_fontDemo(28px, 36px, $font-66);
        text-align: center;
      }
    }
  }
}
         
 
 
 
 yongche/styles/order-cancel.scss 
 
@import "../../../styles/s_common.scss";

.order-cancel {
  padding-top: 40px;
  li {
    border:1px solid $font-99 !important;
    border-radius:6px;
    margin: 0 auto 20px;
    @include s_blockDemo(688px, 88px);
    @include s_fontDemo(28px, 88px, $font-99);
    color: $font-99 !important;
    text-align: center;
    &.active {
      border-color: $theme !important;
      color: $theme !important;
    }
    &:last-child {
      margin-bottom: 50px;
    }
  }
}
         
 
 
 
 yongche/styles/order-id.scss 
 
@import "../../../styles/s_common.scss";

@mixin header{
  width: 710px;
  z-index: 5;
  @include s_center;
  top: 10px;
  background: $bg-ff;
  box-shadow:0 0 10px 0 rgba(0,0,0,0.14);
  border-radius: 6px;
}
@mixin footer {
  @include s_blockDemo(690px, 100px);
  background: $bg-ff;
  // box-shadow: 10px 10px 5px #eee;
  z-index: 19;
  line-height: 100px;
  @include s_center;
  bottom: 23px;
}


.order-id {
  min-height: 100%;
  height: 100%;
  position: relative;
  .header {
    @include header;
    .driver-info {
      height: 160px;
      border-bottom: 1px solid $border-e5;
      position: relative;
      .driver-img, .driver-id, .driver-phone {
        @include s_middle;
      }
      .driver-img {
        left: 31px;
        width:99px;
        height:99px;
        border-radius:100%;
      }
      .driver-id {
        left: 162px;
        .top {
          font-size:30px;
          color: $font-33;
          margin-bottom: 25px;
        }
        .bottom {
          font-size:26px;
          color: $font-99;
          p {
            display: inline-block;
            margin-right: 25px;
          }
          span {
            margin-left: 10px;
            color: $theme;
          }
        }
      }
      .driver-phone {
        right: 30px;
      }
    }
    .driver-tips {
      height: 100px;
      line-height: 100px;
      text-align: center;
      font-size:28px;
      color:$font-33;
      span {
        color: $theme;
      }
    }

    .header-bottom {
      height: 100px;
      line-height: 100px;
      font-size: 28px;
      position: relative;
      .am-icon, .left, .right {
        @include s_middle;
      }
      .am-icon {
        left: 26px;
      }
      .left {
        left: 76px;
        color: $font-33;
      }
      .right {
        right: 30px;
        color: $theme;
      }
    }
  }
  .footer1 {
    @include footer;
    font-size: 36px;
    color: $font-99;
    text-align: center;
    &.recall {
      background: $theme;
      color: $font-ff;
      bottom: 145px;
    }
  }
  .footer3 {
    @include footer;
    font-size: 36px;
    color: $font-66;
    text-align: center;
    span {
      color: $font-f48;
    }
  }

  .my-map {
    height: 100%;
    width: 100%;
    // transform-origin: top left;
    // transform: scale(2);
  }
}

// wait-animation
.wait-animation {
  canvas, .fill-point, h1, .wait-status {
    @include s_allCenter;
  }
  .fill-point {
    border-radius: 100%;
    background: #ffab00;
    animation: mymove 2s linear infinite;
    // animation: mymove 2.235s linear infinite;
  }
  .wait-title {
    @include s_fontDemo(40px, 146px, $font-66);
    width: 100%;
    font-weight: normal;
    text-align: center;
  }
  .wait-name {
    @include s_fontDemo(28px, 40px, $font-66);
    text-align: center;
  }
  .wait-time {
    @include s_fontDemo(70px, 82px, $theme);
    text-align: center;
  }
}

@keyframes mymove {
  from { transform: rotate(0); }
  to { transform: rotate(360deg); }
}


// 改变地图选择地点弹出框的字体大小
.BMap_bubble_title, .BMap_bubble_content, .selInfoWndBtn {
  font-size: 14px !important;
}
         
 
 
 
 yongche/styles/order-item.scss 
 
@import "../../../styles/s_common.scss";

.order-item {
  // background: $bg-ff;
  // padding-left: 30px;
  // padding-right: 30px;
  .order-item-header {
    border-bottom: 1px dashed $border-e5;
    overflow: hidden;
    .order-item-left {
      height: 193px;
      width: 65px;
      line-height: 193px;
      position: relative;
      .am-icon {
        @include s_middle;
      }
    }
    .order-item-right {
      padding-top: 25px;
      margin-left: 10px;
      div {
        height: 28px;
        margin-bottom: 30px;
        font-size:28px;
        color:$font-66;
        .am-icon {
          display: inline-block;
          margin-right: 27px;
          margin-left: -8px;
        }
        p {
          width: 518px;
          text-overflow: ellipsis;
          overflow: hidden;
          white-space: nowrap;
          display: inline-block;
          margin-right: 36px;
          transform: translateY(-11px);
        }
        span {
          display: inline-block;
          width: 89%;
          text-overflow:ellipsis;
          overflow: hidden;
          white-space: nowrap;
        }
      }
      .order-item-middle {
        p {
          background:#4a90e2;
          width:10px;
          height:10px;
          border-radius:100%;
        }
      }
      .order-item-bottom {
        p {
          background:#ff6d7f;
          width:10px;
          height:10px;
          border-radius:100%;
        }
      }
    }
  }
}
         
 
 
 
 yongche/styles/pay-footer.scss 
 
@import "../../../styles/s_common.scss";

@mixin footer {
  @include s_blockDemo(calc(100% - 100px), 100px);
  background: $bg-ff;
  // box-shadow: 10px 10px 5px #eee;
  z-index: 19;
  line-height: 100px;
  @include s_center;
  bottom: 23px;
}

.pay-footer {
  @include footer;
  z-index: 100;
  .pay-footer-left {
    float: left;
    margin-left: 20px;
    font-size: 32px;
    color: $font-66;
    span {
      color: $font-f48;
      margin-right: 12px;
    }
    .am-icon {
      @include s_middle;
    }
  }
  .pay-footer-middle {
    float: right;
    position: relative;
    .details {
      @include s_fontDemo(28px, 100px, $theme);
      width: 140px;
    }
    .active-popup {
      position: absolute;;
      top: 28px;
      right: 10px;
      .active-popup-container {
        left: -50px;
        top: -100vh;
      }
    }
  }
  .pay-footer-right {
    float: right;
    width: 238px;
    text-align: center;
    font-size:32px;
    color: $font-ff;
    background: $theme;
  }
}

// .mask-container {
//   position: fixed;
//   height: 100%;
//   width: 100%;
//   background: rgba(0, 0, 0, .3);
// }

// 价格详情弹出框样式
.details-list-container {
  @include s_blockDemo(100%, auto);
  @include s_center;
  @include s_border_b;
  padding: 30px 20px 70px;
  background: $bg-ff;
  bottom: 100px;
  .detail-list-item .detail-list-title {
    margin-bottom: 55px;
  }
  .price-detail {
    @include s_center;
    span, .am-icon {
      float: left;
    }
    span {
      @include s_fontDemo(28px, 44px, $font-66);
    }
  }
}

// 评价列表弹出框样式
.evaluate {
  padding: 0 30px;
  .header {
    height: 90px;
    @include s_border_b;
    .left {
      width: 70px;
    }
    .center {
      text-align: center;
      font-weight: bolder;;
      color: $font-33;
    }
    .right {
      width: 100px;
      text-align: right;
      color: $theme;
    }
  }
  .s-evaluation {
    position: relative;
    overflow: hidden;
    padding: 30px 0;
    height: 60px;
    box-sizing: content-box;
    .evaluationContainer {
      @include s_center;
    }
  }
  .evaluate-text {
    @include s_fontDemo(28px, 28px, $font-66);
    margin-bottom: 42px;
    text-align: center;
  }
  // 改变评价框中antd样式
  .am-textarea-item {
    background:#fbfbfb;
    border:1px solid #dddddd;
    border-radius:6px;
    margin-bottom: 30px;
    padding-left: 0;
    .am-textarea-control {
      padding: 0;
      textarea {
        height: 180px;
        padding: 20px;
        font-size: 28px;
      }
    }
  }
}

.pay-footer-active-popup {
  width: calc(100% - 100px) !important;
  @include s_center;
  @include s_border_b;
  // bottom: 124px;
  .am-list-item.am-input-item:after {
    border-bottom: none;
  }
}
         
 
 
 
 yongche/styles/price-rules.scss 
 
@import "../../../styles/s_common.scss";

.price-rules {
  min-height: 100%;
  height: 100%;
  overflow: hidden;
  .header {
    .bg-grey {
      height: 184px;
      background: $bg-f3;
    }
    .car-name {
      @include s_fontDemo(24px, 24px, $font-99);
      padding-top: 100px;
      padding-bottom: 72px;
      text-align: center;
    }
  }
  .bottom {
    padding: 0 110px 60px;
    height: calc(100% - 396px);
    overflow: auto;
    .description {
      padding-bottom: 60px;
      .title {
        height: 33px;
        position: relative;
        margin-bottom: 80px;
        p {
          height: 15px;
          @include s_border_b;
        }
        h5 {
          @include s_blockDemo(140px, 33px);
          @include s_fontDemo(32px, 33px, $font-33);
          @include s_allCenter;
          font-weight: normal;
          text-align: center;
          background: $bg-f8;
        }
      }
      .description-item {
        margin-bottom: 30px;
        li{
          width: 100%;
          overflow: hidden;
        }
        .description-header {
          p {
            @include s_fontDemo(28px, 44px, $font-66);
          }
          .name {
            float: left;
          }
          .price {
            float: right;
          }
        }
        .description-title {
          p {
            float: left;
            @include s_fontDemo(24px, 40px, $font-99);
          }
        }
        .base-price {
          p {
            @include s_fontDemo(24px, 37px, $font-99);
          }
          .base-left {
            float: left;
          }
          .base-right {
            float: right;
            text-align: right;
          }
        }
      }
    }
  }
  .rules-carousel {
    a {
      height: 310px;
      display: block;
      position: relative;
      .carousel-img {
        height: 160px;
        @include s_allCenter;
      }
    }
  }
}


.top-style {
  @include s_border_t;
  padding-top: 40px;
}
         
 
 
 
 yongche/styles/product.scss 
 
@import "../../../styles/s_common.scss";

.product {
  height: 100%;
  position: relative;
  .grey-logo {
    margin: 70px auto;
    width: 200px;
    display: block;
  }
  .am-list-body {
    height: 100%;
    box-sizing: border-box;
  }
  .my-tab {
    width: 370px;
    margin: 0 auto 40px;
    padding-top: 50px;
    clear: both;
    overflow: hidden;
    li {
      width: 50%;
      @include s_fontDemo(34px, 48px, $font-66);
      text-align: center;
      float: left;
      border-bottom: 4px solid #e8e8e8;
      padding-bottom: 12px;
      &.active {
        color: $theme;
        border-color: $theme;
      }
    }
  }
  .header {
    margin: 20px 15px;
    background: $bg-ff;
    padding-bottom: 25px;
    box-shadow:0 0 8px 0 rgba(0,0,0,0.12);
    border-radius:4px;

    .meet-time {
      font-size:28px;
      color: $font-99;
      line-height: 90px;
      text-align: center;
      font-weight: normal;
      @include s_border_b;
    }

    .plane-come {
      .has-number {
        display: inline-block;
        .left {
          @include s_fontDemo(28px, 90px, $font-33);
          margin-right: 13px;
        }
        .right {
          @include s_fontDemo(24px, 90px, $font-99);
        }
      }
      .no-number {
        display: inline-block;
        @include s_fontDemo(28px, 90px, $theme);
      }
      .clear-flightNo {
        position: absolute;
        right: 35px;
      }
    }
    .start-point .am-list-content, .end-point .am-list-content {
      display: flex;
      align-items: center;
      border-bottom: none;
      span {
        background: #7ed321;
        width: 12px;
        height: 12px;
        border-radius: 100%;
        margin-right: 40px;
      }
      p {
        color: $font-99;
        height: 90px;
        line-height: 90px;
        flex: 1;
        font-size: 28px;
        color: $theme;
        &.active {
          color: $font-66;
        }
      }
    }
    .start-point .am-list-content p {
      @include s_border_b;
      box-sizing: border-box;
    }
    .end-point .am-list-content span {
      background: #ffab00;
    }

    .select-time-contact {
      height: 90px;
      @include s_border_b;
      .select-time-contact-item {
        height: 90px;
        width: 50%;
        float: left;
        display: flex;
        justify-content: center;
        align-items: center;
        @include s_fontDemo(22px, 22px, $font-66);
        box-sizing: border-box;
        &:first-of-type {
          @include s_border_r;
        }
        .am-icon {
          margin-right: 10px;
          @include s_blockDemo(24px, 24px);
        }
        p {
          @include s_fontDemo(22px, 22px, $font-66);
          span {
            color: $theme;
          }
        }
      }
    }

    .estimate-price {
      height: 80px;
      @include s_border_b;
      text-align: center;
      @include s_fontDemo(22px, 80px, $font-66);
      margin-top: 20px;
      span {
        @include s_fontDemo(50px, 80px, $theme);
      }
    }

    .car-style {
      background: $bg-ff;
      text-align: center;
      border-bottom: 1px solid $border-e5;
      .car-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding-bottom: 15px;
        span {
          font-size: 20px;
          line-height: 28px;
          color: $font-66 !important;
          margin-top: -15px;
          &.active {
            color: $theme !important;
          }
        }
      }
    }

    .s-button {
      margin-bottom: 25px;
    }

    .plane-button {
      ul {
        width: 250px;
        margin: 0 auto;
        overflow: hidden;
        li {
          &:first-child {
            float: left;
          }
          &:last-child {
            float: right;
          }
          h1 {
            background:#fcfcfc;
            border:1px solid #dadada;
            width:78px;
            height:78px;
            border-radius:100%;
            margin-bottom: 15px;
            position: relative;
            .am-icon {
              @include s_allCenter;
            }
          }
          p {
            @include s_fontDemo(24px, 33px, $font-66);
            text-align: center;
          }
        }
      }
    }
  }

  .footer {
    margin-right: 15px;
    margin-left: 15px;
    position: relative;
    z-index: 1;
    box-shadow:0 0 8px 0 rgba(0,0,0,0.12);
    border-radius:4px;
    .footer-item {
      .footer-item-title {
        display: flex;
        align-items: center;
        @include s_fontDemo(28px, 28px, $font-66);
        .am-icon {
          margin-right: 20px;
        }
      }
    }
  }

  .acitivity-icon{
    @include s_center;
    bottom: 23px;
    z-index: 10;
  }

  /* antd默认样式*/
  .am-list-item {
    border-bottom: 1px solid $border-e5;
    &.start-point{
      border-bottom: none;
    }
  }

  .am-list-body div:not(:last-child) .am-list-line:after{
    border-bottom: none;
  }

  .am-list-item, .am-list-item .am-list-line {
    min-height: 90px;
    height: 90px;
  }
  .am-list-item .am-list-line .am-list-content {
    padding-top: 0;
    padding-bottom: 0;
    color: $font-33;
  }
  .am-list-item .am-list-line .am-list-extra {
    color: $font-33;
  }
  .am-list-body {
     background: none;
    //  height: 100%;
  }
  .am-tabs-bar {
    margin-bottom: 25px;
  }
  .am-list-body .am-list-item:last-child {
    @include s_border_b;
  }
  .am-list-item .am-list-line .am-list-extra {
    overflow: initial;
  }

}


.am-picker-popup.select-start-time .am-picker-popup-title {
  font-size: 26px;
  padding: 18px;
}

.am-picker-popup-header {
  height: 90px;
}

.single-pay {
  height: 100px;
  @include s_border_t;
  padding-left: 30px;
  position: fixed;
  bottom: 0;
  width: 100%;
  background: $bg-ff;
  z-index: 1;
  .real-price {
    @include s_fontDemo(28px, 100px, $font-f48);
    float: left;
    margin-right: 8px;
    span {
      font-size: 36px;
    }
  }
  .disc-price {
    @include s_fontDemo(20px, 110px, $font-99);
    float: left;
  }
  .pay-button {
    @include s_blockDemo(300px, 100px);
    @include s_fontDemo(38px, 100px, $font-ff);
    float: right;
    background: $theme;
    text-align: center;
  }
  // activePopup样式修改
  .active-popup-icon {
    position: absolute;
    top: 28px;
    right: 320px;
  }
  .active-popup-container {
    top: -100px;
  }
  .s-promotion .am-list-body {
    height: auto;
  }
}

.am-modal-title {
  font-size: 30px;
}

.am-modal-button:last-of-type {
  color: $theme !important;
}

.passenger-input input {
  @include s_fontDemo(28px, 28px, $font-33);
  text-align: center;
  padding-top: 90px;
  padding-bottom: 10px;
  width: 480px;
  @include s_border_b;
}


.product .acitivity-icon {
  display: none;
}


// 接送机页面
.product.plane {
  padding-left: 30px;
  padding-right: 30px;
  background: $bg-ff;
  .header, .footer {
    margin-left: 0;
    margin-right: 0;
    box-shadow: none;
    border-radius: none;
  }
  .header {
    .start-point .am-list-content span, .end-point .am-list-content span {
      display: block;
      @include s_blockDemo(15px, 15px);
      border:3px solid #7ed321;
      background: none;
      margin-top: 7px;
      margin-left: 3px;
    }
    .end-point .am-list-content span {
      border-color: #ffab00;
    }
    .start-point .am-list-line {
      padding-right: 0;
    }

    .am-list-content {
      display: flex;
      align-items: center;
      font-size: 28px;
      .icon-container {
        width: 40px;
        height: 30px;
        float: left;
        .am-icon {

        }
      }
    }
    .am-list-extra {
      font-size: 28px;
    }

    .estimate-price {
      height: 80px;
      line-height: 80px;
      border-bottom: none;
      span {
        line-height: 80px;
      }
    }

    // .s-button {
    //   padding-top: 0;
    // }
  }
  .am-list-item {
    padding-left: 0;
  }
}
         
 
 
 
 yongche/styles/select-airport.scss 
 
@import "../../../styles/s_common.scss";

.airport-search {
  .leftCom {
    width: 20% !important;
    padding-right: 10px;
    margin-top: 23px;
    float: left;
  }
  .searchMain {
    width: 65% !important;
    background-image: none;
    background: none;
    border: none;
    input {
      margin-left: 50px;
      background: none;
    }
  }
}

.airport-container {
  padding-left: 30px;
  min-height: calc(100% - 100px);
  background: $bg-ff;
  .airport-item {
    padding-top: 30px;
    padding-bottom: 30px;
    @include s_border_b;
    h1 {
      @include s_fontDemo(28px, 28px, $font-33);
      font-weight: normal;
      margin-bottom: 18px;
    }
    p {
      @include s_fontDemo(24px, 24px, $font-ad);
      font-weight: normal;
      margin-bottom: 18px;
    }
  }
}
         
 
 
 
 yongche/styles/stroke.scss 
 
@import "../../../styles/s_common.scss";

.stroke {
  padding: 30px;
  .stroke-item {
    margin-bottom: 10px;
    box-shadow: 0 10px 10px rgba(0, 0, 0, .1);
    padding: 10px 30px 0;
    background: $bg-ff;
    img {
      width: auto;
      height: 40px;
    }
    .price {
      height: 60px;
      text-align: right;
      @include s_fontDemo(24px, 60px, $font-66);
      span {
        color: $font-f48;
      }
    }
  }
  // 改变antd默认样式
  .am-list-item {
    padding-left: 0;
  }
  .am-list-item .am-list-line {
    padding-right: 0;
  }
  .stroke-header.am-list-item .am-list-line .am-list-extra {
    color: $font-99;
    font-size: 28px;
  }
  .stroke-header.am-list-item.active .am-list-line .am-list-extra {
    color: $theme;
  }
}
