         
 
 
 
 shenghuojiaofei/.type 
 
         
 
 
 
 shenghuojiaofei/actions/billInfo.js 
 
import { Loading } from '@boluome/oto_saas_web_app_component'
import { getStore } from '@boluome/common-lib'
import { send, get } from 'business'
import { Toast } from 'antd-mobile'

export const getHistoryBillInfo = queryInfo => dispatch => {
  const handleClose = Loading()
  const userId = getStore('customerUserId', 'session')
  queryInfo.userId = userId
  queryInfo.cityId = queryInfo.billCityId
  send('/shenghuojiaofei/v1/history', queryInfo).then(({ code, data, message }) => {
    if (code === 0) {
      const status = data.billList[0].status
      if (status === '00') {
        dispatch({ type: 'CHANGE_BILL_INFO', billInfo: { type: 'bill', data } })
      } else {
        dispatch({ type: 'CHANGE_BILL_INFO', billInfo: { type: 'historyBill', data } })
      }
    } else if (code === -2 || code === -1) {
      dispatch({ type: 'CHANGE_BILL_INFO', billInfo: { type: 'historyNoBill', tips: '暂未查询到该月账单信息', subTips: '无记录或已销账建议使用本平台缴费记录您的缴费生活' } })
    } else {
      Toast.fail(message, 1)
    }
    handleClose()
  }).catch(({ message }) => {
    console.log('getHistoryBillInfo', message)
    handleClose()
  })
}


export const getOrgInfo = paras => dispatch => {
  const closeLoading = Loading()
  get('/shenghuojiaofei/v1/org', paras).then(({ code, data }) => {
    let showQueryHistory = false
    if (code === 0 && (data.queryTypes.length >= 2 || data.queryTypes[0].type !== '2')) {
      showQueryHistory = true
    }
    dispatch({ type: 'SET_CURRENT_ORG_DETAIL', showQueryHistory })
    closeLoading()
  })
}
         
 
 
 
 shenghuojiaofei/actions/index.js 
 
import { setStore, getStore, removeStore } from '@boluome/common-lib'
import { get, send } from 'business'
import { browserHistory } from 'react-router'
import { Toast } from 'antd-mobile'
import { Loading } from '@boluome/oto_saas_web_app_component'    // 引入loading图组件
import { merge } from 'ramda'

//  城市改变时，获取当前的service,三个参数：当前选中的城市信息，关闭遮罩，是否跳转页面
export const changeCity = (selectedCity, handleClose, isSelectCity) => dispatch => {
  dispatch({ type: 'CHANGE_CURRENT_CITY', selectedCity }) // 改变当前city的信息
  setStore('selectedCity', { selectedCity }, 'session')
  get('/shenghuojiaofei/v1/categories', { cityId: selectedCity.id, channel: 'chinaums' }).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'CHANGE_CITY_SERVICE', service: data })
      if (isSelectCity) browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/?flag=selectCity`)
      if (handleClose) handleClose()
    } else {
      if (handleClose) handleClose()
      Toast.fail(message, 1)
    }
  })
}

export const delUserPage = res => dispatch => {   // res是一个数组，第一个是userCategory，第二个是currentOrg
  const customerUserId = sessionStorage.customerUserId
  send(`/shenghuojiaofei/v1/${ customerUserId }/${ res[1].tag }/${ res[1].billNo }`, {}, 'DELETE').then(({ code, message }) => {
    if (code === 0) {
      const newUserCategory = JSON.parse(JSON.stringify(res[0]))
      res[0].forEach((item, idx) => {
        if (item.tag === res[1].tag && item.billNo === res[1].billNo) {
          newUserCategory.splice(idx, 1)
        }
      })
      dispatch({ type: 'GET_USER_PAGE', userCategory: newUserCategory })
    } else {
      Toast.fail(message, 1)
    }
  })
}

//  下面是才分新接口，包含账单，home的增删改查

//  新删除家庭接口
export const newDelUserPage = paras => dispatch => {   // res是一个数组，第一个是userCategory，第二个是currentOrg
  const handleContainerClose = Loading()
  const userId = sessionStorage.customerUserId
  paras.userId = userId
  send('/shenghuojiaofei/v2/categories', paras, 'DELETE').then(({ code, data, message }) => {
    if (code === 0) {
      // 从当前userCategory中删除当前账单
      // const userCategory = getStore('userCategory', 'session').userCategory
      // userCategory.map(item => {
      //   if (item.tid === paras.tid) {
      //     item.tagInfo.filter(o => {
      //       if (o.bid !== paras.bid) {
      //         return true
      //       }
      //     })
      //   }
      //   return item
      // })

      // 从当前userCategory中删除当前账单
      dispatch({ type: 'GET_USER_PAGE', userCategory: data.userCategory })
      dispatch({ type: 'CHANGE_HOME_TAG', currentHomeTag: '' })
      browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }`)
    } else {
      Toast.fail(message, 1)
    }
    handleContainerClose()
  })
}

//  新编辑账单页面接口
export const newEditUserPage = (currentBillInfo, url) => () => {   // res是一个数组，第一个是userCategory，第二个是currentOrg
  const handleContainerClose = Loading()
  const customerUserId = sessionStorage.customerUserId
  const preBillNo = currentBillInfo.preBillNo ? currentBillInfo.preBillNo : ''
  setStore('currentBillInfo', { currentBillInfo }, 'session')
  send(`/shenghuojiaofei/v2/${ customerUserId }/category/${ preBillNo }`, currentBillInfo).then(({ code, message }) => {
    if (code === 0) {
      if (url) browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/${ url }`)
    } else {
      Toast.fail(message, 1)
    }
    handleContainerClose()
  })
}

//  新编辑家庭页面接口
export const newEditHome = (currentBillInfo, url = '') => dispatch => {   // res是一个数组，第一个是userCategory，第二个是currentOrg
  const handleContainerClose = Loading()
  const customerUserId = sessionStorage.customerUserId
  currentBillInfo.userId = customerUserId
  send('/shenghuojiaofei/v2/user/update/info', currentBillInfo).then(({ code, message }) => {
    if (code === 0) {
      // 如果是要回到homeManege页面，就执行返回到上一页的命令
      if (url === 'homeManege') {
        dispatch({ type: 'CHANGE_HOME_TAG', currentHomeTag: currentBillInfo.tag })
        dispatch({ type: 'GET_USER_PAGE', userCategory: '' })
        window.history.go(-1)
        handleContainerClose()
        return
      }
      // 还会跳转到billInfo页面
      if (url) browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/${ url }`)
    } else {
      Toast.fail(message, 1)
    }
    handleContainerClose()
  })
}
//  新建用户接口
export const newUserPage = (currentBillInfo, tag, url = '') => dispatch => {
  const handleContainerClose = Loading()
  const customerUserId = sessionStorage.customerUserId
  currentBillInfo.userId = customerUserId
  currentBillInfo.channel = 'chinaums'
  send('/shenghuojiaofei/v2/user/info', currentBillInfo).then(({ code, data, message }) => {
    if (code === 0) {
      removeStore('newUserPage', 'session')
      let bill = { }
      data.userCategory.forEach(item => {
        if (item.tid === currentBillInfo.tid || item.tag === currentBillInfo.tag) {
          if (item.tagInfo.length > 0) bill = item.tagInfo[0]
          bill.tid = item.tid
        }
      })
      currentBillInfo = merge(currentBillInfo, bill)
      setStore('currentBillInfo', { currentBillInfo }, 'session')
      // 将新的userCategory数据保存下来
      dispatch({ type: 'GET_USER_PAGE', userCategory: data.userCategory })
      browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/${ url }`)
    } else {
      Toast.fail(message, 1)
    }
    handleContainerClose()
  })
}
         
 
 
 
 shenghuojiaofei/actions/order.js 
 
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { send, afterOrdering } from 'business'

export const changeOrder = paras => () => {
  const handleClose = Loading()
  send('/shenghuojiaofei/v1/order', paras, 'POST').then(({ code, data, message }) => {
    if (code === 0) {
      // window.location.href = `/cashier/${ data.id }`  // needChange_edit to pro
      afterOrdering(data)
    } else {
      handleClose()
      Toast.fail(message, 1)
    }
  }).catch(({ message }) => {
    console.log(message)
  })
}
         
 
 
 
 shenghuojiaofei/actions/selectOrg.js 
 
import { Loading } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { get } from 'business'

//  当服务改变时，获取当前的orgs
export const changeServer = ({ cityId, categoryId }) => dispatch => {
  // 全品类时，如果没有categoryId，默认shuifei
  if (categoryId === '') categoryId = '1001'
  const handleClose = Loading()
  const getUrl = `/shenghuojiaofei/v1/${ cityId }/categorie/${ categoryId }/orgs`
  get(getUrl, { channel: 'chinaums' }).then(({ code, data, message }) => {
    if (code === 0) {
      dispatch({ type: 'CHANGE_SERVER_DATA', orgs: data })
      handleClose()
    } else {
      handleClose()
      Toast.fail(message, 1)
    }
  }).catch(({ message }) => {
    console.log(message)
    handleClose()
  })
}
         
 
 
 
 shenghuojiaofei/components/AddHome.js 
 
import React from 'react'
import { List, WhiteSpace, Picker, InputItem, Toast } from 'antd-mobile'
import { Mask, SlidePage, CitySearch } from '@boluome/oto_saas_web_app_component'
import { getStore } from '@boluome/common-lib'
import { map } from 'ramda'

import Button from './Button'

class AddHome extends React.Component {
  constructor(props) {
    super(props)
    const { currentBillInfo } = props
    const { cityName } = currentBillInfo
    this.state = {
      currentCity:     cityName,
      curSelectedCity: getStore('selectedCity', 'session').selectedCity,
      currentAddress:  '',
      curHome:         '',
      curInputHome:    '',
    }
    this.handleChangeCity = this.handleChangeCity.bind(this)
    this.handleChangeAddress = this.handleChangeAddress.bind(this)
    this.handleClick = this.handleClick.bind(this)
    this.handleChangeHome = this.handleChangeHome.bind(this)
    this.handleInputHome = this.handleInputHome.bind(this)
  }

  handleChangeCity(curSelectedCity) {
    const currentCity = curSelectedCity.name
    this.setState({ currentCity, curSelectedCity })
  }

  handleChangeAddress(currentAddress) {
    this.setState({ currentAddress })
  }

  handleClick(inHome) {
    if (inHome) {
      Toast.fail('已存在此家庭名称，请重新修改', 1)
      return
    }
    const { curSelectedCity, currentAddress, currentCity, curInputHome } = this.state
    let { curHome } = this.state
    const { handleChangeCityData, currentBillInfo, handleNewHome } = this.props
    curHome = curHome[0]
    if (curHome === '其它') {
      curHome = curInputHome
    }
    if (currentCity !== currentBillInfo.cityName) handleChangeCityData(curSelectedCity)
    //  将所有的参数变为空，并改变指定信息
    // for (let i in currentBillInfo) {
    //   currentBillInfo[i] = ''
    // }
    map(() => '')(currentBillInfo)

    const paras = {
      address:  currentAddress,
      cityName: currentCity,
      cityId:   curSelectedCity.id,
      tag:      curHome,
    }
    handleNewHome(paras, curHome)
  }

  handleChangeHome(curHome) {
    this.setState({ curHome })
  }

  handleInputHome(curInputHome) {
    this.setState({ curInputHome })
  }

  render() {
    const { currentBillInfo, homes, userCategory } = this.props
    const { cityName } = currentBillInfo
    const { currentCity, currentAddress, curHome, curInputHome } = this.state
    let inHome = false
    userCategory.forEach(item => {
      if (item.tag === curInputHome) {
        inHome = true
      }
    })
    const Item = List.Item
    return (
      <div>
        <List>
          <Picker disabled={ 0 } data={ homes } value={ curHome } title='选择名称' cols={ 1 } extra={ curHome } onChange={ this.handleChangeHome }>
            <Item arrow='horizontal'>家庭</Item>
          </Picker>
          { curHome[0] === '其它' && <InputItem defaultValue={ curInputHome } onChange={ this.handleInputHome } placeholder='请输入自定义家庭名称'>名称</InputItem> }
          <Item arrow='horizontal' extra={ currentCity } onClick={ () => Mask(
            <SlidePage target='right' showClose={ false } >
              <CitySearch localCity={ cityName } categoryCode='shenghuojiaofei' handleCityData={ this.handleChangeCity } api={ '/shenghuojiaofei/v1/chinaums/citys' } />
            </SlidePage>) }
          >
            所在城市
          </Item>
          <InputItem defaultValue={ currentAddress } onChange={ this.handleChangeAddress } placeholder='家庭详细地址'>详细地址</InputItem>
        </List>
        <WhiteSpace size='lg' />
        <Button title='保存' handleClick={ () => ((curHome !== '' && curHome[0] !== '其它') || curInputHome !== '') && this.handleClick(inHome) } btnStyle={ ((curHome !== '' && curHome[0] !== '其它') || curInputHome !== '') ? { } : { background: '#cccccc' } } />
      </div>
    )
  }
}


export default AddHome
         
 
 
 
 shenghuojiaofei/components/AddUser.js 
 
import React from 'react'
import { List, WhiteSpace, InputItem, Toast, Icon, Picker } from 'antd-mobile'
import { Mask, SlidePage } from '@boluome/oto_saas_web_app_component'
import { getStore } from '@boluome/common-lib'
import { contains } from 'ramda'

import Button from './Button'
import ServerHeader from './ServerHeader'
import '../styles/addUser.scss'

const AddUser = ({ currentServer,
                  currentHomeTag, handleClickHome,
                  currentOrg = '',
                  handleNumChange, handlePwdChange,
                  billNo = '', billPwd = '',
                  handleQueryBill, handleSelectOrg,
                  handleQueryTypeChange, curQueryType, queryTypeUrl,
                  queryTypes,
                  selectedCity,
                  homesStore }) => {
  console.log('queryTypes2222222', queryTypes)
  if (queryTypes.length > 0) {
    const Item = List.Item

    //  当是从用户页直接跳转到该页面时，设置默认使用带过来的参数里的backResv1项作为backResv1，因为两个的currentorg的backResv1对应的键值对不一致
    if (!currentHomeTag) {
      if (getStore('currentHomeTag', 'session')) {
        currentHomeTag = getStore('currentHomeTag', 'session').currentHomeTag
      } else {
        currentHomeTag = currentOrg.tag
      }
    }
    const { orgId, categoryId, backResv1, orgName, validationExp } = currentOrg
    console.log('currentOrg', currentOrg)

    //  设置当前queryTypes
    queryTypes = queryTypes.map(item => ({ label: item.typeName, value: item.type }))
    if (curQueryType) {
      curQueryType = curQueryType[0]
    } else if (queryTypeUrl) {
      curQueryType = queryTypeUrl
    } else {
      curQueryType = queryTypes[0].value
    }
    const curQueryTypeName = Array(queryTypes.filter(item => item.value === curQueryType)[0].label)

    const queryInfo = {
      billNo,
      billPwd,
      orgId,
      categoryId,
      backResv1,
      orgName,
      typeName: curQueryTypeName[0],
      tag:      currentHomeTag,
      type:     curQueryType,
      channel:  'chinaums',
    }

    //  当是从用户页直接跳转到该页面时，currentOrg.backResv1为undefined，使用带过来的currentOrg.backResv1
    if (!queryInfo.backResv1) {
      queryInfo.backResv1 = currentOrg.backResv1
    }

    //  当是从用户页直接跳转到该页面时，currentorg中是带有tag参数的，当没有选择过home时，就使用cuttentorg中的tag作为当前的currentHomeTag
    //  if (getStore('editInfo', 'session')) {
    //    const editInfo = getStore('editInfo', 'session').editInfo
    //    queryInfo.edit = true
    //    queryInfo.bid = bid // 将旧的需要修改的billNo保存到queryInfo中
    //  }

    if (!currentHomeTag) {
      currentHomeTag = '我家'
    }
    queryInfo.tag = currentHomeTag
    queryInfo.billCityId = selectedCity.id
    queryInfo.billCityName = selectedCity.name
    if (!billNo) billNo = ''
    console.log('currentOrg', currentOrg)
    return (
      <div className='addUser'>
        <ServerHeader currentServer={ currentServer } />
        <List className='query-info'>
          <Item className='select-home' extra={ currentHomeTag } arrow='horizontal' onClick={ () =>
              Mask(
                <SlidePage target='right' showClose={ false } >
                  <SelectHome { ...{ handleClickHome, currentHomeTag, homesStore } } />
                </SlidePage>
              , { mask: false, style: { position: 'absolute' } })
            }
          >家庭</Item>
          <WhiteSpace size='md' />

          <Item extra={ currentOrg.orgName } arrow='horizontal' onClick={ () => handleSelectOrg(currentServer, currentOrg, billNo) }>缴费单位</Item>
          {
            queryTypes.length >= 2 &&
            <Picker data={ queryTypes } value={ Array(curQueryType) } title='缴费类型' cols={ 1 } extra={ curQueryTypeName } onChange={ handleQueryTypeChange }>
              <List.Item arrow='horizontal'>缴费类型</List.Item>
            </Picker>
          }
          {
            queryTypes.length <= 1 &&
            <Item extra={ curQueryTypeName[0] }>缴费类型</Item>
          }
          <InputItem
            placeholder={ `请输入${ currentOrg.typeName }` }
            data-seed='logId'
            onChange={ handleNumChange }
            type='number'
            defaultValue={ billNo }
            className='input-num'
          >
            { curQueryTypeName }
          </InputItem>
          {
            currentOrg.needPwd ? (
              <InputItem
                placeholder='请输入密码'
                data-seed='logId'
                onChange={ handlePwdChange }
                type='number'
                className='input-num'
              >
                密码
              </InputItem>) : ''
          }
        </List>
        <WhiteSpace size='lg' />
        <p className='remark'>{ currentOrg.remark }</p>
        <WhiteSpace size='xl' />
        <Button title='下一步' btnStyle={ billNo.length === 0 ? { background: '#ccc' } : {} } handleClick={ () => {
          if (billNo.length !== 0) {
            if (currentOrg.curQueryType === 2) {
              Toast.info('暂不支持条码查询')
              return
            }
            handleQueryBill(queryInfo, validationExp)
          }
        } }
        />
      </div>
    )
  }
  return (<div />)
}

export default AddUser

class SelectHome extends React.Component {
  constructor(props) {
    super(props)
    const { currentHomeTag } = props
    this.state = {
      currentHomeTag,
    }
    this.handleSaveClick = this.handleSaveClick.bind(this)
    this.handleIconClick = this.handleIconClick.bind(this)
  }
  handleSaveClick() {
    const inputValue = this.node.value
    const { homesStore } = this.props
    if (inputValue) {
      if (contains(inputValue)(homesStore)) {
        Toast.fail('已存在此家庭名称，请重新修改', 1)
      } else {
        const { handleClickHome, handleContainerClose } = this.props
        handleClickHome(inputValue)
        handleContainerClose()
      }
    } else {
      Toast.fail('请输入自定义家庭名称', 1)
    }
  }
  handleIconClick(currentHomeTag) {
    this.setState({ currentHomeTag })
  }

  render() {
    const { handleClickHome, handleContainerClose, homesStore } = this.props
    const { currentHomeTag } = this.state
    const homes = ['我家', '父母家', '房东', '朋友', '其它'].filter(item => {
      if (!contains(item)(homesStore) || item === this.props.currentHomeTag) {
        return true
      }
      return false
    })

    //  判断当前选中的是不是其它
    let isOther = false
    if (currentHomeTag !== '我家' && currentHomeTag !== '父母家' && currentHomeTag !== '朋友' && currentHomeTag !== '房东') {
      isOther = true
    }

    let defaultValue = ''
    if (isOther && currentHomeTag !== '其它') defaultValue = currentHomeTag

    return (
      <ul className='home-list'>
        {
          homes.map((item, idx) => (
            <li key={ item } onClick={ () => {
              if (item !== '其它') {
                handleClickHome(item)
                handleContainerClose()
              }
            } }
            >
              <p className='left'>{ item }</p>
              {
                item === '其它' && isOther && <input className='center' type='text' placeholder='自定义家庭名称' defaultValue={ defaultValue } ref={ node => this.node = node } />
              }
              <p className='right'>
                {
                  (item === currentHomeTag || (isOther && idx === 4)) && <Icon className='my-icon' type={ require('svg/shenghuojiaofei/check.svg') } />
                }
                {
                  item !== currentHomeTag && !isOther && <Icon type={ require('svg/shenghuojiaofei/check_no.svg') } onClick={ () => this.handleIconClick(item) } />
                }
              </p>
            </li>
          ))
        }
        <WhiteSpace size='lg' />
        { (currentHomeTag === '其它' || isOther) && <Button title='保存' handleClick={ this.handleSaveClick } /> }
      </ul>
    )
  }
}
         
 
 
 
 shenghuojiaofei/components/AppCategory.js 
 
import React from 'react'
import { setStore } from '@boluome/common-lib'
import { WhiteSpace, List, Icon } from 'antd-mobile'
import { UserCenter, Mask, SlidePage, CitySearch, PayTips } from '@boluome/oto_saas_web_app_component'
import { merge, contains } from 'ramda'

import SelectOrg from '../containers/SelectOrg'
import '../styles/app.scss'

const App = ({
  selectedCity, handleSelectCity,
  service,
  userCategory, handleChangeHome, currentHomeTag,
  handleToBill, handleNewEdit, handleNewDel, handleToSelectOrgs,
  serviceStyle = '100%',
  currentServer = { categoryName: '' },
  handleEditClick, isEdit,
  handleHomeManegeClick, handleClickNewIcon,
  currentServerCategoryId,
  getCurrentServer,
}) => {
  if (service && service.length > 0 && currentServer.categoryName !== '') {
    const homes = []
    if (userCategory) {
      userCategory.forEach(item => {
        const o = {
          tag:  item.tag,
          name: item.cityName,
          id:   item.cityId,
        }
        homes.push(o)
      })
    }
    setStore('homes', { homes }, 'session')
    const { categoryName } = currentServer
    if (homes.length !== 0 || categoryName === 'all') {
      return (
        <div className='user-page single-category'>
          <CommonComponent categoryName={ categoryName } />
          <MyHome
            { ...{ userCategory, handleSelectCity, handleChangeHome, currentHomeTag, selectedCity, service, handleToBill, handleNewEdit, handleNewDel, handleToSelectOrgs, serviceStyle, handleEditClick, isEdit, handleHomeManegeClick, handleClickNewIcon, currentServer, currentServerCategoryId, homes, getCurrentServer, categoryName } }
          />
          <PayTips title='生活缴费' content={ <Content /> } />
        </div>
      )
    }
    setStore('newUserPage', 'newUserPage', 'session')     // 保存一个参数到本地，表示是从app页面跳转过去的
    // setStore('getOrgsPara', { getOrgsPara: { cityId: selectedCity.id, categoryId: currentServerCategoryId, channel: 'chinaums' } }, 'session')
    return (
      <div>
        <CommonComponent categoryName={ categoryName } />
        <SelectOrg isIndex='true' />
      </div>
    )
  }
  return (<div />)
}

const CommonComponent = ({ categoryName }) => (
  <div>
    <UserCenter categoryCode={ categoryName === 'all' ? 'shenghuojiaofei' : categoryName } />
  </div>
)

const Content = () => (
  <div>
    <h5>缴费操作步骤</h5>
    <p>
      1）选择缴费城市与缴费类型；<br />
      2）新增缴费账号后，可以查到该账号是否有未缴费账单；<br />
      3）查询到欠费金额后，点击“确认缴费”；<br />
      4）选择支付方式，确认支付即可。
    </p>
    <h5>缴费金额限制</h5>
    <p>系统会根据您的使用环境及历史交易情况综合判定并随时调整您的单笔/日/月充值次数及金额，如果发生缴费失败的情况，请联系酷屏的客服咨询具体原因。联系电话<a style={{ fontSize: '.24rem', color: '#666' }} href='tel:4009910008'>4009910008</a>.</p>
    <h5>是否可以代缴其他城市的费用</h5>
    <p>可以。</p>
    <h5>缴费失败后，退款多久能到账</h5>
    <p>以银行到账时间为准。</p>
    <h5>缴费需要手续费吗</h5>
    <p>不需要。</p>
    <h5>非注册用户可以使用水电煤缴费功能吗</h5>
    <p>不可以，该功能仅支持注册用户使用。</p>
  </div>
)

const MyHome = ({
  userCategory, handleSelectCity, handleChangeHome, currentHomeTag,
  selectedCity = { id: '', name: '' }, service = [],
  handleToBill, handleNewEdit, handleNewDel, handleToSelectOrgs,
  handleEditClick, isEdit = true,
  handleHomeManegeClick, handleClickNewIcon,
  currentServerCategoryId,
  currentServer,
  homes,
  getCurrentServer,
  categoryName,
}) => {
  const Item = List.Item
  // 定义一个变量isAllFirst，判断是否是全品类时，第一次进入该页面
  const isAllFirst = userCategory.length === 0
  if (isAllFirst) setStore('newUserPage', 'newUserPage', 'session')     // 如果是是全品类时，第一次进入该页面，保存一个参数到本地，表示是从app页面跳转过去的
  const nameStyle = {
    lineHeight:   '.32rem',
    fontSize:     '.32rem',
    color:        '#111111',
    marginBottom: '.15rem',
  }
  const noAddressStyle = {
    lineHeight:   '.32rem',
    fontSize:     '.32rem',
    color:        '#111111',
    marginBottom: '.15rem',
    marginTop:    '.15rem',
  }
  const nameNoStyle = {
    lineHeight: '.32rem',
    fontSize:   '.32rem',
    color:      '#111111',
  }
  const NoStyle = {
    fontSize:   '.24rem',
    lineHeight: '.24rem',
    color:      '#999999',
  }

  // 定义一个变量，用来保存当前家庭类型
  currentHomeTag = currentHomeTag || (homes[0] && homes[0].tag)
  setStore('currentHomeTag', { currentHomeTag }, 'session')
  // 获取当前家庭信息，默认值为：{ cityName: selectedCity.name, cityId: selectedCity.id, tag: currentHomeTag, tagInfo: [{ name: currentServer.name, categoryId: currentServerCategoryId }] }
  let currentHome = { cityName: selectedCity.name, cityId: selectedCity.id, tag: currentHomeTag, tagInfo: [{ name: currentServer.name, categoryId: currentServerCategoryId }] }
  if (userCategory && userCategory.length > 0) {
    currentHome = userCategory.filter(item => item.tag === currentHomeTag)[0]
    // currentHome = userCategory[0]
  }
  const { cityId, cityName, address, tid, tag } = currentHome
  // 定义一个变量 tagInfo，用来保存当前账单列表
  let { tagInfo } = currentHome
  // 使tagInfo改变时，并不会使userPage中对应的tagInfo改变
  tagInfo = JSON.parse(JSON.stringify(tagInfo))

  // 设置默认的currentBillInfo，因为只有删除，编辑用户地址时，才会用的默认的，所以只需要默认保存cityId, cityName, address, tid, tag
  const defaultBillInfo = { cityId, cityName, address, tid, tag }
  setStore('currentBillInfo', { currentBillInfo: defaultBillInfo }, 'session')
  // 以下是设置当为全品类时，需要遍历出的账单列表
  const categories = []       // 定义当前家庭下，保存的服务，保留下categoryId去区分
  tagInfo.forEach(item => {
    categories.push(item.categoryId)
  })

  const totalCategoryId = []  // 定义当前城市下，支持的服务，保留下categoryId去区分
  service.forEach(item => {
    if (item.isLive === '1') {
      totalCategoryId.push({ categoryId: item.categoryId })
    }
  })
  totalCategoryId.forEach(item => {     // 从当前用户中保存的账单中，把当前城市支持，但没有的服务，添加上去。（注：当前城市不支持的服务，是不可能保存下来的）
    if (!contains(item.categoryId)(categories)) {
      tagInfo.push(item)
    }
  })

  // 如果是全品类第一次，就把当前城市支持的服务，设置为默认显示的账单列表，因为只有categoryId，所以都是可添加的形式
  if (isAllFirst) {
    tagInfo = totalCategoryId
  }
  if (tagInfo.length === 0) {
    return (
      <div>
        <UserCenter categoryCode={ categoryName === 'all' ? 'shenghuojiaofei' : categoryName } />
        { location.pathname.indexOf('shjf') < 0 && <SelectOrg /> }
      </div>
    )
  }

  if (currentServerCategoryId !== '') { // 不是全品类, 使tagInfo只包含当前的账单
    tagInfo = tagInfo.filter(item => item.categoryId === currentServerCategoryId)
    if (tagInfo.length === 0) {
      tagInfo.push({ categoryId: currentServerCategoryId, noSupport: true })
    }
  }

  return (
    <div className='my-home'>
      <WhiteSpace size='md' />
      {
        isAllFirst &&
        <div className='city-select' onClick={ () => Mask(
          <SlidePage target='right' showClose={ false } >
            <CitySearch localCity={ selectedCity.name } categoryCode='shenghuojiaofei' handleCityData={ handleSelectCity } api={ '/shenghuojiaofei/v1/chinaums/citys' } />
          </SlidePage>
          ) }
        >
          <div className='container'>
            <Icon className='icon-location' type={ require('svg/shenghuojiaofei/location.svg') } />
            <p>{ selectedCity.name }</p>
            <Icon className='icon-arrow' type='down' size='xs' />
          </div>
        </div>
      }
      {
        !isAllFirst &&
        <ul className='home-container'>
          { homes.length < 5 && <Icon className='user-icon' type={ require('svg/shenghuojiaofei/user.svg') } size='md' onClick={ () => handleClickNewIcon(currentHomeTag, currentHome, userCategory, selectedCity) } /> }
          {
            homes.map(item => (<li className={ item.tag === currentHomeTag ? 'active' : '' } key={ item.tag + item.id } onClick={ () => handleChangeHome(item) } >{ item.tag }</li>))
          }
        </ul>
      }
      <List>
        {
          !isAllFirst &&
          <Item arrow='horizontal' className='home-info' onClick={ () => handleHomeManegeClick(currentHomeTag, currentHome, userCategory) }>
            <dl className='second-page-dl'>
              <dt>
                <Icon type={ require('svg/shenghuojiaofei/home.svg') } />
              </dt>
              <dd className='first-dd'>
                <p style={ address ? nameStyle : noAddressStyle }>{ cityName }</p>
                <p className='address' style={ NoStyle }>{ address || '' }</p>
              </dd>
            </dl>
          </Item>
        }
        <WhiteSpace size='md' />
        <div className='header'>
          <p className='left'>缴费账户</p>
          { tagInfo[0] && tagInfo[0].bid && <p className='right' onClick={ () => handleEditClick(isEdit) }>{ isEdit ? '编辑' : '取消编辑' }</p> }
        </div>
        {
          (currentHomeTag || isAllFirst) && tagInfo.map(item => {
            let { billCityId, billCityName } = item
            const { billNo, orgName, categoryId, noSupport } = item
            // 是否可添加的文字
            let billText = ''
            if (!billNo) {
              billText = '可添加'
              if (noSupport) billText = '暂不支持'
            }
            if (!billCityId) {
              billCityId = selectedCity.id
              billCityName = selectedCity.name
            }
            // const cateREG = new RegExp(currentServerCategoryId)
            const currentBillInfo = merge(item, defaultBillInfo)
            //  定义传输数据
            const getOrgsPara = { cityId: billCityId, categoryId, channel: 'chinaums', name: billCityName }
            // if (cateREG.test(categoryId)) {    // 此过滤方式，如果为全品类情况，此时的currentServerCategoryId为空，可以匹配所有的categoryId
            const tServer = getCurrentServer(selectedCity.id, categoryId)     // 根据当前选择的categoryId，重新设置tServer，解决全品类情况下，tServer为默认的情况
            return (
              <div key={ `${ categoryId }${ billNo }` }>
                {
                  billNo && <ul className='edit-bill' style={ isEdit ? { display: 'none' } : {} }>
                    <li className='edit' onClick={ () => handleNewEdit(tServer, currentBillInfo) }>修改</li>
                    <li className='del' onClick={ () => handleNewDel(currentBillInfo) }>删除</li>
                  </ul>
                }
                <Item extra={ billText } arrow='horizontal' onClick={ () => {
                  if (billNo) {
                    handleToBill(tServer, currentBillInfo)
                  } else {
                    handleToSelectOrgs(getOrgsPara, tServer, currentBillInfo)
                  }
                } }
                >
                  <dl className='second-page-dl'>
                    <dt><Icon type={ tServer.icon } /></dt>
                    <dd className='first-dd'>
                      { orgName && (<div><p style={ nameStyle }>{ tServer.name }</p><p style={ NoStyle }>{ `${ orgName }(${ billNo })` }</p></div>) }
                      { !orgName && <p style={ nameNoStyle }>{ tServer.name }</p> }
                    </dd>
                  </dl>
                </Item>
              </div>
            )
          })
        }
      </List>
    </div>
  )
}

export default App
         
 
 
 
 shenghuojiaofei/components/BillInfo.js 
 
// showPriceIpt: 是否显示价格输入框，北京是默认显示的


import React from 'react'
import { List, WhiteSpace, Picker, Modal } from 'antd-mobile'

import Order from '../containers/Order'
import ServerHeader from './ServerHeader'
import PriceInput from './price-input'

import '../styles/billInfo.scss'

const Item = List.Item

const Bill = ({ billInfo = { type: '' }, currentOrg, currentServer, queryInfo,
  curDate, dates, handleDatesChange,
  handleCodeCancel, handleCodeConfirm,
  currentBillInfo,
  showQueryHistory,
  showPriceIpt,
}) => {
  if (showPriceIpt && (billInfo.type || billInfo.type === 'bill') && currentServer.categoryId === '1002') {
    const { orgName, typeName } = currentOrg
    const { billNo } = queryInfo
    let price = '0.0'
    if (billInfo.data && billInfo.data.billList && billInfo.data.billList[0].price) price = billInfo.data.billList[0].price
    const billFlag = 'normal'
    const orderInfoTop = [
      { left: '缴费单位', right: orgName },
      { left: typeName, right: billNo },
      { left: '账单金额', right: `${ price }元` },
    ]
    return <PriceInput { ...{ orderInfoTop, currentServer, orderParas: { currentServer, currentOrg, queryInfo, billFlag, currentBillInfo } } } />
  }
  // 账单错误
  if (billInfo.type === 'errorBill') {
    return (
      <div className='no-error'>
        <img alt='未欠费' src={ require('../img/wqf.png') } />
        <p>{ billInfo.tips }</p>
        <span>{ billInfo.subTips }</span>
      </div>
    )
  }
  // 无账单（当月无订单，历史无订单）
  if (billInfo.type === 'noBill' || billInfo.type === 'historyNoBill') {    // code为-1，表示未查询到账单信息
    return <BillItem { ...{ showQueryHistory, currentServer, orderInfoTop: '', handleDatesChange, curImg: require('../img/wqf.png'), curText: billInfo.tips, subTips: billInfo.subTips, currentOrg, queryInfo, curDate, dates, handleCodeCancel, handleCodeConfirm } } />
  }
  // 查询到历史非待支付订单
  if (billInfo.type === 'historyBill') {
    const orderInfo = billInfo.data
    const { price } = orderInfo.billList[0]
    const { orgName, typeName } = currentOrg
    const { billNo } = queryInfo
    const orderInfoTop = [
      { left: '缴费单位', right: orgName },
      { left: typeName, right: billNo },
      { left: '账单金额', right: price },
    ]
    return (<BillItem { ...{ showQueryHistory, currentServer, orderInfoTop, handleDatesChange, currentOrg, queryInfo, curDate, dates } } />)
  }

  // 有待支付账单信息
  if (billInfo.type === 'bill') {    // code为0，表示查询到账单信息
    const { price, barcode, billId, date, status } = billInfo.data.billList[0]
    if (price !== undefined) {   // 加载order组件
      const orderInfo = { price, date, barcode, billId, orgName: currentOrg.orgName }
      const billFlag = 'normal'
      return (<Order { ...{ currentServer, currentOrg, orderInfo, queryInfo, billFlag, currentBillInfo } } />)
    }
    // 加载其它显示信息组件
    let curText = ''
    switch (status) {
      case '1s':
        curText = '暂未查询到欠费'
        break
      case '01':
        curText = '正在销帐中'
        break
      case '03':
        curText = '支付成功'
        break
      default:
        curText = '暂未查询到欠费'
        break
    }
    return (<BillItem { ...{ showQueryHistory, currentServer, orderInfoTop: '', handleDatesChange, curImg: require('../img/wqf.png'), curText, subTips: '', currentOrg, queryInfo, curDate, dates, handleCodeCancel, handleCodeConfirm } } />)
  }
  // 默认
  return <div />
}

class BillItem extends React.Component {
  constructor(props) {
    super(props)
    const { dates } = props
    this.state = {
      curDate: Array(dates[0].label),
    }
    this.handleDateChange = this.handleDateChange.bind(this)
  }
  handleDateChange(curDate) {
    const { handleDatesChange, queryInfo } = this.props
    this.setState({
      curDate,
    })
    const d = curDate[0].replace(/[^0-9]+/g, '')
    queryInfo.date = d
    handleDatesChange(queryInfo)
  }
  render() {
    const { currentServer, curImg, curText, subTips, currentOrg, queryInfo,
      dates,
      handleCodeCancel, handleCodeConfirm,
      orderInfoTop,
      showQueryHistory,
    } = this.props
    const { curDate } = this.state
    const { type } = queryInfo
    const handleCodeClick = () => Modal.alert(<img alt='条形码提示' src={ require('../img/tipsCode.png') } />, '填写户号可以更便捷的缴费与查询账单，是否立即填写？',
      [
        { text: '取消', onPress: () => handleCodeCancel() },
        { text: '确定', onPress: () => handleCodeConfirm(), style: { fontWeight: 'bold' } },
      ]
    )
    //  此处的orderInfoTop是用来区分，是否是历史查询的订单
    return (
      <div className='bill-info'>
        <ServerHeader currentServer={ currentServer } />
        {
          !orderInfoTop &&
          <div>
            <div className='img-container'>
              <h1>{ curDate }</h1>
              <img alt='图片信息' src={ curImg } />
              <p>{ curText }</p>
              <span>{ subTips }</span>
            </div>
            <ul className='list'>
              <li>
                <p className='left'>出账机构</p>
                <p className='right'>{ currentOrg.orgName }</p>
              </li>
              <li>
                <p className='left'>{ currentOrg.typeName }</p>
                <p className='right'>{ queryInfo.billNo }</p>
              </li>
            </ul>
          </div>
        }
        <WhiteSpace size='md' style={{ background: '#f5f5f6' }} />
        {
          orderInfoTop &&
          <div className='orderInfo-top-container'>
            <div className='orderInfo-top'>
              <p className='top'>{ curDate }</p>
              <p className='middle'>{ `${ orderInfoTop[2].right }元` }</p>
            </div>
            <List>
              {
                orderInfoTop.map(item => (
                  <Item key={ item.left } extra={ item.right }>{ item.left }</Item>
                ))
              }
            </List>
            <WhiteSpace size='md' style={{ background: '#f5f5f6' }} />
          </div>
        }
        {
          String(type) === '0' &&
          <Picker data={ dates } value={ curDate } title='往期账单' cols={ 1 } extra={ curDate } onChange={ this.handleDateChange }>
            <List.Item arrow='horizontal'>查询往期账单</List.Item>
          </Picker>
        }
        {
          String(type) === '2' && showQueryHistory &&
          <List.Item arrow='horizontal' onClick={ handleCodeClick }>查询账单</List.Item>
        }
      </div>)
  }
}

export default Bill
         
 
 
 
 shenghuojiaofei/components/Button.js 
 
import React from 'react'
import { merge } from 'ramda'

const Button = ({ title = '查询账单', handleClick, btnStyle = {} }) => {
  const btnDefaultStyle = {
    background:   '#ffab00',
    borderRadius: '12px',
    width:        '85%',
    height:       '98px',
    lineHeight:   '98px',
    fontSize:     '36px',
    textAlign:    'center',
    color:        '#fff',
    fontWeight:   'normal',
    margin:       '0 auto',
  }
  return (
    <div>
      <h1 onClick={ handleClick } style={ merge(btnDefaultStyle, btnStyle) }>{ title }</h1>
    </div>
  )
}

export default Button
         
 
 
 
 shenghuojiaofei/components/EditAddress.js 
 
import React from 'react'
import { getStore } from '@boluome/common-lib'
import { Mask, SlidePage, CitySearch } from '@boluome/oto_saas_web_app_component'
import { List, WhiteSpace, InputItem } from 'antd-mobile'
import { merge } from 'ramda'

import Button from './Button'

class HomeManege extends React.Component {
  constructor(props) {
    super(props)
    const { currentBillInfo } = props
    const { cityName, address, cityId } = currentBillInfo
    this.state = {
      currentCity:    cityName,
      currentAddress: address,
      currentCityId:  cityId,
    }
    this.handleChangeCity = this.handleChangeCity.bind(this)
    this.handleChangeAddress = this.handleChangeAddress.bind(this)
    this.handleClick = this.handleClick.bind(this)
  }

  handleChangeCity(curSelectedCity) {
    const currentCity = curSelectedCity.name
    const currentCityId = curSelectedCity.id
    this.setState({ currentCity, curSelectedCity, currentCityId })
  }

  handleChangeAddress(currentAddress) {
    this.setState({ currentAddress })
  }

  handleClick() {
    const { curSelectedCity, currentAddress, currentCity, currentCityId } = this.state
    const { handleChangeCityData, currentHomeTag, currentBillInfo, handleNewEdit } = this.props
    if (currentCity !== currentBillInfo.cityName) handleChangeCityData(curSelectedCity)
    const editParas = {
      address:  currentAddress,
      cityId:   currentCityId,
      cityName: currentCity,
      tag:      currentHomeTag,
      tid:      currentBillInfo.tid,
    }
    handleNewEdit(editParas, merge(currentBillInfo, editParas))
  }

  render() {
    const { currentBillInfo } = this.props
    const { cityName, address } = currentBillInfo
    const { currentCity, currentAddress } = this.state
    const Item = List.Item
    const localCity = getStore('localCity', 'session')
    return (
      <div>
        <List>
          <Item arrow='horizontal'
            extra={ currentCity }
            onClick={ () => Mask(
              <SlidePage target='right' showClose={ false } >
                <CitySearch localCity={ localCity } categoryCode='shenghuojiaofei' handleCityData={ this.handleChangeCity } api={ '/shenghuojiaofei/v1/chinaums/citys' } />
              </SlidePage>) }
          >
            所在城市
          </Item>
          <InputItem defaultValue={ currentAddress } onChange={ this.handleChangeAddress }>详细地址</InputItem>
        </List>
        <WhiteSpace size='lg' />
        <Button title='保存' handleClick={ this.handleClick } btnStyle={ (currentCity === cityName && currentAddress === address) ? { background: '#cccccc' } : {} } />
      </div>
    )
  }
}

export default HomeManege
         
 
 
 
 shenghuojiaofei/components/EditHome.js 
 
import React from 'react'
import { InputItem, WhiteSpace, Toast } from 'antd-mobile'
import { getStore, setStore } from '@boluome/common-lib'
import Button from './Button'


class EditHome extends React.Component {
  constructor(props) {
    super(props)
    this.state = { changedHome: props.currentHomeTag }
    this.handleChange = this.handleChange.bind(this)
    this.handleClick = this.handleClick.bind(this)
    this.onClose = this.onClose.bind(this)
  }
  handleChange(changedHome) {
    this.setState({ changedHome })
  }

  handleClick() {
    const { changedHome } = this.state
    const { currentHomeTag } = this.props
    //  设置一个开关，判断当前的tag是否在已有的tag中
    let homes = getStore('homes', 'session') ? getStore('homes', 'session').homes : []
    let inHomes = false
    homes = homes.map(item => {
      if (item.tag === changedHome) {
        inHomes = true
      } else if (item.tag === currentHomeTag) {
        item.tag = changedHome
      }
      return item
    })
    //  如果当前的tag是已存在的，就弹出已存在，不改变添加操作
    if (inHomes) {
      Toast.fail('已存在此家庭名称，请重新修改', 1)
    } else {
      const { handleNewEdit, currentBillInfo } = this.props
      const { address, cityId, cityName, tid } = currentBillInfo
      const editParas = {
        address,
        cityId,
        cityName,
        tid,
        tag: changedHome,
      }
      setStore('homes', { homes }, 'session')
      handleNewEdit(editParas)
    }
  }

  onClose = key => () => {
    this.setState({
      [key]: false,
    })
  }

  render() {
    const { currentHomeTag } = this.props
    const { changedHome } = this.state
    return (
      <div>
        <InputItem defaultValue={ currentHomeTag } onChange={ this.handleChange } >家庭</InputItem>
        <WhiteSpace size='lg' />
        <Button title='保存' btnStyle={ changedHome === currentHomeTag ? { background: '#cccccc' } : { } } handleClick={ () => changedHome !== currentHomeTag && this.handleClick() } />
      </div>
    )
  }
}

export default EditHome
         
 
 
 
 shenghuojiaofei/components/HomeManege.js 
 
import React from 'react'
import { List, WhiteSpace } from 'antd-mobile'
import Button from './Button'

const HomeManege = ({ currentBillInfo, handleNewDel, handleHomeInput, currentHomeTag, handleToAddress }) => {
  const Item = List.Item
  const { tid, address } = currentBillInfo
  return (
    <div>
      <List>
        <Item arrow='horizontal' extra={ address } onClick={ handleToAddress }>地址</Item>
        <Item arrow='horizontal' extra={ currentHomeTag } onClick={ () => handleHomeInput(currentHomeTag) }>家庭</Item>
      </List>
      <WhiteSpace size='lg' />
      <Button title='删除' handleClick={ () => handleNewDel({ tid }) } btnStyle={{ background: '#ff4848' }} />
    </div>
  )
}
export default HomeManege
         
 
 
 
 shenghuojiaofei/components/Order.js 
 
//  引入react， antd中对应组件， 其它默认组件
import React from 'react'
import { List } from 'antd-mobile'
import { NewPromotion } from '@boluome/oto_saas_web_app_component'
import { getStore } from '@boluome/common-lib'

import ToOrder from './ToOrder.js'
import ServerHeader from './ServerHeader'
import '../styles/order.scss'

const customerUserId = sessionStorage.customerUserId
const userPhone = getStore('userPhone', 'session')

const Order = ({
  currentServer, currentOrg, orderInfo, queryInfo,
  handlePromotionChange,
  curDiscountData = { discount: 0, coupon: '', activity: '' },
  handleOrder,
}) => {
  const billPrice = orderInfo.price
  const { date, billId, barcode } = orderInfo
  const { orgName, typeName, orgId, type, backResv1 } = currentOrg
  const { billNo, billPwd } = queryInfo
  const orderInfoTop = [
    { left: '缴费单位', right: orgName },
    { left: typeName, right: billNo },
    { left: '账单金额', right: `¥${ billPrice }` },
  ]
  const orderParas = {
    userId:       customerUserId,
    date:         date.replace(/[^0-9]/ig, ''),
    couponId:     curDiscountData.coupon ? curDiscountData.coupon.id : '',
    activityId:   curDiscountData.activities ? curDiscountData.activities.id : '',
    channel:      'chinaums',
    writeOffType: '01',
    price:        billPrice,
    type,
    billNo,
    orgId,
    userPhone,
    billPwd,
    backResv1,
    billId,
    barcode,
    orgName,
  }

  const Item = List.Item
  if (curDiscountData && !curDiscountData.discount) curDiscountData.discount = 0
  const resultPrice = (billPrice - curDiscountData.discount).toFixed(2)
  return (
    <div className='my-order-container'>
      <div className='my-order-middle'>
        <div className='my-order'>
          <ServerHeader currentServer={ currentServer } />
          <Item className='bill-price' extra={ `¥ ${ Number(billPrice).toFixed(2) }` }>缴费金额</Item>
          <ul className='order-info-list'>
            {
              orderInfoTop.map(o => (
                <li key={ o.left }>
                  <span>{ o.left }</span>
                  <span>{ o.right }</span>
                </li>
              ))
            }
          </ul>
          <NewPromotion handleChange={ handlePromotionChange } orderType='shenghuojiaofei' channel='chinaums' amount={ parseFloat(billPrice) } count={ 1 } />
        </div>
      </div>
      <ToOrder { ...{ resultPrice, discountPrice: curDiscountData.discount, isSubmit: true, handleToOrder: () => handleOrder(orderParas) } } />
    </div>
  )
}

export default Order
         
 
 
 
 shenghuojiaofei/components/SelectCity.js 
 
import React from 'react'
import { CitySearch } from '@boluome/oto_saas_web_app_component'

const SelectCity = ({ handleCityData, localCity }) => {
  return (
    <div>
      <CitySearch handleContainerClose={ () => window.history.back() } localCity={ localCity } categoryCode='shenghuojiaofei' handleCityData={ handleCityData } api={ '/shenghuojiaofei/v1/chinaums/citys' } />
    </div>
  )
}

export default SelectCity
         
 
 
 
 shenghuojiaofei/components/SelectOrg.js 
 
import React from 'react'
import { Icon } from 'antd-mobile'

import '../styles/selectOrg.scss'

const SelectOrg = ({
  searchOrgResults, handleSearch, handleSelectOrg, selectedCity, currentOrg, isIndex, handleSelectCity,
}) => {
  let currentOrgId = ''
  if (currentOrg) {
    currentOrgId = currentOrg.orgId
  } else if (searchOrgResults[0]) {
    currentOrgId = searchOrgResults[0].orgId
  }
  console.log(909090900909)
  return (
    <div className='selectOrg'>
      <div className='org-header'>
        <div className='city-select' onClick={ () => handleSelectCity(isIndex) }>
          <p>{ selectedCity.name }</p>
          <Icon className='icon-arrow' type='down' />
        </div>
        <div className='org-search'>
          <Icon className='icon-search' type='search' size='md' />
          <input id='inputSearch' type='text' placeholder='搜索出账机构' onBlur={ e => handleSearch(e.target.value) } />
        </div>
      </div>
      {
        searchOrgResults !== '' && (
          <ul className='orgs-list'>
            {
              searchOrgResults.map(item => {
                return (
                  <li key={ item.orgId } onClick={ () => handleSelectOrg(item) }>
                    { item.orgName }
                    { currentOrgId === item.orgId && <Icon className='selected-icon' size='sm' type={ require('svg/shenghuojiaofei/checked_nobg.svg') } /> }
                  </li>
                )
              })
            }
          </ul>
        )
      }
      {
        searchOrgResults.length === 0 && searchOrgResults !== '' && <p className='no-result' style={{ color: '#888', paddingTop: '.2rem', textAlign: 'center' }}>未找到相关信息</p>
      }
      {
        searchOrgResults === '' && (<div className='no-support'><img alt='暂不支持该城市' src={ require('../img/no_support.png') } /><p>所选城市暂不支持该服务</p></div>)
      }
    </div>)
}


export default SelectOrg
         
 
 
 
 shenghuojiaofei/components/SelectServer.js 
 

import React from 'react'
import { getStore } from '@boluome/common-lib'
import { browserHistory } from 'react-router'

import '../styles/selectServer.scss'

import { Icon, Grid, Flex, WhiteSpace, Popup } from 'antd-mobile'


  const SelectServer = ({ selectedCity={ id: '' }, localCity, handleSelectCity,
                          service=[], handleSelectServer,
                          handleContainerClose, setHgt }) => {
     if (service) {
       let serviceInfo = [
         { name: '水费',     categoryId: '1001', cityId: selectedCity.id, hasServer: false, icon: 'sf_no' },
         { name: '电费',     categoryId: '1002', cityId: selectedCity.id, hasServer: false, icon: 'df_no' },
         { name: '燃气费',   categoryId: '1003', cityId: selectedCity.id, hasServer: false, icon: 'rqf_no' },
         { name: '有线电视',  categoryId: '3001', cityId: selectedCity.id, hasServer: false, icon: 'yxds_no' },
         { name: '固话',     categoryId: '7001', cityId: selectedCity.id, hasServer: false, icon: 'gh_no' },
         { name: '宽带',     categoryId: '7002', cityId: selectedCity.id, hasServer: false, icon: 'kd_no' },
         { name: '固话宽带',  categoryId: '4001', cityId: selectedCity.id, hasServer: false, icon: 'ghkd_no' },
         { name: '物业费',   categoryId: '5001', cityId: selectedCity.id, hasServer: false,  icon: 'wyf_no' }]

       serviceInfo.map((item) => {
         service.map((ser) => {
           if (ser.categoryId==item.categoryId && ser.isLive ==  '1') {
             item.hasServer  = true
             item.icon = item.icon.split('_')[0]
           }
         })
       })


       return (
         <div className='sIndex' style={ setHgt ? { height: setHgt } : { } } onClick={ () => setHgt && Popup.hide() } >
           <div className='header'>
             <div className='city-select'>
               <p onClick={ () => { browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/selectCity`); handleContainerClose && handleContainerClose() } }>{ selectedCity.name }</p>
               <Icon className='arrow-down' type='down' />
             </div>
           </div>

           <div className='service'>
             <Flex>
               {
                 serviceInfo.map((item, idx) => {
                   if (idx<3) {

                     return (
                       <ServerItem key={ idx } item={ item } handleSelectServer={ handleSelectServer } handleContainerClose={ handleContainerClose } />
                     )
                   }
                 })
               }
             </Flex>
             <Flex>
                 {
                   serviceInfo.map((item, idx) => {
                     if (idx>=3 && idx<6) {
                       return (
                         <ServerItem key={ idx } item={ item } handleSelectServer={ handleSelectServer } handleContainerClose={ handleContainerClose } />
                       )
                     }
                   })
                 }
             </Flex>
             <Flex>
                 {
                   serviceInfo.map((item, idx) => {
                     if (idx>=6) {
                       return (
                         <ServerItem key={ idx } item={ item } handleSelectServer={ handleSelectServer } handleContainerClose={ handleContainerClose } />
                       )
                     }
                   })
                 }
             </Flex>
           </div>

           <div className='use-tips'>灰色项目暂不支持，我们将尽快开通</div>
         </div>
       )
     } else {
       return (<div></div>)
     }
  }

  const ServerItem = ({ item, handleSelectServer, handleContainerClose }) => (
    <Flex.Item className='server-item' onClick={ () => {
        item.hasServer ? handleSelectServer(item) : ''
        handleContainerClose && handleContainerClose()
    } }>
      <dl>
        <dt>
          <Icon className='service-icon' type={ require(`svg/shenghuojiaofei/${ item.icon }.svg`) } />
        </dt>
        <dd>
          { item.name }
        </dd>
      </dl>
    </Flex.Item>
  )

  export default SelectServer
         
 
 
 
 shenghuojiaofei/components/ServerHeader.js 
 
import React from 'react'
import { Icon } from 'antd-mobile'
import '../styles/serverHeader.scss'

const ServerHeader = ({ currentServer }) => {
  let currentIcon = ''
  switch (currentServer.icon.split('#')[1]) {
    case 'sf':
      currentIcon = require('svg/shenghuojiaofei/sf.svg')
      break
    case 'df':
      currentIcon = require('svg/shenghuojiaofei/df.svg')
      break
    case 'rqf':
      currentIcon = require('svg/shenghuojiaofei/rqf.svg')
      break
    case 'yxds':
      currentIcon = require('svg/shenghuojiaofei/yxds.svg')
      break
    case 'ghkd':
      currentIcon = require('svg/shenghuojiaofei/ghkd.svg')
      break
    case 'wyf':
      currentIcon = require('svg/shenghuojiaofei/wyf.svg')
      break
    default:
      break
  }
  return (
    <div className='server-box'>
      <div className='server'>
        <Icon className='icon' type={ currentIcon } />
        <p>{ currentServer.name }</p>
      </div>
    </div>
  )
}

export default ServerHeader
         
 
 
 
 shenghuojiaofei/components/ToOrder.js 
 
import React from 'react'
import '../styles/toOrder.scss'

const ToOrder = ({ discountPrice, resultPrice, isSubmit, handleToOrder }) => {
  return (
    <div className='footer'>
      {
        Boolean(discountPrice) &&
        <p className='real-price'>{ `已优惠¥${ discountPrice }` }</p>
      }
      <p className='pay-price'>
        实付：¥
        <span className='cur-price'>{ `${ resultPrice.split('.')[0] }.` }</span>
        { resultPrice.split('.')[1] }
      </p>
      <p className={ isSubmit ? 'button active' : 'button' } onClick={ handleToOrder }>立即下单</p>
    </div>
  )
}

export default ToOrder
         
 
 
 
 shenghuojiaofei/components/bill-list.js 
 
import React from 'react'

import '../styles/bill-list.scss'

const BillList = () => {
  const billList = [
    { price: 1515, date: '2015年9月' },
    { price: 14451, date: '2015年8月' },
    { price: 7844, date: '2015年7月' },
    { price: 1455, date: '2015年6月' },
  ]
  return (
    <ul className='bill-list'>
      {
        billList.map(o => (
          <li key={ o.date }>
            <p>
              <span>{ o.date }</span>
              <span>待缴纳</span>
            </p>
            <p>{ `${ o.price }元` }</p>
          </li>
        ))
      }
    </ul>
  )
}

export default BillList
         
 
 
 
 shenghuojiaofei/components/order-details.js 
 
import React from 'react'
import { moment } from '@boluome/common-lib'
import { OrderDetail as OrderDetailDemo, Loading } from '@boluome/oto_saas_web_app_component'
import { Toast, List, WhiteSpace } from 'antd-mobile'
import { afterOrdering, get } from 'business'

import '../styles/order-details.scss'

const LItem = List.Item

export default class OrderDetails extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      orderData: '',
    }
  }
  componentWillMount() {
    const closeLoading = Loading()
    const id = location.pathname.split('/')[3]
    const orderType = location.pathname.split('/')[1]
    get(`/order/v1/${ orderType }/${ id }/info`).then(({ code, data, message }) => {
      if (code === 0) {
        this.setState({ orderData: data })
      } else {
        Toast.fail(message)
      }
      closeLoading()
    })
  }
  render() {
    const { orderData } = this.state
    if (!orderData) return <div />
    const { id, orderType } = orderData
    return (
      <div className='haufei-order'>
        <OrderDetailDemo { ...{ id, orderType, goPay: () => afterOrdering(orderData), content: <Content { ...orderData } /> } } />
      </div>
    )
  }
}

const Content = ({ name, orgName, month, billNo, barCode = '', price, orderPrice, id, createdAt, platformActivity, coupon }) => {
  return (
    <List className='huafei-order-content'>
      <LItem extra={ name }>缴费业务</LItem>
      <LItem extra={ orgName }>出账机构</LItem>
      <LItem extra={ month }>账期</LItem>
      <LItem extra={ billNo }>查询号码</LItem>
      <LItem extra={ barCode }>条码</LItem>
      <WhiteSpace size='md' />

      <LItem extra={ `¥${ orderPrice }` }>账单金额</LItem>
      {
        platformActivity &&
        <LItem extra={ `- ¥${ platformActivity.price }` } className='activity-price'>
          <div>
            <span>减</span>
            <span>{ platformActivity.title }</span>
          </div>
        </LItem>
      }
      {
        coupon &&
        <LItem extra={ `- ¥${ coupon.price }` } className='coupon-price'>
          <div>
            <span>红</span>
            <span>{ coupon.title }</span>
          </div>
        </LItem>
      }
      <LItem extra={ `实付 ¥${ price }` } className='order-price' />
      <WhiteSpace size='md' />

      <LItem extra={ id } >订单编号</LItem>
      <LItem extra={ moment('YYYY-MM-DD HH:mm')(createdAt) }>下单时间</LItem>
    </List>
  )
}
         
 
 
 
 shenghuojiaofei/components/price-input.js 
 
import React from 'react'
import { moment } from '@boluome/common-lib'
import { InputItem, Toast } from 'antd-mobile'
import { createForm } from 'rc-form'
import { merge } from 'ramda'

import Order from '../containers/Order'
import ServerHeader from './ServerHeader'

import '../styles/price-input.scss'

class PriceInput extends React.Component {
  constructor(props) {
    super(props)
    const { orderParas } = props
    this.state = {
      moneyfocused: false,
      showOrder:    false,
      orderParas,
    }
  }
  handleNextClick() {
    let { orderParas } = this.state
    const value = this.iptNode.props.value
    if (value === undefined || value === '') {
      Toast.info('请输入缴费金额')
      return
    }
    if (value < 1) {
      Toast.info('缴费金额必须大于1元')
      return
    }
    orderParas = merge(orderParas)({ orderInfo: { price: value, barcode: '', billId: '', date: moment('YYYYMM')(new Date()) } })
    this.setState({ showOrder: true, orderParas })
  }
  render() {
    const { form, currentServer, orderInfoTop } = this.props
    const { showOrder, orderParas } = this.state
    const { getFieldProps } = form
    return (
      <div className='price-input-container'>
        {
          !showOrder &&
          <div className='price-input bill-info'>
            <ServerHeader currentServer={ currentServer } />
            <div className='ipt-container'>
              <InputItem
                {
                  ...getFieldProps('money2', {
                    normalize: (v, prev) => {
                      if (v && !/^(([1-9]\d*)|0)(\.\d{0,2}?)?$/.test(v)) {
                        if (v === '.') {
                          return '0.'
                        }
                        return prev
                      }
                      return v
                    },
                  })
                }
                type='money'
                placeholder='请输入缴费金额'
                onFocus={
                  () => {
                    this.setState({
                      moneyfocused: false,
                    })
                  }
                }
                ref={ node => this.iptNode = node }
                focused={ this.state.moneyfocused }
              />
            </div>
            <ul className='order-info-list'>
              {
                orderInfoTop.map(o => (
                  <li key={ o.left }>
                    <span>{ o.left }</span>
                    <span>{ o.right }</span>
                  </li>
                ))
              }
            </ul>
            <p className='next-button' onClick={ () => this.handleNextClick() }>下一步</p>
          </div>
        }
        {
          showOrder &&
          <Order { ...orderParas } />
        }
      </div>
    )
  }
}

export default createForm()(PriceInput)
         
 
 
 
 shenghuojiaofei/components/rooter.js 
 
// 加载父路由组件

import React      from 'react'
import customize from 'customize'

const root = ({ children }) => (
  <div style={{ height: '100%', overflow: 'auto' }}>
    { children }
  </div>
)
export default customize(root)
         
 
 
 
 shenghuojiaofei/containers/AddHome.js 
 
import { connect } from 'react-redux'
import { getStore } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'

import AddHome from '../components/AddHome'
import { newUserPage, changeCity } from '../actions/index.js'

const mapStateToProps = () => {
  const [currentHomeTag, currentBillInfo, userCategory, currentServer] =
    [
      getStore('currentHomeTag', 'session').currentHomeTag,
      getStore('currentBillInfo', 'session').currentBillInfo,
      getStore('userCategory', 'session').userCategory,
      getStore('currentServer', 'session').currentServer,
    ]

  const homes = ['我家', '父母家', '房东', '朋友', '其它'].filter(item => {
    let inHomes = false
    userCategory.forEach(o => {
      if (item === o.tag) {
        inHomes = true
      }
    })
    return !inHomes
  }).map(item => ({ label: item, value: item }))

  return {
    currentHomeTag,
    currentBillInfo,
    currentServer,
    userCategory,
    homes,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleChangeCityData: res => {
      const handleClose = Loading()
      dispatch(changeCity(res, handleClose, false))
    },
    handleNewHome: (currentBillInfo, currentHomeTag) => {
      dispatch({ type: 'CHANGE_HOME_TAG', currentHomeTag })
      dispatch(newUserPage(currentBillInfo, currentHomeTag))
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(AddHome)
         
 
 
 
 shenghuojiaofei/containers/AddUser.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { getStore, setStore, parseQuery } from '@boluome/common-lib'
import { wrap } from '@boluome/oto_saas_web_app_component'
import { Toast } from 'antd-mobile'
import { merge } from 'ramda'

import AddUser from '../components/AddUser.js'
import { newUserPage, newEditHome } from '../actions/index.js'
import { changeServer } from '../actions/selectOrg.js'


const chinaumsOrgIdTofft = (apiOrg, sessionOrg) => {
  return apiOrg.orgId === sessionOrg.orgId
  || (apiOrg.orgId === '888880002202900' && sessionOrg.orgId === '00000073')
  || (apiOrg.orgId === '888880002602900' && sessionOrg.orgId === '00000075')
  || (apiOrg.orgId === '888880004102900' && sessionOrg.orgId === '00000291')
  || (apiOrg.orgId === '888880004402900' && sessionOrg.orgId === '00000015')
  || (apiOrg.orgId === '888880004312900' && sessionOrg.orgId === '00000022')
  || (apiOrg.orgId === '888880002802900' && sessionOrg.orgId === '00000278')
  || (apiOrg.orgId === '888880002302900' && sessionOrg.orgId === '00000273')
  || (apiOrg.orgId === '888880002902900' && sessionOrg.orgId === '00000279')
  || (apiOrg.orgId === '888880004202900' && sessionOrg.orgId === '00000566')
  || (apiOrg.orgId === '888880000502900' && sessionOrg.orgId === '00000280')
  || (apiOrg.orgId === '888880001102900' && sessionOrg.orgId === '00000270')
  || (apiOrg.orgId === '888880001802900' && sessionOrg.orgId === '00001201')
}

const mapStateToProps = state => {
  const [currentServer, currentOrg, selectedCity, homesStore] =
    [
      getStore('currentServer', 'session').currentServer,
      getStore('currentOrg', 'session').currentOrg,
      getStore('selectedCity', 'session').selectedCity,
      getStore('homes', 'session').homes,
    ]

  const search = location.search      // ?a=1&b=2
  const queryTypeUrl = parseQuery(search).queryType //  => { a: 1, b: 2 }
  const { addUser } = state
  const { orgs } = addUser
  let queryTypes = []
  if (orgs) {
    orgs.forEach(item => {
      if (chinaumsOrgIdTofft(item, currentOrg)) {
        queryTypes = item.queryTypes
      }
    })
  }
  if (currentOrg.tag) {
    setStore('editInfo', { editInfo: currentOrg }, 'session')
  }
  return {
    currentServer,
    currentOrg,
    queryTypeUrl,
    queryTypes,
    selectedCity,
    homesStore,
    ...addUser,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleClickHome: currentHomeTag => {
      dispatch({ type: 'CHANGE_CURRENT_HOME', currentHomeTag })
    },
    handleNumChange: billNo => {
      dispatch({ type: 'CHANGE_NUM', billNo })
    },
    handlePwdChange: billPwd => {
      dispatch({ type: 'CHANGE_PWD', billPwd })
    },
    handleSelectOrg(currentServer, currentOrg, billNo) {
      let { cityId } = currentServer
      const { categoryId, billCityId } = currentOrg
      if (billCityId) cityId = billCityId
      const getOrgsPara = {
        categoryId,
        cityId,
        channel: 'chinaums',
      }
      setStore('getOrgsPara', { getOrgsPara }, 'session')  // 将请求org的参数放到session中
      dispatch({ type: 'SET_CURRENT_QUERY_TYPE', curQueryType: '' })
      if (billNo) {
        browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/selectOrg?billNo=${ billNo }`)
      } else {
        browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/selectOrg`)
      }
    },
    handleQueryBill: (queryInfo, validationExp) => {
      console.log('queryInfo', queryInfo)
      const { typeName, billNo } = queryInfo
      const reg = new RegExp(validationExp)
      if (validationExp && !reg.test(billNo)) {
        Toast.info(`请输入正确的${ typeName }`, 1)
        return
      }
      setStore('queryInfo', { queryInfo }, 'session')
      const currentBillInfo = getStore('currentBillInfo', 'session') ? getStore('currentBillInfo', 'session').currentBillInfo : ''
      const billParas = merge(currentBillInfo, queryInfo)
      if (billParas.bid) {     // 如果不是第一次新建页面，就执行编辑账单号
        dispatch(newEditHome(billParas, 'billInfo'))    // 当查询账单成功时，将账单保存到userPage中
      } else if (getStore('newUserPage', 'session') === 'newUserPage') {  // 如果是第一次加载新建页面，就执行新建账单号
        const selectedCity = getStore('selectedCity', 'session').selectedCity
        const { name, id } = selectedCity
        billParas.cityId = id
        billParas.cityName = name
        billParas.address = ''
        dispatch(newUserPage(billParas, billParas.tag, 'billInfo'))    // 当查询账单成功时，将账单保存到userPage中
      } else {  // 如果不是第一次加载新建页面，但是没有bid，就执行新建账单号
        dispatch(newUserPage(billParas, billParas.tag, 'billInfo'))    // 当查询账单成功时，将账单保存到userPage中
      }
    },
    handleQueryTypeChange: curQueryType => {
      dispatch({ type: 'SET_CURRENT_QUERY_TYPE', curQueryType })
    },
  }
}

const mapFuncToComponent = dispatch => {
  return {
    componentWillMount() {
      const currentOrg = getStore('currentOrg', 'session').currentOrg
      let { cityId } = currentOrg
      const { categoryId, billCityId, billNo } = currentOrg
      if (billCityId) cityId = billCityId
      dispatch(changeServer({ cityId, categoryId }))
      dispatch({ type: 'CHANGE_NUM', billNo })
    },
  }
}


export default connect(mapStateToProps, mapDispatchToProps)(wrap(mapFuncToComponent)(AddUser))
         
 
 
 
 shenghuojiaofei/containers/App.js 
 

/*
问题：
    1，默认的currentBillInfo格式：{ currentBillInfo: { cityId, cityName, address, tid, tag } }，
      正常格式：{ currentBillInfo: { cityId, cityName, address, tid, tag, ...当前的tagInfo  } }

*/

//  创建一个容器组件
//  引入react相关文件
import { browserHistory } from 'react-router'
import { connect } from 'react-redux'
import { Toast } from 'antd-mobile'
import { getStore, setStore, removeStore } from '@boluome/common-lib'
import { wrap, Loading } from '@boluome/oto_saas_web_app_component'
import { get, login, getLocationGaode } from 'business'
import { merge } from 'ramda'

import App from '../components/AppCategory.js'

//  引入action
import { changeCity, newDelUserPage } from '../actions'

  //  定义一个获取当前服务的函数，需传入citiId
const getCurrentServer = (cityId, serverName) => {
  let currentServer = {}
  switch (serverName) {
    case 'shuifei':
    case '1001':
      currentServer = { categoryName: 'shuifei', categoryId: '1001', cityId, name: '水费', icon: require('svg/shenghuojiaofei/sf.svg') }
      break
    case 'dianfei':
    case '1002':
      currentServer = { categoryName: 'dianfei', categoryId: '1002', cityId, name: '电费', icon: require('svg/shenghuojiaofei/df.svg') }
      break
    case 'ranqifei':
    case '1003':
      currentServer = { categoryName: 'ranqifei', categoryId: '1003', cityId, name: '燃气费', icon: require('svg/shenghuojiaofei/rqf.svg') }
      break
    case 'youxiandianshi':
    case '3001':
      currentServer = { categoryName: 'youxiandianshi', categoryId: '3001', cityId, name: '有线电视', icon: require('svg/shenghuojiaofei/yxds.svg') }
      break
    case 'guhua':
    case '7001':
      currentServer = { categoryName: 'guhua', categoryId: '7001', cityId, name: '固话', icon: require('svg/shenghuojiaofei/gh.svg') }
      break
    case 'kuandai':
    case '7002':
      currentServer = { categoryName: 'kuandai', categoryId: '7002', cityId, name: '宽带', icon: require('svg/shenghuojiaofei/kd.svg') }
      break
    case 'guhuakuandai':
    case '4001':
      currentServer = { categoryName: 'guhuakuandai', categoryId: '4001', cityId, name: '固话宽带', icon: require('svg/shenghuojiaofei/ghkd.svg') }
      break
    case 'wuyefei':
    case '5001':
      currentServer = { categoryName: 'wuyefei', categoryId: '5001', cityId, name: '物业费', icon: require('svg/shenghuojiaofei/wyf.svg') }
      break
    default:
      currentServer = { categoryName: 'all', categoryId: '', cityId, name: '全品类', icon: '' }
      break
  }
  return currentServer
}

const mapStateToProps = ({ app }) => {     // connect的第一个参数，每次state改变,这个函数都会执行一次。他的参数是定死的，第一个参数代表的是state，第二个参数代表的是router之类的属性，无用
  const localCity = getStore('localCity', 'session')

  const currentServerCategoryId = getCurrentServer('', location.pathname.split('/')[2]).categoryId
  return {
    ...app,
    localCity,
    getCurrentServer,
    currentServerCategoryId,
  }
}

const mapDispatchToProps = dispatch => { // connect的第二个参数，每次state改变，只有对应的函数会执行一次，一般参数都是存到本地中，后期获取的，在这里可以通过定义一个全局变量sta，把上一个函数中的state传递过来
  return {
    dispatch,
    handleSelectCity(selectedCity) {
      dispatch(changeCity(selectedCity)) // 改变当前选择的city对应的服务
    },
    handleSelectServer(currentServer) {
      setStore('currentServer', { currentServer }, 'session')
      setStore('getOrgsPara', { getOrgsPara: { cityId: currentServer.cityId, categoryId: currentServer.categoryId, channel: 'chinaums' } }, 'session')
      dispatch({ type: 'CHANGE_CURRENT_SERVER', currentServer })
      if (getStore('editInfo', 'session')) removeStore('editInfo', 'session')   // 当本地中有editInfo，就一出这条session
      browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/selectOrg`)
    },
    //  下面是第二个首页界面的相关方法
    handleToBill(currentServer, currentBillInfo) {  // 传入的数据是一个数组，有两个数据，一个是品类信息，一个是查询信息，直接跳转到账单页面
      currentBillInfo = merge(currentBillInfo)({ date: '' })
      setStore('currentHomeTag', { currentHomeTag: currentBillInfo.tag }, 'session')
      setStore('currentServer', { currentServer }, 'session')
      setStore('currentOrg', { currentOrg: currentBillInfo }, 'session')
      setStore('queryInfo', { queryInfo: currentBillInfo }, 'session')
      setStore('currentBillInfo', { currentBillInfo }, 'session')
      if (getStore('editInfo', 'session')) removeStore('editInfo', 'session')   // 当本地中有editInfo，就一出这条session
      browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/billInfo`)
    },
    handleToSelectOrgs(getOrgsPara, currentServer, currentBillInfo) { // 传入的数据是一个对象，只包含品类信息，直接跳转到选择org页面
      setStore('getOrgsPara', { getOrgsPara }, 'session')
      setStore('currentServer', { currentServer }, 'session')
      if (getStore('editInfo', 'session')) removeStore('editInfo', 'session')   // 当本地中有editInfo，就一出这条session
      setStore('currentBillInfo', { currentBillInfo }, 'session')
      setStore('selectedCity', { selectedCity: { id: getOrgsPara.cityId, name: getOrgsPara.name } }, 'session')             // 设置当前选择的城市信息
      removeStore('currentOrg', 'session')
      browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/selectOrg`)
    },
    handleChangeHome(o) {
      dispatch({ type: 'CHANGE_HOME_TAG', currentHomeTag: o.tag })
      dispatch(changeCity(o)) // 改变当前选择的city对应的服务
    },
    handleEditClick(isEdit) {
      dispatch({ type: 'SET_CURRENT_EDIT_STATUS', isEdit: !isEdit })
    },
    handleHomeManegeClick(currentHomeTag, currentBillInfo, userCategory) {
      setStore('currentHomeTag', { currentHomeTag }, 'session')
      setStore('currentBillInfo', { currentBillInfo }, 'session')
      setStore('userCategory', { userCategory }, 'session')
      browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/homeManege`)
    },
    handleClickNewIcon(currentHomeTag, currentBillInfo, userCategory, selectedCity) {
      setStore('currentHomeTag', { currentHomeTag }, 'session')
      currentBillInfo.cityName = selectedCity.name
      setStore('currentBillInfo', { currentBillInfo }, 'session')
      setStore('userCategory', { userCategory }, 'session')
      browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/addHome`)
    },
    handleNewEdit(currentServer, currentBillInfo) {
      const currentOrg = currentBillInfo
      setStore('currentServer', { currentServer }, 'session')
      setStore('currentBillInfo', { currentBillInfo }, 'session')
      setStore('selectedCity', { selectedCity: { id: currentBillInfo.billCityId, name: currentBillInfo.billCityName } }, 'session')        // 设置当前选择的城市信息
      setStore('currentOrg', { currentOrg }, 'session')
      if (getStore('editInfo', 'session')) removeStore('editInfo', 'session')   // 当本地中有editInfo，就一出这条session
      dispatch({ type: 'SET_CURRENT_EDIT_STATUS', isEdit: true })
      browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/addUser`)
    },
    handleNewDel(currentBillInfo) {
      const { tid, bid } = currentBillInfo
      dispatch({ type: 'SET_CURRENT_EDIT_STATUS', isEdit: true })
      dispatch(newDelUserPage({ tid, bid }))
    },
  }
}

const mapFuncToComponent = dispatch => {   // 整个生命周期只执行一次
  return {
    componentWillMount: () => {
      const handleClose = Loading()                   // 页面加载时开启loading图

      //  创建一个函数用于设置当前的生活缴费的服务信息
      const setServerInfo = cityId => {
        let currentCategoryName = location.pathname.split('/')[2]
        const currentServer = getCurrentServer(cityId, currentCategoryName)
        currentCategoryName = currentServer.categoryName
        const { categoryId } = currentServer
        setStore('currentCategoryName', { currentCategoryName }, 'session')
        setStore('currentServer', { currentServer }, 'session')
        setStore('getOrgsPara', { getOrgsPara: { cityId, categoryId, channel: 'chinaums' } }, 'session')
        dispatch({ type: 'CHANGE_CURRENT_SERVER', currentServer })
      }

      // 检查当前定位城市是否在城市列表中
      const checkCity = (localCity, cityList) => {
        cityList.forEach(item => {
          if (item.name === localCity) {                // 当定位城市在城市列表中，将城市名换成列表中的定位对象
            setStore('selectedCity', { selectedCity: item }, 'session')
            console.log('item', item)
            localCity = item
          }
        })

        if (localCity.id) {                             // 当定位城市不在城市列表中时，城市信息中是不会有id属性的
          setServerInfo(localCity.id)                   // 设置单品类时需要信息
          dispatch(changeCity(localCity, handleClose))  // 执行一次改变城市的套路，将当前城市下的service绑定到状态树中
        } else {                                        // 当定位城市不在城市列表中，将所有service表为空，这样其后所有页面都不会进入了
          dispatch({ type: 'CHANGE_CITY_SERVICE', service: [] })
          setServerInfo('')                             // 设置单品类时需要信息
          handleClose()
        }
      }

      let [localCity, cityList] = ['', '']
      // 如果已有选择城市，就不必执行定位，比如拆分的水费，新用户进入selectOrg，并选择城市时
      if (getStore('selectedCity', 'session') && getStore('selectedCity', 'session').selectedCity) {
        localCity = getStore('selectedCity', 'session').selectedCity.name
        setStore('localCity', localCity, 'session')     // localCity是字符串格式，表示定位的地址
        if (cityList) {
          checkCity(localCity, cityList)
        }
      } else {
        getLocationGaode(
          () => {                                                                  // 获取定位城市
            localCity = getStore('currentPosition', 'session').city.replace(/['省', '市', '县', '区']/, '')
            setStore('localCity', localCity, 'session')     // localCity是字符串格式，表示定位的地址
            if (cityList) {
              checkCity(localCity, cityList)
            }
          }
        )
      }

      // 获取定位时的城市名和城市信息，并通过checkCity获取当前定位的城市信息
      const getGeolocation = () => {
        get('/shenghuojiaofei/v1/chinaums/citys').then(({ code, data, message }) => {        // 获取支持城市列表
          if (code === 0) {
            cityList = data
            console.log('localCity', localCity)
            if (localCity) {
              checkCity(localCity, cityList)
            }
          } else {
            Toast.fail(message, 1)
          }
        })
      }

      // 获取用户信息
      const getUserPage = customerUserId => {
        get(`/shenghuojiaofei/v2/${ customerUserId }/info`).then(({ code, data, message }) => {
          if (code === 0) {
            const userCategory = data ? data.userCategory : []
            setStore('userCategory', { userCategory }, 'session')
            if (!userCategory || userCategory.length === 0) {           // 如果后台没有保存的用户信息，就删除session中保存的currentBillInfo，currentHomeTag
              setStore('currentBillInfo', { currentBillInfo: '' }, 'session')
              setStore('currentHomeTag', { currentHomeTag: '' }, 'session')
              // 调用获取定位城市对应信息的方法
              getGeolocation()
            } else {                                                    // 如果后台有保存的用户信息，就将保存的城市名称和id，保存到本地
              let name = userCategory[0].cityName
              let id = userCategory[0].cityId
              const currentHomeTag = getStore('currentHomeTag', 'session')
              // 如果是其他页面返回的，则session中就有currentHomeTag，根据这个，筛选出当前的city
              if (currentHomeTag) {
                userCategory.forEach(item => {
                  if (item.tag === currentHomeTag.currentHomeTag) {
                    name = item.cityName
                    id = item.cityId
                  }
                })
              }
              const selectedCity = {
                name,
                id,
              }
              setServerInfo(id)
              dispatch(changeCity(selectedCity, handleClose))  // 执行一次改变城市的套路，将当前城市下的service绑定到状态树中
            }
            dispatch({ type: 'GET_USER_PAGE', userCategory })
          } else {
            Toast.fail(message, 1)
          }
        })
      }

      // 如果已经有过登陆账号，那么直接使用登陆后的账号，不执行联合登陆
      if (getStore('customerUserId', 'session')) {
        getUserPage(getStore('customerUserId', 'session'))
      } else {
        login((err, { customerUserId }) => {
          if (err) {
            Toast.fail('用户登录失败！', 1)
          } else {
            getUserPage(customerUserId)
          }
        })
      }
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(wrap(mapFuncToComponent)(App))
         
 
 
 
 shenghuojiaofei/containers/BillInfo.js 
 
import { connect } from 'react-redux'
import { getStore } from '@boluome/common-lib'
import { send } from 'business'
import { wrap, Loading } from '@boluome/oto_saas_web_app_component'
import { browserHistory } from 'react-router'
import { Toast } from 'antd-mobile'

import { getHistoryBillInfo, getOrgInfo } from '../actions/billInfo.js'

import BillInfo from '../components/BillInfo.js'


const formatDate = i => {
  const date = new Date()
  date.setMonth(date.getMonth() - i)
  const y = date.getFullYear()
  let m = date.getMonth() + 1
  m = String(m).length === 1 ? `0${ m }` : m
  const formatwdate = `${ y }年${ m }月`
  return { value: formatwdate, label: formatwdate }
}

const mapStateToProps = state => {
  const { billInfo } = state
  const [currentServer, currentOrg, queryInfo, currentBillInfo] =
    [
      getStore('currentServer', 'session').currentServer,
      getStore('currentOrg', 'session').currentOrg,
      getStore('queryInfo', 'session').queryInfo,
      getStore('currentBillInfo', 'session').currentBillInfo,
    ]
  const dates = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(formatDate)

  return {
    ...billInfo,
    currentOrg,
    currentServer,
    queryInfo,
    currentBillInfo,
    dates,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleDatesChange: queryInfo => dispatch(getHistoryBillInfo(queryInfo)),
    handleCodeCancel:  () => browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/adduser?queryType=2`),
    handleCodeConfirm: () => browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/adduser?queryType=0`),
  }
}

const mapFuncToCompoent = dispatch => {
  const getBillInfo = queryInfo => {
    const handleClose = Loading()
    send('/shenghuojiaofei/v1/bills', queryInfo, { 'Content-Type': 'application/json' }).then(({ code, data, message }) => {
      if (code === 0) {
        const status = data.billList[0].status
        if (status === '00') {
          dispatch({ type: 'CHANGE_BILL_INFO', billInfo: { type: 'bill', data } })
        } else {
          dispatch({ type: 'CHANGE_BILL_INFO', billInfo: { type: 'noBill', tips: '暂未查询到欠费' } })
        }
      } else if (code === -1) {
        dispatch({ type: 'CHANGE_BILL_INFO', billInfo: { type: 'noBill', tips: '暂未查询到欠费', subTips: '' } })
      } else if (code === 20) {
        dispatch({ type: 'CHANGE_BILL_INFO', billInfo: { type: 'errorBill', tips: '缴费信息有误', subTips: '请确认缴费信息后重新查询' } })
      } else {
        Toast.fail(message, 1)
        dispatch({ type: 'CHANGE_BILL_INFO', billInfo: { type: '', tips: '' } })
      }
      handleClose()
    }).catch(({ message }) => {
      console.log(message)
      handleClose()
    })
  }

  return {
    componentWillMount: () => {
      // 首先清除页缓存中billinfo的数据
      dispatch({ type: 'CHANGE_BILL_INFO', billInfo: '' })

      const queryInfo = getStore('queryInfo', 'session').queryInfo
      getBillInfo(queryInfo)

      const { billCityId, orgId } = queryInfo
      dispatch({ type: 'SHOW_BEIJING_INPUT', showPriceIpt: billCityId === '0111' })
      dispatch(getOrgInfo({ cityId: billCityId, orgId }))
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(wrap(mapFuncToCompoent)(BillInfo))
         
 
 
 
 shenghuojiaofei/containers/EditAddress.js 
 
import { connect } from 'react-redux'
import { getStore, setStore } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'

import EditAddress from '../components/EditAddress'
import { newEditHome, changeCity } from '../actions/index.js'

const mapStateToProps = () => {
  const [currentHomeTag, currentBillInfo, userCategory] =
    [
      getStore('currentHomeTag', 'session').currentHomeTag,
      getStore('currentBillInfo', 'session').currentBillInfo,
      getStore('userCategory', 'session').userCategory,
    ]
  return {
    currentHomeTag,
    currentBillInfo,
    userCategory,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    // handleHomeInput: currentHomeTag => {
    //   setStore('currentHomeTag', { currentHomeTag }, 'session')
    //   browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/editHome`)
    // },
    handleChangeCityData: res => {
      const handleClose = Loading()
      dispatch(changeCity(res, handleClose, false))
    },
    handleNewEdit: (editParas, currentBillInfo) => {
      dispatch(newEditHome(editParas, 'homeManege'))
      setStore('currentBillInfo', { currentBillInfo }, 'session')
    },
  }
}
export default connect(mapStateToProps, mapDispatchToProps)(EditAddress)
         
 
 
 
 shenghuojiaofei/containers/EditHome.js 
 
import { connect } from 'react-redux'
import { getStore, setStore } from '@boluome/common-lib'

import EditHome from '../components/EditHome'
import { newEditHome } from '../actions/index.js'

const mapStateToProps = () => {
  const [currentHomeTag, userCategory, currentBillInfo] = [getStore('currentHomeTag', 'session').currentHomeTag, getStore('userCategory', 'session').userCategory, getStore('currentBillInfo', 'session').currentBillInfo]
  return {
    currentHomeTag,
    userCategory,
    currentBillInfo,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleNewEdit: currentBillInfo => {
      const currentHomeTag = currentBillInfo.tag
      setStore('currentHomeTag', { currentHomeTag }, 'session')
      dispatch(newEditHome(currentBillInfo, 'homeManege'))
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(EditHome)
         
 
 
 
 shenghuojiaofei/containers/HomeManege.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { getStore, setStore } from '@boluome/common-lib'
import { Modal } from 'antd-mobile'

import { newDelUserPage } from '../actions/index.js'

import HomeManege from '../components/HomeManege'

import '../styles/home-manege.scss'

const mapStateToProps = () => {
  const [currentHomeTag, currentBillInfo, userCategory] =
    [
      getStore('currentHomeTag', 'session').currentHomeTag,
      getStore('currentBillInfo', 'session').currentBillInfo,
      getStore('userCategory', 'session').userCategory,
    ]
  return {
    currentHomeTag,
    currentBillInfo,
    userCategory,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleNewDel(paras) {
      Modal.alert('', '删除将清除所有缴费信息', [
        { text: '取消', onPress: () => console.log('cancel') },
        { text: '删除', onPress: () => dispatch(newDelUserPage(paras)) },
      ])
    },
    handleHomeInput(currentHomeTag) {
      setStore('currentHomeTag', { currentHomeTag }, 'session')
      browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/editHome`)
    },
    handleToAddress() {
      browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/editAddress`)
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(HomeManege)
         
 
 
 
 shenghuojiaofei/containers/Order.js 
 
/*
  bug:优惠点击的事件，没有区分是平台活动还是红包，默认选的都是红包

  线上环境：/promotion/query_promotions 处取消header头中的appcode
  userId改为联合登陆userId
*/


//  引入react创建组件，connect将数据注入到组件中，引入子组件

import { connect } from 'react-redux'

import Order from '../components/Order'
import { changeOrder } from '../actions/order.js'

//  定义变量
const mapStateToProps = (state, props) => {
  const { order } = state
  const { currentServer, currentOrg, orderInfo, queryInfo, currentBillInfo } = props

  return {
    ...order,
    currentServer,
    currentOrg,
    orderInfo,
    queryInfo,
    currentBillInfo,
  }
}

// 定义函数，函数中其实就是定义dispatch方法的使用
const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleOrder:           paras => dispatch(changeOrder(paras)),    // data中传过来的是一个数组[orderData, currentOrg],orderData代表的是请求下单参数，currentOrg代表请求成功后，保存到本地的数据
    handlePromotionChange: curDiscountData => dispatch({ type: 'CHANGE_DISCOUNT', curDiscountData }),
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(Order)
         
 
 
 
 shenghuojiaofei/containers/SelectCity.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { setStore, getStore, parseQuery } from '@boluome/common-lib'
import { Loading } from '@boluome/oto_saas_web_app_component'
import { merge } from 'ramda'

import SelectCity from '../components/SelectCity.js'
import { changeCity } from '../actions'

window.browserHistory = browserHistory

const mapStateToProps = () => {
  const localCity = getStore('localCity', 'session')
  return {
    localCity,
  }
}

const mapDispatchToProps = dispatch => {
  return {
    dispatch,
    handleCityData(res) {
      const { id, name } = res
      console.log('res', res)
      const currentBillInfo = getStore('currentBillInfo', 'session') ? getStore('currentBillInfo', 'session').currentBillInfo : {}
      merge(currentBillInfo, { cityId: id, cityName: name })
      setStore('currentBillInfo', { currentBillInfo }, 'session')

      const search = location.search // ?a=1&b=2
      if (parseQuery(search).flag === '1') {    // 是从选择org页跳转过来的
        //  改变本地中存储的selectedCity
        setStore('selectedCity', { selectedCity: res }, 'session')
        //  改变本地中存储的getOrgsPara中的cityId
        const orgsPara = getStore('getOrgsPara', 'session').getOrgsPara
        orgsPara.cityId = id
        console.log('orgsPara', orgsPara)
        setStore('getOrgsPara', { getOrgsPara: orgsPara }, 'session')
        //  改变本地中存储的currentServer中的cityId
        const currentServer = getStore('currentServer', 'session').currentServer
        currentServer.cityId = id
        setStore('currentServer', { currentServer }, 'session')
        // 因为传入了handleClose，所以在公共组件内，选择城市后，会自动执行一次hanldeClose，故无需写history.back
      } else {
        const handleClose = Loading()
        dispatch(changeCity(res, handleClose, true))
      }
    },
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(SelectCity)
         
 
 
 
 shenghuojiaofei/containers/SelectOrg.js 
 
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { setStore, getStore, parseQuery } from '@boluome/common-lib'
import { wrap } from '@boluome/oto_saas_web_app_component'

import SelectOrg from '../components/SelectOrg.js'
import { changeServer } from '../actions/selectOrg.js'

const mapStateToProps = ({ selectOrg }, { isIndex = '' }) => {
  const selectedCity = getStore('selectedCity', 'session') ? getStore('selectedCity', 'session').selectedCity : ''
  const currentOrg = getStore('currentOrg', 'session') ? getStore('currentOrg', 'session').currentOrg : selectedCity
  const { orgs = [], searchKey } = selectOrg
  let searchOrgResults = ''
  if (orgs.length !== 0) {
    if (searchKey === '') {
      searchOrgResults = orgs
    } else {
      searchOrgResults = orgs.filter(org => org.orgName.indexOf(searchKey) >= 0)
    }
  }
  return {
    selectedCity,
    currentOrg,
    searchOrgResults,
    isIndex,
  }
}

const mapDispatchToprops = dispatch => {
  return {
    dispatch,
    handleSelectOrg: currentOrg => {
      // 当链接中有billNo带过来时，就将billNo取出，存入currentOrg中，以使在addUser页面显示出默认的billNo
      const search = location.search
      if (parseQuery(search).billNo) currentOrg.billNo = parseQuery(search).billNo
      setStore('currentOrg', { currentOrg }, 'session')
      dispatch({ type: 'CHANGE_CURRENT_ORG', currentOrg })
      browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/addUser`)
    },
    handleSearch: searchKey => {
      dispatch({ type: 'CHANGE_SEARCH_KEY', searchKey })
    },
    handleSelectCity(isIndex) {
      browserHistory.push(`/shenghuojiaofei/${ getStore('currentCategoryName', 'session').currentCategoryName }/selectCity?flag=1&isIndex=${ isIndex }`)
    },
  }
}

const mapFuncToComponent = dispatch => {
  return {
    componentWillMount() {
      const orgsPara = getStore('getOrgsPara', 'session').getOrgsPara
      console.log('orgsPara', orgsPara)
      //  清空状态树中的 orgs 和 searchKey 信息，防止已有数据后，重新选择地址返回该页后，会使用旧数据
      dispatch({ type: 'CHANGE_SERVER_DATA', orgs: [] })
      dispatch({ type: 'CHANGE_SEARCH_KEY', searchKey: '' })
      dispatch(changeServer(orgsPara))
    },
  }
}

export default connect(mapStateToProps, mapDispatchToprops)(wrap(mapFuncToComponent)(SelectOrg))
         
 
 
 
 shenghuojiaofei/index.js 
 
// 加载服务样式

import React      from 'react'
import { render } from 'react-dom'
import Root       from './root'

import '../../styles/index.scss'

render(<Root />, document.querySelector('#root'))
         
 
 
 
 shenghuojiaofei/reducers/addUser.js 
 
import { mergeState } from '@boluome/common-lib'

const addUser = (state = { }, action) => {
  switch (action.type) {
    case 'CHANGE_CURRENT_HOME':
    case 'CHANGE_NUM':
    case 'CHANGE_PWD':
    case 'SET_CURRENT_QUERY_TYPE':
    case 'CHANGE_SERVER_DATA':
      return mergeState(state, action)
    default:
      return state
  }
}

export default addUser
         
 
 
 
 shenghuojiaofei/reducers/app.js 
 
import { mergeState } from '@boluome/common-lib'

const app = (state = {}, action) => {
  switch (action.type) {
    case 'CHANGE_CURRENT_CITY':
    case 'CHANGE_CITY_SERVICE':
    case 'CHANGE_CURRENT_SERVER':
    case 'GET_USER_PAGE':
    case 'CHANGE_HOME_TAG':
    case 'CHANGE_SERVICE_STYLE':
    case 'SET_CURRENT_EDIT_STATUS':
      return mergeState(state, action)
    default:
      return state
  }
}

export default app
         
 
 
 
 shenghuojiaofei/reducers/billInfo.js 
 
import { mergeState } from '@boluome/common-lib'

const billInfo = (state = {}, action) => {
  switch (action.type) {
    case 'CHANGE_BILL_INFO':
    case 'SET_CURRENT_DATE':
    case 'SET_CURRENT_ORG_DETAIL':
    case 'SHOW_BEIJING_INPUT':
      return mergeState(state, action)
    default:
      return state
  }
}

export default billInfo
         
 
 
 
 shenghuojiaofei/reducers/index.js 
 
//  引入combineReducers来合并多个reducers为一个主reducers
import { combineReducers } from 'redux'
import app from './app'
import selectOrg from './selectOrg'
import addUser from './addUser'
import billInfo from './billInfo'
import order from './order'

const reducers = combineReducers({ app, selectOrg, addUser, billInfo, order })

export default reducers
         
 
 
 
 shenghuojiaofei/reducers/order.js 
 
import { mergeState } from '@boluome/common-lib'

const order = (state = {}, action) => {
  switch (action.type) {
    case 'CHANGE_DISCOUNT':
      return mergeState(state, action)
    default:
      return state
  }
}

export default order
         
 
 
 
 shenghuojiaofei/reducers/selectOrg.js 
 
import { mergeState } from '@boluome/common-lib'

const initialState = {
  searchKey: '',
}

const selectOrg = (state = initialState, action) => {
  switch (action.type) {
    case 'CHANGE_SERVER_DATA':
    case 'CHANGE_CURRENT_ORG':
    case 'CHANGE_SEARCH_KEY' :
      return mergeState(state, action)
    default:
      return state
  }
}

export default selectOrg
         
 
 
 
 shenghuojiaofei/root.js 
 
import React from 'react'
import { Router, Route, browserHistory, IndexRoute } from 'react-router'
import { createStore, applyMiddleware } from 'redux'
import { Provider } from 'react-redux'
import thunk        from 'redux-thunk'
import reducers     from './reducers'

// 由Reducers创建状态树
const store = createStore(reducers, applyMiddleware(thunk))
// 定义根组件
const Root = () => (<Provider store={ store }><Routes /></Provider>)

export default Root

// 路由配置
const Routes = () => (
  <Router history={ browserHistory } >
    <Route path='/shenghuojiaofei(/:jiaofeifangshi)' component={ require('react-router?name=root!./components/rooter') }>
      <IndexRoute component={ require('react-router?name=app!./containers/App') } />
      <Route path='selectCity' component={ require('react-router?name=selectCity!./containers/SelectCity') } />
      <Route path='selectOrg' component={ require('react-router?name=selectOrg!./containers/selectOrg') } />
      <Route path='addUser' component={ require('react-router?name=addUser!./containers/AddUser') } />
      <Route path='billInfo' component={ require('react-router?name=billInfo!./containers/BillInfo') } />
      <Route path='homeManege' component={ require('react-router?name=homeManege!./containers/HomeManege') } />
      <Route path='editHome' component={ require('react-router?name=editHome!./containers/EditHome') } />
      <Route path='editAddress' component={ require('react-router?name=editAddress!./containers/EditAddress') } />
      <Route path='addHome' component={ require('react-router?name=addHome!./containers/AddHome') } />
      <Route path='billList' component={ require('react-router?name=bill-list!./components/price-input') } />
      <Route path=':orderId' component={ require('react-router?name=order-details!./components/order-details') } />
    </Route>
  </Router>
)

//  <Route path='bill' component={ require('react-router?name=bill!./containers/Bill') } />
//  <Route path='order' component={ require('react-router?name=order!./containers/Order') } />
         
 
 
 
 shenghuojiaofei/styles/addUser.scss 
 
@import 's_common.scss';

.addUser{
  .remark{
    font-size:24px;
    color:#aaaaaa;
    line-height: 24px;
    text-align: center;
    padding-left: 32px;
    padding-right: 32px;
  }

  .code-img{
    bottom:20px;
  }

  /* 改变固定样式*/
  /* 第一个以外的列表*/
  .am-list-item.am-list-item-middle .am-list-line{
    height: 100px;
  }
  .am-list-item .am-list-line .am-list-content{
    color:#111111 !important;
    font-size: 30px !important;
  }
  /* input*/
  .am-list .am-list-item.am-input-item{
    height: 100px;
  }
  .am-list .am-list-item .am-input-label{
    color:#111111 !important;
    font-size: 30px !important;
  }
  /* whitespace*/
  .am-whitespace.am-whitespace-md {
    height: 0.18rem;
      background: #f5f5f6;
  }
  /* 多余边框*/
  .am-list-body{
    border-top: none;
  }
  .am-list-item.select-home .am-list-line:after, .am-list .am-list-item.am-input-item:after, .am-list-body:after{
    border-bottom: none;
  }

 }

/* input框label的样式改变*/
.am-list-item .am-input-label.am-input-label-5{
  width: 153px;
 }

.home-list{
  background: #fff;
  padding-left: 32px;
  li{
    height: 100px;
    line-height: 100px;
    font-size:30px;
    color:#111111;
    border-bottom: 1px solid #e5e5e5;
    position: relative;
    overflow: hidden;
    .center{
      @include s_middle;
      left: 45%;
      height: 50px;
      line-height: 50px;
      font-size: 30px;
      color: #111;
    }
    .right{
      @include s_middle;
      right: 32px;
      .am-icon-md{
        width: 34px;
        height: 34px;
        &.my-icon{
          width: 36px;
          height: auto;
        }
      }
    }
  }
  /* 改变antd默认样式*/
  /* icon颜色*/
  .anticon-check-circle:before{
    color: #ffa000;
  }
 }


//  改变picker组件默认样式
.am-picker-popup-item{
  font-size:28px;
  color:#999999;
  &.am-picker-popup-header-left{
    color:#999999;
  }
  &.am-picker-popup-title{
    font-size:36px;
    color:#333333;
  }
  &.am-picker-popup-header-right{
    color:#ffab00;
  }
 }
         
 
 
 
 shenghuojiaofei/styles/app.scss 
 
@import 's_common.scss';

.user-page{
  min-height: 100%;
  position: relative;
  padding-bottom: 20px;
  .my-home{
    // min-height: calc(100% - 100px);
    .home-container{
      position: relative;
      .user-icon{
        @include s_middle;
        right: 30px;
      }
      background: #fff;
      height: 88px;
      .home-list{
        position: absolute;
        left: 0;
        overflow: hidden;
        .am-flexbox-item{
          line-height: 88px;
          width: 160px;
          font-size:30px;
          color:#606060;
          text-align:center;
          float: left;
          &.active{
            line-height: 84px;
            border-bottom: 4px solid #ff9a00;
            color: #ff9a00;
          }
        }
      }
    }
    .city-select {
      height: 110px;
      background: #fff;
      text-align: center;
      position: relative;
      .container {
        width: 200px;
        overflow: hidden;
        @include s_allCenter;
        .icon-location {
          float: left;
          margin-right: 10px;
          margin-top: -3px;
        }
        p {
          float: left;
          margin-right: 5px;
          line-height: 38px;
        }
        .icon-arrow {
          float: left;
          color: #e5e5e5;
        }
      }
    }
  }

  .more-pay{
    bottom: 0;
    text-align: center;
    line-height: 100px;
    font-size:30px;
    color:#ff9a00;
    width: 100%;
  }

  .home-info{
    &.am-list-item.am-list-item-middle .am-list-line{
      height: 160px;
    }
    .am-icon-md{
      height: 70px;
      width: 70px;
    }
    .second-page-dl dt{
      left: .2rem;
    }
    .second-page-dl dd.first-dd{
      left: 140px;
    }
  }

  .second-page-dl{
    overflow: hidden;
    height: 100%;
    width: 90%;
    dt{
      position: absolute;
      top:50%;
      -webkit-transform: translateY(-50%);
              transform: translateY(-50%);
      left: 0;
    }
    dd.first-dd{
      position: absolute;
      top:50%;
      -webkit-transform: translateY(-50%);
              transform: translateY(-50%);
      left: .53rem;
      p.address {
        white-space: pre-wrap;
        max-width: 80%;
      }
    }
    dd.second-dd{
      @include s_middle;
      right: 75px;
      font-size:30px;
      color:#888;
    }
  }


//  单独设置single-category模式的样式，覆盖全品类时的样式
  &.single-category{
    .home-container{
      background: #fff;
      height: 88px;
      li{
        float: left;
        width: 20%;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        line-height: 88px;
        font-size:28px;
        color:#606060;
        text-align:center;
        box-sizing: border-box;
        padding: 0 10px;
        &.active{
          line-height: 84px;
          border-bottom: 4px solid #ff9a00;
          color: #ff9a00;
        }
      }
    }
    .header{
      height: 70px;
      padding: 0 30px;
      border-bottom: 1px solid #e5e5e5;
      p{
        font-size:28px;
        color:#999999;
        line-height: 70px;
      }
      .left{
        float: left;
      }
      .right{
        float: right;
      }
    }

    .am-whitespace{
      background: #f5f5f6;
    }
  }

  .edit-bill{
    position: absolute;
    right: 30px;
    overflow: hidden;
    background: #fff;
    z-index: 1;
    padding-top: 52px;
    padding-bottom: 50px;
    li{
      float: left;
      font-size:28px;
      height: 30px;
      line-height: 30px;
      width: 90px;
      &.edit{
        text-align: left;
        color:#ffab00;
        border-right: 3px solid #cccccc;
      }
      &.del{
        text-align: right;
        color:#ff4848;
      }
    }
  }



  /* 改变antd默认样式*/
  /* 列表*/
  .am-list-item.am-list-item-middle .am-list-line{
    height: 134px;
  }
  /* 手风琴*/
  .am-accordion-item.pad{
    padding-left: 36px;
  }
  .am-accordion .am-accordion-item .am-accordion-header{
    height: 134px;
  }
  .am-accordion .am-accordion-item .am-accordion-content{
    overflow: hidden;
    .edit-detail{
      padding: 27px 0;
      text-align: center;
      .am-flexbox-item{
        font-size:28px;
        color:#606060;
        line-height: 46px;
        height: 46px;
      }
      .edit{
        border-left: 1px solid #e4e4e5;
        border-right: 1px solid #e4e4e5;
      }
    }
  }
  .am-accordion{
    border-top: none;
  }
  .am-accordion .am-accordion-item .am-accordion-header i{
    top: .5rem;
  }

 }

.content .slide-page-container{
  background: #fff;
  /* transform: translateY(60%);*/
  .use-tips{
    display: none;
  }
 }

/* 手风琴图标方向*/
.am-accordion .am-accordion-item .am-accordion-header i {
  -webkit-transform: rotate(0deg);
          transform: rotate(0deg);
 }
.am-accordion .am-accordion-item .am-accordion-header[aria-expanded~='true'] i{
  -webkit-transform: rotate(90deg);
          transform: rotate(90deg);
  -webkit-transfrom: rotate(90deg);
 }

.am-list-item .am-list-line .am-list-extra {
  max-width: 80%;
}
         
 
 
 
 shenghuojiaofei/styles/bill-list.scss 
 
@import "../../../styles/s_common.scss";

.bill-list {
  background: $bg-f3;
  padding: 20px 15px;
  li {
    background:#ffffff;
    box-shadow:0 0 6px 0 #a6a6a6;
    border-radius:4px;
    margin-bottom: 20px;
    padding: 20px;
    background: url(../img/bill_list_bg.png) right center no-repeat;
    background-size: auto 100%;
    p {
      &:nth-of-type(1) {
        margin-bottom: 30px;
        span {
          &:nth-of-type(1) {
            float: left;
            @include s_fontDemo(24px, 24px, $font-66);
          }
          &:nth-of-type(2) {
            float: right;
            @include s_fontDemo(24px, 32px, $theme);
          }
        }
      }
      &:nth-of-type(2) {
        @include s_fontDemo(60px, 83px, $font-33);
      }
    }
  }
}
         
 
 
 
 shenghuojiaofei/styles/billInfo.scss 
 
@import 's_common.scss';

.no-error{
  height: 400px;
  padding-top: 120px;
  background: #fff;
  border-top: 1px solid #e5e5e5;
  img{
    height: 180px;
    display: block;
    margin: 0 auto 14px;
  }
  p{
    font-size:28px;
    color:#333333;
    line-height:36px;
    text-align:center;
    margin-bottom: 10px;
  }
  span{
    display: block;
    font-size:20px;
    color:#999999;
    line-height:30px;
    text-align:center;
  }
 }

a{
  box-sizing: border-box;
 }

.bill-info{
  .img-container{
    background: #fff;
    overflow: hidden;
    height: 390px;
    h1{
      font-size:28px;
      color:#333333;
      font-weight: normal;
      line-height: 80px;
      padding-left: 28px;
    }
    img{
      display: block;
      margin: 0 auto 14px;
      @include s_blockDemo(1.8rem, auto);
    }
    p{
      font-size:28px;
      color:#333333;
      line-height: 36px;
      text-align: center;
    }
    span{
      display: block;
      margin: 0 auto;
      width: 320px;
      font-size:20px;
      color:#999999;
      line-height:30px;
      text-align:center;
    }
  }
  .list{
    padding: 5px 32px;
    border-top: 1px solid #e4e4e5;
    background: #fff;
    li{
      width: 100%;
      line-height: 60px;
      overflow: hidden;
      p{
        font-size: 28px;
        color: #999999;
      }
      .left{
        float: left;
      }
      .right{
        float: right;
      }
    }
    }

    .orderInfo-top-container{
      border-bottom: 1px solid #e5e5e5;
      .orderInfo-top{
        background: #fff;
        padding: 20px 0 30px 60px;
        border-bottom: 1px solid #e5e5e5;
        .top{
          font-size:28px;
          color:#333333;
          line-height: 40px;
        }
        .middle{
          font-size:80px;
          color:#333333;
          line-height: 240px;
          text-align: center;
        }
      }
    }
 }






/* 默认样式改变*/
.my-list .am-list-item{height: 1.07rem; }
.my-list .am-list-item .am-list-line .am-list-extra{font-size: .3rem; -ms-flex-preferred-size: none;flex-basis: none; -webkit-box-flex: 1; -ms-flex: 1; flex: 1; color: $black111; }
.my-list .am-list-item .am-list-line .am-list-content{font-size: .3rem; -webkit-box-flex: 0;-ms-flex: none;flex: none; color: $black111; }


.am-modal.am-modal-android .am-modal-content .am-modal-footer .am-modal-button-group-h{-webkit-box-pack: justify; -ms-flex-pack: justify; justify-content: space-between; }
.am-modal-content .am-modal-header .am-modal-title img{display: block; margin: 0 auto; }

/* .bill-info-middle{*/
/*   background: #fff;*/
/*   padding-left: 30px;*/
/*   li{*/
/*     overflow: hidden;*/
/*     border-bottom: 1px solid #e1e1e2;*/
/*     &:last-child{*/
/*       border-bottom: none;*/
/*     }*/
/*     p{*/
/*       font-size: 30px;*/
/*       line-height: 106px;*/
/*       color:#111111;*/
/*       &.li-left{*/
/*         float: left;*/
/*       }*/
/*       &.li-right{*/
/*         float: right;*/
/*         padding-right: 27px;*/
/*       }*/
/*     }*/
/*   }*/
/* }*/
/**/
/* .bill-list{*/
/*   list-style: none;*/
/*   overflow: hidden;*/
/*   padding-left: 0.32rem;*/
/*   background: #fff;*/
/*   li{*/
/*     border-bottom: 1px solid $grey555;*/
/*     height: 1.06rem;*/
/*     line-height: 1.06rem;*/
/*     padding-right: 0.32rem;*/
/*     &:last-child{*/
/*       border-bottom: none;*/
/*     }*/
/*     h1{*/
/*       font-weight: normal;*/
/*       font-size: 0.30rem;*/
/*       color: $black111;*/
/*       float: left;*/
/*     }*/
/*     p{*/
/*       float:right;*/
/*       font-size: 0.28rem;*/
/*       position: relative;*/
/*       .price{*/
/*         color: #f66;*/
/*         margin-right: 0.40rem;*/
/*       }*/
/*       .status{*/
/*         color:$grey000;*/
/*       }*/
/*       img{*/
/*         display: inline-block;*/
/*         height: .26rem;*/
/*         right: 0;*/
/*         @include s_middle;*/
/*       }*/
/*     }*/
/**/
/*   }*/
/* }*/
         
 
 
 
 shenghuojiaofei/styles/home-manege.scss 
 
@import "../../../styles/s_common.scss";


.am-modal-body {
  @include s_fontDemo(32px, 32px, $font-33);
}
         
 
 
 
 shenghuojiaofei/styles/order-details.scss 
 
@import "../../../styles/s_common.scss";

.huafei-order-content {
  .am-list-item .am-list-line .am-list-content, .am-list-item .am-list-line .am-list-extra {
    font-size: 28px;
    color: $font-33;
  }
  .am-list-item.am-list-item-middle {
    @include s_border_b;
    &.activity-price, &.coupon-price {
      border-bottom: none;
      .am-list-line {
        @include s_border_b;
        .am-list-content {
          span {
            float: left;
            &:nth-of-type(1) {
              display: inline-block;
              @include s_blockDemo(32px, 32px);
              background: #ff6e19;
              border-radius:6px;
              @include s_fontDemo(20px, 32px, #fff);
              text-align: center;
              margin-right: 10px;
            }
          }
        }
        .am-list-extra {
          color: $font-f48;
        }
      }
    }
    &.coupon-price .am-list-line .am-list-content span:nth-of-type(1) {
      background: $font-f48;
    }
    &.order-price .am-list-line {
      justify-content: flex-end;
    }
  }
  .am-list-body div:not(:last-child) .am-list-line:after {
    border-bottom: none;
  }
  .am-whitespace.am-whitespace-md {
    background: #f4f4f5;
  }
}
         
 
 
 
 shenghuojiaofei/styles/order.scss 
 
@import '../../../styles/s_common.scss';

.my-order-container {
  height: 100%;
  overflow: hidden;
  position: relative;
  .my-order-middle {
    height: 100%;
    overflow: auto;
    .my-order {
      padding-bottom: 112px;
      .bill-price {
        .am-list-content {
          font-size: 28px;
          color: $font-33;
        }
      }
      .order-info-list {
        background:#ffffff;
        padding: 24px 30px 11px;
        @include s_border_t;
        margin-bottom: 20px;
        li {
          overflow: hidden;
          margin-bottom: 13px;
          span {
            @include s_fontDemo(24px, 33px, $font-66);
            &:nth-of-type(1) {
              float: left;
            }
            &:nth-of-type(2) {
              float: right;
            }
          }
        }
      }
    }
  }
}


//  改变默认样式
.my-order .am-list-body{border-top: 0 solid #e5e5e5!important; }
//  红包选择
.my-order .am-list-body:after{
  border-bottom: none;
 }
.am-list-item .am-list-line .am-list-extra span{
  color: #f66;
 }
         
 
 
 
 shenghuojiaofei/styles/price-input.scss 
 
@import "../../../styles/s_common.scss";

.price-input {
  .ipt-container {
    background:#ffffff;
    padding: 25px 0;
    .am-list-item.am-input-item {
      margin: 0 30px;
      border:1px solid #999999;
      border-radius:4px;
      .fake-input-placeholder, .fake-input.focus {
        // text-align: left;
        font-size: 32px;
      }
    }
    .am-list-item.am-input-item:after {
      border-bottom: none;
    }
    .am-list-item .am-input-control .fake-input-container .fake-input.focus:after {
      border-color: $theme;
    }
    .am-number-keyboard-wrapper table tr .am-number-keyboard-item.keyboard-confirm {
      background: $theme;
      color: $font-ff;
    }

    // 光标和文字对其
    .am-list-item .am-input-control .fake-input-container .fake-input {
      text-align: left;
      &.focus {
        width: auto;
        min-width: 2px;
      }
    }
    .am-list-item .am-input-control .fake-input-container .fake-input-placeholder {
      text-align: left;
      color: $font-99;
    }
  }

  .order-info-list {
    background:#ffffff;
    padding: 24px 30px 11px;
    @include s_border_t;
    margin-bottom: 50px;
    li {
      overflow: hidden;
      margin-bottom: 13px;
      span {
        @include s_fontDemo(24px, 33px, $font-66);
        &:nth-of-type(1) {
          float: left;
        }
        &:nth-of-type(2) {
          float: right;
        }
      }
    }
  }

  .next-button {
    margin-left: 30px;
    margin-right: 30px;
    @include s_fontDemo(38px, 90px, $font-ff);
    background: $theme;
    text-align: center;
    border-radius: 4px;
  }
}
         
 
 
 
 shenghuojiaofei/styles/s_common.scss 
 
body,
dd,
dl,
dt,
fieldset,
form,
h1,
h2,
h3,
h4,
h5,
h6,
html,
img,
legend,
li,
ol,
p,
ul {
    margin: 0;
    padding: 0;
 }

fieldset,
img {
    border: none;
 }

address,
caption,
cite,
code,
dfn,
th,
var {
    font-style: normal;
    font-weight: normal;
 }

ol,
ul {
    list-style: none;
 }

input {
    outline: none;
    border: none;
 }

body,
html {
    width: 100%;
    height: 100%;
    margin: 0;
    background: #f5f5f6;
 }

html {
    overflow-x: hidden;
 }






// 定义公共的变量
// 定义页面中用到的颜色都使用变量进行定义了，命名是颜色+rgb的三个数字的倒数第二个数字
$black555:rgb(51,51,51);
$black666:rgb(64,64,64);
$black111:rgb(17,17,17);
$grey777:rgb(170,170,170);
$grey333:rgb(136,136,136);
$grey000:rgb(204,204,204);
$grey222:rgb(227,227,228);
$grey223:rgb(229,229,230);
$grey555:rgb(225,225,226);
$red500:rgb(255,102,102);
$yellow570:rgb(255,170,0);
$yellow550:rgb(255,154,0);
$white555:rgb(255,255,255);


// 定义公共的代码块
// center：父元素内左右居中，middle：父元素内上下居中
@mixin s_center{
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    -ms-transform:translateX(-50%);     /* IE 9 */
    -moz-transform:translateX(-50%);    /* Firefox */
    -webkit-transform:translateX(-50%); /* Safari 和 Chrome */
    -o-transform:translateX(-50%);
 }
@mixin s_middle{
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    -ms-transform:translateY(-50%);     /* IE 9 */
    -moz-transform:translateY(-50%);    /* Firefox */
    -webkit-transform:translateY(-50%); /* Safari 和 Chrome */
    -o-transform:translateY(-50%);
 }
@mixin s_allCenter{
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translateX(-50%) translateY(-50%);
    -ms-transform:translateX(-50%) translateY(-50%);     /* IE 9 */
    -moz-transform:translateX(-50%) translateY(-50%);    /* Firefox */
    -webkit-transform:translateX(-50%) translateY(-50%); /* Safari 和 Chrome */
    -o-transform:translateX(-50%) translateY(-50%);
 }
// 字体家族，用于设置固定颜色和大小的字体模版，使用时需要传入两个参数：$l对应杭高，$clr对应颜色，$size对应大小，其中页面中用到的颜色都使用变量进行定义了，命名是颜色+rgb的三个数字的倒数第二个数字
@mixin s_fontDemo ($clr,$size,$l) {
    color: $clr;
    font-size: $size;
    line-height: $l;
 }
// 块元素模版，参数对应：$w对应宽，$h对应高，
@mixin s_blockDemo ($w,$h) {
    width: $w;
    height: $h;
 }


//  改变antd默认样式

//  改变picker组件默认样式
.am-picker-popup-item{
  font-size:28px;
  color:#999999;
  &.am-picker-popup-header-left{
    color:#999999;
  }
  &.am-picker-popup-title{
    font-size:36px;
    color:#333333;
  }
  &.am-picker-popup-header-right{
    color:#ffab00;
  }
 }

//  List.Item, InputItem
.am-list-item .am-input-label,
.am-list-item .am-list-line .am-list-extra,
.am-list-item .am-list-line .am-list-content,
.am-list-item .am-input-control input{
  font-size:28px !important;
  color:#333333 !important;
 }
input::-webkit-input-placeholder {/* WebKit browsers */
  font-size:28px !important;
  color:#adadad !important;
 }
input:-moz-placeholder {/* Mozilla Firefox 4 to 18 */
  font-size:28px !important;
  color:#adadad !important;
 }
input::-moz-placeholder {/* Mozilla Firefox 19+ */
  font-size:28px !important;
  color:#adadad !important;
 }
input:-ms-input-placeholder {/* Internet Explorer 10+ */
  font-size:28px !important;
  color:#adadad !important;
 }


//  modal组件
.am-modal-button-group-h .am-modal-button{
  color: #ffab00;
 }
.am-modal-button-group-h .am-modal-button:first-child{
  color:#999999;
 }
         
 
 
 
 shenghuojiaofei/styles/selectOrg.scss 
 
@import 's_common.scss';

.selectOrg{
  height: 100%;
  position: relative;
  .org-header{
    height: 56px;
    width: 100%;
    padding: 15px 0;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    position: absolute;
    background: #f5f5f6;
    top: 0;
    z-index: 10;
    box-sizing: content-box;
    .city-select, .org-search{
      @include s_fontDemo(#222222, 30px, 56px);
      height: 56px;
      background:#ffffff;
      border-radius:10px;
    }
    .city-select{
      margin-left: 22px;
      margin-right: 10px;
      text-align: center;
      padding-left: 10px;
      padding-right: 10px;
      overflow: hidden;
      p{
        font-size: 30px;
        float: left;
      }
      .icon-arrow{
        float: left;
        width: 27px;
        display: block;
        line-height: 70px;
        color: #888;
        margin-left: 8px;
        float: right;
        margin-top: 5px;
      }
    }
    .org-search{
      margin-right: 16px;
      width: 594px;
      -webkit-box-flex:1;
          -ms-flex:1;
              flex:1;
      .icon-search{
        color: #8e8e93;
        line-height: 56px;
        margin-left: 25px;
        margin-right: 16px;
        float: left;
        margin-top: 5px;
        width: 27px;
      }
      input{
        font-size: .28rem;
        line-height: 56px;
        float: left;
        height: 56px;
      }
    }
  }

  .orgs-list{
    padding: 86px 4px 0 32px;
    background:#ffffff;
    overflow-y: auto;
    li{
      height:100px;
      border-bottom: 1px solid #e5e5e5;
      font-size:30px;
      color:#404040;
      line-height:100px;
      position: relative;
      &:last-child{
        border-bottom: none;
      }
      .selected-icon{
        @include s_middle;
        right: 30px;
      }
    }
  }

  .no-support{
    @include s_allCenter;
    img{
      display: block;
      margin: 0 auto;
      width: 170px;
      margin-bottom: 23px;
    }
    p{
      font-size:28px;
      color:#999999;
      line-height:36px;
      text-align:center;
    }
  }

 }
         
 
 
 
 shenghuojiaofei/styles/selectServer.scss 
 
@import 's_common.scss';
.sIndex{
  height: 100%;
  background: url(../img/index_bg.png) no-repeat center bottom;
  background-size: 100% auto;
  .header{
    background:#ffffff;
    width:100%;
    height:88px;
    line-height: 88px;
    position: relative;
    border-top: 1px solid #e5e5e6;
    border-bottom: 1px solid #e5e5e6;
    .city-select{
      overflow: hidden;
      @include s_allCenter;
      p{
        float: left;
        font-size:30px;
        color:#222222;
      }
      .arrow-down{
        float: left;
        line-height: 95px;
        color:#888888;
        margin-left: 10px;
        font-size: 20px;
        float: right;
        margin-top: 26px;
      }
      .am-icon-md{
        width: 35px;
        height: 35px;
      }
    }
  }

  .service{
    background: #fff;
    .server-item{
      height: 186px;
      dl{
        dt{
          padding-top: 38px;
          .service-icon{
            width: 70px;
            height: 70px;
            display: block;
            margin: 0 auto;
          }
        }
        dd{
          text-align: center;
          font-size:26px;
          line-height: 54px;
          color:#404040;
        }
      }
    }

  }

  .use-tips{
    font-size:26px;
    color:#dbdbdb;
    text-align:center;
    line-height: 86px;
  }
 }
         
 
 
 
 shenghuojiaofei/styles/serverHeader.scss 
 
@mixin s_middle{position: absolute; top: 50%; -webkit-transform: translateY(-50%); transform: translateY(-50%); }

.server-box{
  padding-left: 32px;
  background: #fff;
  border-top: 1px solid #e4e4e5;
  .server{
    border-bottom: 1px solid #e5e5e5;
    position: relative;
    p{
      color:#111111;
      margin-left: 90px;
      height: 142px;
      line-height: 142px;
    }
    .icon{
      width:70px;
      @include s_middle;
      &.am-icon-md{
        height: 70px;
      }
    }
  }
 }
         
 
 
 
 shenghuojiaofei/styles/toOrder.scss 
 
@mixin fontDemo($f, $c, $h) {
  font-size: $f;
  color: $c;
  line-height: $h;
 }
@mixin blockDemo($w, $h) {
  width: $w;
  height: $h;
 }

.footer{
  position: absolute;
  box-sizing: border-box;
  padding-left: 30px;
  border-top: 1px solid #e5e5e5;
  bottom: 0;
  width: 100%;
  height: 112px;
  background: #fff;
  z-index: 20;
  display: flex;
  justify-content: space-between;
  .real-price{
    font-size:20px;
    color:#999999;
    line-height: 112px;
  }
  .pay-price{
    @include fontDemo(.28rem, #ff4848, 1.12rem);
    .cur-price{
      font-size: 36px;
    }
  }
  .button{
    @include blockDemo(200px, 112px);
    @include fontDemo(34px, #fff, 112px);
    text-align:center;
    background-color: rgb(219,219,219);
    &.active{
      background-color: rgb(255,160,0);
      color: #fff;
    }
  }
}
